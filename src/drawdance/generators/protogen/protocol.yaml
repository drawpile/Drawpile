# SPDX-License-Identifier: MIT

_protocol:
    version: dp:4.25.0
    undo_depth: 30

# Control messages (transparent)
ServerCommand:
    id: 0
    comment: |
             Server command message

             This is a general purpose message for sending commands to the server
             and receiving replies. This is used for (among other things):

             - the login handshake
             - setting session parameters (e.g. max user count and password)
             - sending administration commands (e.g. kick user)
    fields:
        # In Drawpile's protocol.yaml, this uses bytes instead of utf8.
        # But it's really a JSON string, so we change it to get something
        # that's properly typed and null-terminated.
        - msg utf8

Ping:
    id: 2
    comment: |
             Ping message

             This is used for latency measurement as well as a keepalive. Normally, the client
             should be the one to send the ping messages.

             The server should return a Ping with the is_pong flag set
    fields:
        - is_pong bool

Disconnect:
    id: 1
    comment: |
             Disconnect notification

             This message is used when closing the connection gracefully. The message queue
             will automatically close the socket after sending this message.
    fields:
        - reason enum:
          name: DisconnectReason
          variants:
              - Error
              - Kick
              - Shutdown
              - Other
        - message utf8

KeepAlive:
    id: 3
    comment: |
             The client may indicate support for this during login, in which
             case the server will send this kind of message if it did not send
             anything else for a while. This is to make sure the client doesn't
             run into an idle timeout if its upload queue is too saturated to
             actually manage sending out a ping.
    fields: []

Internal:
    id: 31
    comment: Reserved for internal use
    reserved: true

# Meta messages (transparent)

Join:
    id: 32
    comment: |
             Inform the client of a new user

             This message is sent only be the server. It associates a username
             with a context ID.
    fields:
        - flags flags: [auth, mod, bot]
        - name utf8
        - avatar bytes

Leave:
    id: 33
    comment: |
             Inform the client of a user leaving

             This message is sent only by the server. Upon receiving this message,
             clients will typically remove the user from the user listing. The client
             is also allowed to release resources associated with this context ID.
    fields: []

SessionOwner:
    id: 34
    comment: |
             Session ownership change

             This message sets the users who have operator status. It can be
             sent by users who are already operators or by the server (user id=0).

             The list of operators implicitly contains the user who sends the
             message, thus users cannot deop themselves.

             The server sanitizes the ID list so, when distributed to other users,
             it does not contain any duplicates or non-existing users and can be trusted
             without checking the access control list.
    fields:
        - users vec_u8:
          max_len: 255

Chat:
    id: 35
    comment: |
             A chat message

             Chat message sent by the server with the user ID 0 are server messages.
             (Typically a Command message is used for server announcements, but the Chat message
             is used for those messages that must be stored in the session history.)
    fields:
        - tflags flags: [bypass]
        - oflags flags: [shout, action, pin, alert]
        - message utf8

TrustedUsers:
    id: 36
    name: trusted
    comment: |
             List of trusted users

             This message sets the list of user who have been tagged as trusted,
             but who are not operators. The meaning of "trusted" is a mostly
             clientside concept, but the session can be configured to allow trusted
             users access to some operator commands. (Deputies)

             This command can be sent by operators or by the server (ctx=0).

             The server sanitizes the ID list so, when distributed to other users,
             it does not contain any duplicates or non-existing users and can be trusted
             without checking the access control list.
    fields:
        - users vec_u8:
          max_len: 255

SoftReset:
    id: 37
    comment: |
             Soft reset point marker

             This message marks the point in the session history where a soft reset occurs.
             A thick-server performs an internal soft-reset when a user joins.

             All users should truncate their own session history when receiving this message,
             since undos cannot cross the reset boundary.
    fields: []

PrivateChat:
    id: 38
    comment: |
             A private chat message

             Note. This message type was added in protocol 4.21.2 (v. 2.1.0). For backward compatiblity,
             the server will not send any private messages from itself; it will only relay them from
             other users. In version 3.0, this should be merged with the normal Chat message.

             Private messages always bypass the session history.
    fields:
        - target u8
        - oflags u8
        - message utf8

ResetStream:
    id: 39
    comment: |
             Streamed chunk of session reset messages. The client and server
             will negotiate support and compression algorithm.
    fields:
        - data bytes


# Meta messages (opaque)

Interval:
    id: 64
    comment: |
             Event interval record

             This is used to preserve timing information in session recordings.

             Note. The maximum interval (using a single message) is about 65 seconds.
             Typically the intervals we want to store are a few seconds at most, so this should be enough.
    fields:
        - msecs u16

LaserTrail:
    id: 65
    comment: |
             Start/end drawing pointer laser trail

             This signals the beginning or the end of a laser pointer trail. The trail coordinates
             are sent with MovePointer messages.

             A nonzero persistence indicates the start of the trail and zero the end.
    fields:
        - color argb32
        - persistence u8

MovePointer:
    id: 66
    comment: |
             Move user pointer

             This is message is used to update the position of the user pointer when no
             actual drawing is taking place. It is also used to draw the "laser pointer" trail.
             Note. This is a META message, since this is used for a temporary visual effect only,
             and thus doesn't affect the actual canvas content.

             The pointer position is divided by 4, like classic brushes.
    fields:
        - x i32
        - y i32

RemovedMarker:
    id: 67
    comment: Removed in version 2.3
    reserved: true

UserACL:
    id: 68
    comment: |
             Set user specific locks

             This is an opaque meta command that contains a list of users to be locked.
             It can only be sent by session operators.
    fields:
        - users vec_u8:
          max_len: 255

LayerACL:
    id: 69
    comment: |
             Change layer access control list

             This is an opaque meta command. It is used to set the general layer lock
             as well as give exclusive access to selected users.

             When the OWNLAYERS mode is set, any user can use this to change the ACLs on layers they themselves
             have created (identified by the ID prefix.)

             Using layer ID 0 sets or clears a general canvaswide lock. The tier and exclusive user list is not
             used in this case.

             The eighth bit of the flags field (0x80) indicates whether the layer is locked in general.
             The first three bits (0x07) indicate the access tier level.
    fields:
        - id u16
        - flags u8
        - exclusive vec_u8:
          max_len: 255

FeatureAccessLevels:
    id: 70
    name: featureaccess
    comment: |
             Change feature access tiers

             Tier 0 is operator, 1 is trusted, 2 is authenticated, 3 and above
             is guest. A value of 255 means to leave that tier unchanged. Any
             unknown features will be ignored by the client.
    fields:
        - feature_tiers vec_u8:
          min_len: 1
          max_len: 255

DefaultLayer:
    id: 71
    comment: |
             Set the default layer

             The default layer is the one new users default to when logging in.
             If no default layer is set, the newest layer will be selected by default.
    fields:
        - id u16

RemovedFiltered:
    id: 72
    comment: Removed in version 2.3
    reserved: true

Extension:
    id: 73
    comment: Reserved for non-standard extension use
    reserved: true

UndoDepth:
    id: 74
    comment: Set maximum undo depth
    fields:
        - depth u8

Data:
    id: 75
    comment: |
             Send and receive structured information. Intended for stuff like
             sending and receiving user troubleshooting information, sharing
             brushes etc. Should probably be a server meta message so that it
             can be directed at the appropriate user, but that's something for
             Drawpile 3.0.
    fields:
        - type enum:
          name:
          variants:
              - UserInfo
        - recipient u8
        - body bytes

LocalChange:
    id: 76
    comment: |
             A local-only modification, such as toggling layer visibility or
             setting a local canvas background. Shouldn't be sent over the
             network, but will be recorded.
    fields:
        - type enum:
          name:
          variants:
              - LayerVisibility
              - BackgroundTile
              - ViewMode
              - ActiveLayer
              - ActiveFrame
              - OnionSkins
              - TrackVisibility
              - TrackOnionSkin
              - LayerSketch
        - body bytes

# Command messages (opaque)
UndoPoint:
    id: 128
    comment: |
             Undo demarcation point

             The client sends an UndoPoint message to signal the start of an undoable sequence.
    fields: []

CanvasResize:
    id: 129
    name: resize
    comment: |
             Adjust canvas size

             This is the first command that must be sent to initialize the session.

             This affects the size of all existing and future layers.

             The new canvas size is relative to the old one. The four adjustement
             parameters extend or retract their respective borders.
             Initial canvas resize should be (0, w, h, 0).
    fields:
        - top i32
        - right i32
        - bottom i32
        - left i32

RemovedLayerCreate:
    id: 130
    comment: Removed in version 2.3, subsumed by LayerTreeCreate
    reserved: true

LayerAttributes:
    id: 131
    name: layerattr
    comment: |
             Change layer attributes

             If the target layer is locked, this command requires session operator privileges.

             Specifying a sublayer requires session operator privileges. Currently, it is used
             only when sublayers are needed at canvas initialization.

             Note: the `fixed` flag is unused since version 2.2. It's functionality is replaced
             by the custom timeline feature.
    fields:
        - id u16
        - sublayer u8
        - flags flags: [censor, fixed, isolated, clip]
        - opacity u8
        - blend blendmode

LayerRetitle:
    id: 132
    name: retitlelayer
    comment: Change a layer's title
    fields:
        - id u16
        - title utf8

RemovedLayerOrder:
    id: 133
    comment: Removed in version 2.3, subsumed by LayerTreeMove
    reserved: true

RemovedLayerDelete:
    id: 134
    comment: Removed in version 2.3, subsumed by LayerTreeDelete
    reserved: true

RemovedLayerVisibility:
    id: 135
    comment: Removed in version 2.3, layer visibility is local since 2.2
    reserved: true

PutImage:
    id: 136
    comment: |
             Draw a bitmap onto a layer

             This is used for pasting images, floodfill, merging annotations and
             other tasks where image processing is done clientisde.

             All layer blending modes are supported.

             The image data is DEFLATEd 32bit premultiplied ARGB data. The image
             is prefixed with a 32 bit unsigned integer (big endian) which contains
             the expected length of the uncompressed data.

             Note that since the message length is fairly limited, a
             large image may have to be divided into multiple PutImage
             commands.

             Compatibility hack: this message is also used to disguise selection
             messages when drawing on the builtin server. If the blend mode is
             253, this is really a SelectionPut message; the bottom octet of
             layer is the selection id, the upper octet is the operation, x and
             y are actually i32, w and h are clamped to u16, the image is the
             mask (which may be empty.) If the blend mode is 254, this is really
             a SelectionClear message; the bottom octet of layer is the
             selection id and everything else is ignored.
    fields:
        - layer u16
        - mode blendmode
        - x u32
        - y u32
        - w u32
        - h u32
        - image bytes

FillRect:
    id: 137
    comment: Fill a rectangle with solid color
    fields:
        - layer u16
        - mode blendmode
        - x u32
        - y u32
        - w u32
        - h u32
        - color argb32

RemovedToolChange:
    id: 138
    comment: Removed in version 2.1
    reserved: true

RemovedPenMove:
    id: 139
    comment: Removed in version 2.1
    reserved: true

PenUp:
    id: 140
    comment: |
             Signals the end of a stroke. If one exists, this causes the
             sublayer of this user on the given layer to be merged into its
             parent. Strokes in indirect paint modes will create such sublayers.
             A pen up command for layer 0 causes the sublayers on all layers to
             be merged. If the message context id is 0, the sublayers of all
             users are merged, either on the given layer or on all layers if
             that's 0 too.
    fields:
        - layer u16

AnnotationCreate:
    id: 141
    name: newannotation
    comment: |
             Create a new annotation

             Annotations are floating text layers. They are drawn over the image layers and
             have no defined stacking order.

             The new annotation created with this command is initally empy with a transparent background
    fields:
        - id u16
        - x i32
        - y i32
        - w u16
        - h u16

AnnotationReshape:
    id: 142
    name: reshapeannotation
    comment: Change the position and size of an annotation
    fields:
        - id u16
        - x i32
        - y i32
        - w u16
        - h u16

AnnotationEdit:
    id: 143
    name: editannotation
    comment: |
             Change annotation content

             Accepted contents is the subset of HTML understood by QTextDocument

             If an annotation is flagged as protected, it cannot be modified by users
             other than the one who created it, or session operators.
    fields:
        - id u16
        - bg argb32
        - flags flags: [protect, valign_center, valign_bottom, alias, rasterize]
        - border u8
        - text utf8

AnnotationDelete:
    id: 144
    name: deleteannotation
    comment: |
             Delete an annotation

             Note: Unlike in layer delete command, there is no "merge" option here.
             Merging an annotation is done by rendering the annotation item to
             an image and drawing the image with the PutImage command. This ensures
             identical rendering on all clients.
    fields:
        - id u16

RemovedMoveRegion:
    id: 145
    comment: Removed in version 2.3, subsumed by TransformRegion
    reserved: true

PutTile:
    id: 146
    comment: |
             Set the content of a tile

             Unlike PutImage, this replaces an entire tile directly without any blending.
             This command is typically used during canvas initialization to set the initial content.

             PutTile can target sublayers as well. This is used when generating a reset image
             with incomplete indirect strokes. Sending a PenUp command will merge the sublayer.
    fields:
        - user u8
        - layer u16
        - sublayer u8
        - col u16
        - row u16
        - repeat u16
        - image bytes

CanvasBackground:
    id: 147
    name: background
    comment: |
             Set the canvas background tile

             If the payload is exactly 4 bytes long, it should be interpreted as a solid background color.
             Otherwise, it is the DEFLATED tile bitmap
    fields:
        - image bytes

DrawDabsClassic:
    id: 148
    name: classicdabs
    comment: |
             Draw classic brush dabs

             A simple delta compression scheme is used.
             The coordinates of each dab are relative to the previous dab.
             The coordinate system has 1/4 pixel resolution. Divide by 4.0 before use.
             The size field is the brush diameter multiplied by 256.
    fields:
        - flags u8
        - layer u16
        - x i32: div4
        - y i32: div4
        - color argb32
        - mode blendmode
        - dabs struct:
          name: ClassicDab
          fields:
            - x i8: div4
            - y i8: div4
            - size u24: div256
            - hardness u8
            - opacity u8

DrawDabsPixel:
    id: 149
    name: pixeldabs
    comment: |
             Draw round pixel brush dabs

             The same kind of delta compression is used as in classicdabs,
             but the fields all have integer precision.
    fields:
        - flags u8
        - layer u16
        - x i32
        - y i32
        - color argb32
        - mode blendmode
        - dabs struct:
          name: PixelDab
          fields:
            - x i8
            - y i8
            - size u16
            - opacity u8

DrawDabsPixelSquare:
    id: 150
    name: squarepixeldabs
    comment: Draw square pixel brush dabs
    alias: DrawDabsPixel

DrawDabsMyPaint:
    id: 151
    name: mypaintdabs
    comment: |
             Draw MyPaint brush dabs in "normal and eraser" mode, the regular
             mode of MyPaint brushes as used in MyPaint itself. Always uses
             direct painting mode. Other blend and indirect painting modes use
             the mypaintdabsblend message instead.
    fields:
        - layer u16
        - x i32: div4
        - y i32: div4
        - color argb32
        - lock_alpha u8
        - colorize u8
        - posterize u8
        - posterize_num u8
        - dabs struct:
          name: MyPaintDab
          fields:
            - x i8: div4
            - y i8: div4
            - size u24: div256
            - hardness u8
            - opacity u8
            - angle u8
            - aspect_ratio u8

DrawDabsMyPaintBlend:
    id: 152
    name: mypaintdabsblend
    comment: |
             Draw MyPaint brush dabs with single blend mode. Used for cases
             where the regular MyPaint blending with "normal and eraser" mode is
             unsuitable.
    fields:
        - flags u8
        - layer u16
        - x i32: div4
        - y i32: div4
        - color argb32
        - mode blendmode
        - dabs struct:
          name: MyPaintBlendDab
          fields:
            - x i8: div4
            - y i8: div4
            - size u24: div256
            - hardness u8
            - opacity u8
            - angle u8
            - aspect_ratio u8

MoveRect:
    id: 160
    comment: |
             Move a rectangular area on a layer or a selection.

             A mask image can be given to mask out part of the region
             to support non-rectangular selections.

             Source and target rects may be (partially) outside the canvas.

             If source is 0, layer refers to a selection instead: the lower
             octet is the source and the upper octet is the target selection id.
    fields:
      - layer u16
      - source u16
      - sx i32
      - sy i32
      - tx i32
      - ty i32
      - w i32
      - h i32
      - mask bytes

SetMetadataInt:
    id: 161
    comment: |
             Set a document metadata field (integer type)

             These typically don't have an immediate visual effect,
             but these fields are part of the document, like the pixel content
             or the annotations.
    fields:
        - field enum:
          name: MetadataInt
          variants:
              - Dpix
              - Dpiy
              - Framerate
              - FrameCount
        - value i32

LayerTreeCreate:
    id: 162
    comment: |
             Create a new layer

             A session starts with zero layers, so a layer creation command is typically
             the second command to be sent, right after setting the canvas size.

             The layer ID must be prefixed with the context ID of the user creating it.
             This allows the client to choose the layer ID without worrying about
             clashes. In multiuser mode the ACL filter validates the prefix for all new layers.

             If the `source` field is nonzero, a copy of the source layer is made.
             Otherwise, either a blank new bitmap or a group layer is created.
             When copying a group, the group's layers are assigned new IDs sequentally,
             starting from the group ID, using the group IDs user prefix.

             If the `target` field is nonzero, the newly created layer will be
             insert above that layer or group, or into that group. If zero,
             the layer will be added to the top of the root group.

             The following flags can be used with layer creation:
             - GROUP: a group layer is created (ignored if `source` is set)
             - INTO: the new layer will be added to the top to the `target` group.
                     The target must be nonzero.

             If layer controls are locked, this command requires session operator privileges.
    fields:
        - id u16
        - source u16
        - target u16
        - fill argb32
        - flags flags: [group, into]
        - title utf8

LayerTreeMove:
    id: 163
    comment: |
             Reorder a layer

             Moves the given layer into the given parent group or into the root
             if given 0. It will be placed either below the given sibling or at
             the bottom if given 0. An invalid move, such as because the parent
             is missing or the sibling isn't part of the parent group, will not
             be executed at all, no fallback is attempted.

             The user is allowed to move a layer if they can edit both it and
             the parent. Moving into the parent group is allowed if the user has
             would be allowed to create a layer there (which is always, since
             that's currently conflated with being allowed to edit layers.)
    fields:
      - layer u16
      - parent u16
      - sibling u16

LayerTreeDelete:
    id: 164
    comment: |
             Delete a layer

             If the merge to attribute is nonzero, the contents of the layer is merged
             to the layer with the given ID. If the id and merge id both refer to
             the same layer group, that group is collapsed into a layer.

             If the current layer or layer controls in general are locked, this command
             requires session operator privileges.
    fields:
        - id u16
        - merge_to u16

TransformRegion:
    id: 165
    comment: |
             Transform an area, optionally moving it between two layers.

             This is used to implement selection moving. It is equivalent
             to doing two PutImages: the first to mask away the original
             selection and the other to paste the selection to a new location.

             This command packages that into a single action that is more
             bandwidth efficient and can be used even when PutImages in general
             are locked, since it's not introducing any new pixels onto the canvas.

             Internally, the paint engine performs the following steps:
             1. Copy selected pixels to a buffer
             2. Erase selected pixels from the source layer
             3. Composite transformed buffer onto the target layer

             The pixel selection is determined by the mask bitmap. The mask
             is DEFLATEd 8 bit alpha.

             For axis aligned rectangle selections, no bitmap is necessary.

             If source is 0, layer refers to a selection instead: the lower
             octet is the source and the upper octet is the target selection id.
    fields:
        - layer u16
        - source u16
        - bx i32
        - by i32
        - bw i32
        - bh i32
        - x1 i32
        - y1 i32
        - x2 i32
        - y2 i32
        - x3 i32
        - y3 i32
        - x4 i32
        - y4 i32
        - mode enum:
          name: TransformMode
          variants:
              - Nearest
              - Bilinear
        - mask bytes

TrackCreate:
    id: 166
    comment: |
             Create a timeline track.

             The track id must be prefixed by the user's context id, like layer
             and annotation ids. Operators are exempt from this restriction.
    fields:
        - id u16
        - insert_id u16
        - source_id u16
        - title utf8

TrackRetitle:
    id: 167
    comment: Rename a timeline track.
    fields:
        - id u16
        - title utf8

TrackDelete:
    id: 168
    comment: Delete a timeline track.
    fields:
        - id u16

TrackOrder:
    id: 169
    comment: |
             Reorder timeline tracks.

             Works like the LayerOrder command, just for tracks: duplicates are
             ignored and missing tracks are appended to the end.
    fields:
        - tracks vec_u16

KeyFrameSet:
    id: 170
    comment: |
             Create or modify a key frame.

             If there's no key frame at the given frame index, it will be
             created, otherwise it will be clobbered. The layer must exist and
             the frame index must be within the document's frame count.

             If the source is `Layer`, a new key frame will be created with
             `source_id` as the layer id, `source_index` will be ignored. If the
             source is `KeyFrame`, the key frame is copied from the key frame at
             track with id `source_id` and frame index `source_index`.
    fields:
        - track_id u16
        - frame_index u16
        - source_id u16
        - source_index u16
        - source enum:
          name: Source
          variants:
              - Layer
              - KeyFrame

KeyFrameRetitle:
    id: 171
    comment: Rename a key frame.
    fields:
        - track_id u16
        - frame_index u16
        - title utf8

KeyFrameLayerAttributes:
    id: 172
    comment: |
             Set (clobber) flags for layers inside of a key frame.

             This takes a list of (layer id, flags) pairs. If a layer appears
             multiple times, only the first occurrence will apply. If a layer
             doesn't exist or the flags value is 0, it will be ignored. Unknown
             flags will be retained for forward-compatibility.

             Used flags are:

             * `0x1` hidden: hides a layer in the key frame. Children can
               override being hidden by setting the revealed flag on them.

             * `0x2` revealed: overrides the hidden state given by a parent
               group, making it visible again. Putting both hidden and revealed
               on the same layer cancels each other out and will act like
               neither is set.
    fields:
        - track_id u16
        - frame_index u16
        - layers vec_u16

KeyFrameDelete:
    id: 173
    comment: Delete a key frame, possibly moving it somewhere else.
    fields:
        - track_id u16
        - frame_index u16
        - move_track_id u16
        - move_frame_index u16

SelectionPut:
    id: 174
    comment: |
        Modify selection, either by a rectangle or a pixel mask.

        The selection_id specifies which of the user's selections is affected.
        An id of 0 is invalid.

        The mask is DEFLATEd 8 bit alpha. If absent, this fills the entire
        rectangle instead.

        Currently, only selection id 1 is used and these messages are not sent
        over the network; LocalMatch commands are used instead.
    fields:
        - selection_id u8
        - op enum:
          name: Op
          variants:
              - Replace
              - Unite
              - Intersect
              - Exclude
              - Complement
        - x i32
        - y i32
        - w u16
        - h u16
        - mask bytes

SelectionClear:
    id: 175
    comment: |
        Remove the selection specified by the selection_id, or all selections if
        it's 0.

        Currently, only selection id 1 is used and these messages are not sent
        over the network; LocalMatch commands are used instead.
    fields:
        - selection_id u8

LocalMatch:
    id: 176
    comment: |
        A command that is sent over the network just to match it with another
        message in the local fork. It has no effect in itself. This is currently
        used for selections, which only have an effect on the local user and
        other users don't need to bother with processing them.

        The type describes the message type this is matched with and the
        contents of data depend on that type being matched. It usually contains
        the same stuff as the matched message, minus any variable-length
        buffers, where only the size is sent along, since that's good enough for
        getting a match in practice.

        Strictly speaking, this is not compatible with the 2.2 protocol and
        clients before version 2.2.2 don't understand it. However, since it
        doesn't have any effect for other users, it doesn't cause desync, so we
        accept it anyway. In sessions on the builtin server, a PutImage message
        with an invalid blend mode is used instead.
    fields:
        - type u8
        - data bytes

Undo:
    id: 255
    comment: Undo or redo actions
    fields:
        - override_user u8
        - redo bool
