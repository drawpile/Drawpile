/* automatically generated by rust-bindgen 0.68.1 */

pub const DP_LITTLE_ENDIAN: u32 = 1;
pub const DP_BIG_ENDIAN: u32 = 2;
pub const DP_BYTE_ORDER: u32 = 1;
pub const DP_BYTE_ORDER_LITTLE_ENDIAN: u32 = 1;
pub const DP_UINT24_MIN: u32 = 0;
pub const DP_UINT24_MAX: u32 = 16777215;
pub const DP_SIMD_ALIGNMENT: u32 = 32;
pub const DP_FLAT_IMAGE_INCLUDE_BACKGROUND: u32 = 1;
pub const DP_FLAT_IMAGE_INCLUDE_SUBLAYERS: u32 = 2;
pub const DP_FLAT_IMAGE_ONE_BIT_ALPHA: u32 = 4;
pub const DP_FLAT_IMAGE_RENDER_FLAGS: u32 = 3;
pub const DP_DOCUMENT_METADATA_DPIX_DEFAULT: u32 = 72;
pub const DP_DOCUMENT_METADATA_DPIY_DEFAULT: u32 = 72;
pub const DP_DOCUMENT_METADATA_FRAMERATE_DEFAULT: u32 = 24;
pub const DP_DOCUMENT_METADATA_FRAME_COUNT_DEFAULT: u32 = 24;
pub const DP_DRAW_CONTEXT_TRANSFORM_BUFFER_SIZE: u32 = 204;
pub const DP_DRAW_CONTEXT_RASTER_POOL_MIN_SIZE: u32 = 8192;
pub const DP_DRAW_CONTEXT_RASTER_POOL_MAX_SIZE: u32 = 1048576;
pub const DP_DRAW_CONTEXT_ID_COUNT: u32 = 65535;
pub const DP_BIT15: u32 = 32768;
pub const DP_TILE_SIZE: u32 = 64;
pub const DP_TILE_LENGTH: u32 = 4096;
pub const DP_IMAGE_TRANSFORM_MAX_AREA: u32 = 35000000;
pub const DP_KEY_FRAME_LAYER_HIDDEN: u32 = 1;
pub const DP_KEY_FRAME_LAYER_REVEALED: u32 = 2;
pub const DP_AFFECTED_INDIRECT_AREAS_COUNT: u32 = 256;
pub const DP_USER_CURSOR_COUNT: u32 = 256;
pub const DP_USER_CURSOR_SMOOTH_COUNT: u32 = 8;
pub const DP_USER_CURSOR_FLAG_NONE: u32 = 0;
pub const DP_USER_CURSOR_FLAG_VALID: u32 = 1;
pub const DP_USER_CURSOR_FLAG_INTERPOLATE: u32 = 2;
pub const DP_USER_CURSOR_FLAG_PEN_UP: u32 = 4;
pub const DP_USER_CURSOR_FLAG_PEN_DOWN: u32 = 8;
pub const DP_CANVAS_HISTORY_UNDO_DEPTH_MIN: u32 = 3;
pub const DP_CANVAS_HISTORY_UNDO_DEPTH_MAX: u32 = 255;
pub const DP_PREVIEW_BASE_SUBLAYER_ID: i32 = -100;
pub const DP_PREVIEW_TRANSFORM_COUNT: u32 = 16;
pub const DP_PAINT_ENGINE_FILTER_MESSAGE_FLAG_NO_TIME: u32 = 1;
pub const DP_LOAD_FLAG_NONE: u32 = 0;
pub const DP_LOAD_FLAG_SINGLE_THREAD: u32 = 1;
pub const DP_ACL_ALL_LOCKED_BIT: u32 = 128;
pub const DP_ACL_STATE_FILTERED_BIT: u32 = 1;
pub const DP_ACL_STATE_CHANGE_USERS_BIT: u32 = 2;
pub const DP_ACL_STATE_CHANGE_LAYERS_BIT: u32 = 4;
pub const DP_ACL_STATE_CHANGE_FEATURE_TIERS_BIT: u32 = 8;
pub const DP_ACL_STATE_CHANGE_FEATURE_LIMITS_BIT: u32 = 16;
pub const DP_ACL_STATE_CHANGE_MASK: u32 = 30;
pub const DP_ACL_STATE_RESET_IMAGE_INCLUDE_SESSION_OWNER: u32 = 1;
pub const DP_ACL_STATE_RESET_IMAGE_INCLUDE_TRUSTED_USERS: u32 = 2;
pub const DP_ACL_STATE_RESET_IMAGE_INCLUDE_USER_ACL: u32 = 4;
pub const DP_ACL_STATE_RESET_IMAGE_INCLUDE_LAYER_ACL_EXCLUSIVE: u32 = 8;
pub const DP_ACL_STATE_RESET_IMAGE_SESSION_RESET_FLAGS: u32 = 12;
pub const DP_ACL_STATE_RESET_IMAGE_RECORDING_FLAGS: u32 = 15;
pub const DP_ACL_STATE_RESET_IMAGE_TEMPLATE_FLAGS: u32 = 0;
pub const DP_BLEND_MODE_MAX: u32 = 255;
pub const DP_PROTOCOL_VERSION_NAMESPACE: &[u8; 3] = b"dp\0";
pub const DP_PROTOCOL_VERSION_SERVER: u32 = 4;
pub const DP_PROTOCOL_VERSION_MAJOR: u32 = 25;
pub const DP_PROTOCOL_VERSION_MINOR: u32 = 0;
pub const DP_PROTOCOL_VERSION: &[u8; 10] = b"dp:4.25.0\0";
pub const DP_UNDO_DEPTH_DEFAULT: u32 = 30;
pub const DP_MSG_SERVER_COMMAND_STATIC_LENGTH: u32 = 0;
pub const DP_MSG_SERVER_COMMAND_MSG_MIN_LEN: u32 = 0;
pub const DP_MSG_SERVER_COMMAND_MSG_MAX_LEN: u32 = 65535;
pub const DP_MSG_DISCONNECT_STATIC_LENGTH: u32 = 1;
pub const DP_MSG_DISCONNECT_REASON_ERROR: u32 = 0;
pub const DP_MSG_DISCONNECT_REASON_KICK: u32 = 1;
pub const DP_MSG_DISCONNECT_REASON_SHUTDOWN: u32 = 2;
pub const DP_MSG_DISCONNECT_REASON_OTHER: u32 = 3;
pub const DP_MSG_DISCONNECT_NUM_REASON: u32 = 4;
pub const DP_MSG_DISCONNECT_MESSAGE_MIN_LEN: u32 = 0;
pub const DP_MSG_DISCONNECT_MESSAGE_MAX_LEN: u32 = 65534;
pub const DP_MSG_PING_STATIC_LENGTH: u32 = 1;
pub const DP_MSG_KEEP_ALIVE_STATIC_LENGTH: u32 = 0;
pub const DP_MSG_JOIN_STATIC_LENGTH: u32 = 2;
pub const DP_MSG_JOIN_FLAGS_AUTH: u32 = 1;
pub const DP_MSG_JOIN_FLAGS_MOD: u32 = 2;
pub const DP_MSG_JOIN_FLAGS_BOT: u32 = 4;
pub const DP_MSG_JOIN_NUM_FLAGS: u32 = 3;
pub const DP_MSG_JOIN_NAME_MIN_LEN: u32 = 1;
pub const DP_MSG_JOIN_NAME_MAX_LEN: u32 = 256;
pub const DP_MSG_JOIN_AVATAR_MIN_SIZE: u32 = 0;
pub const DP_MSG_JOIN_AVATAR_MAX_SIZE: u32 = 65533;
pub const DP_MSG_LEAVE_STATIC_LENGTH: u32 = 0;
pub const DP_MSG_SESSION_OWNER_STATIC_LENGTH: u32 = 0;
pub const DP_MSG_SESSION_OWNER_USERS_MIN_COUNT: u32 = 0;
pub const DP_MSG_SESSION_OWNER_USERS_MAX_COUNT: u32 = 255;
pub const DP_MSG_CHAT_STATIC_LENGTH: u32 = 2;
pub const DP_MSG_CHAT_TFLAGS_BYPASS: u32 = 1;
pub const DP_MSG_CHAT_NUM_TFLAGS: u32 = 1;
pub const DP_MSG_CHAT_ALL_TFLAGS: u32 = 1;
pub const DP_MSG_CHAT_OFLAGS_SHOUT: u32 = 1;
pub const DP_MSG_CHAT_OFLAGS_ACTION: u32 = 2;
pub const DP_MSG_CHAT_OFLAGS_PIN: u32 = 4;
pub const DP_MSG_CHAT_OFLAGS_ALERT: u32 = 8;
pub const DP_MSG_CHAT_NUM_OFLAGS: u32 = 4;
pub const DP_MSG_CHAT_MESSAGE_MIN_LEN: u32 = 0;
pub const DP_MSG_CHAT_MESSAGE_MAX_LEN: u32 = 65533;
pub const DP_MSG_TRUSTED_USERS_STATIC_LENGTH: u32 = 0;
pub const DP_MSG_TRUSTED_USERS_USERS_MIN_COUNT: u32 = 0;
pub const DP_MSG_TRUSTED_USERS_USERS_MAX_COUNT: u32 = 255;
pub const DP_MSG_SOFT_RESET_STATIC_LENGTH: u32 = 0;
pub const DP_MSG_PRIVATE_CHAT_STATIC_LENGTH: u32 = 2;
pub const DP_MSG_PRIVATE_CHAT_MESSAGE_MIN_LEN: u32 = 0;
pub const DP_MSG_PRIVATE_CHAT_MESSAGE_MAX_LEN: u32 = 65533;
pub const DP_MSG_RESET_STREAM_STATIC_LENGTH: u32 = 0;
pub const DP_MSG_RESET_STREAM_DATA_MIN_SIZE: u32 = 0;
pub const DP_MSG_RESET_STREAM_DATA_MAX_SIZE: u32 = 65535;
pub const DP_MSG_INTERVAL_STATIC_LENGTH: u32 = 2;
pub const DP_MSG_LASER_TRAIL_STATIC_LENGTH: u32 = 5;
pub const DP_MSG_MOVE_POINTER_STATIC_LENGTH: u32 = 8;
pub const DP_MSG_USER_ACL_STATIC_LENGTH: u32 = 0;
pub const DP_MSG_USER_ACL_USERS_MIN_COUNT: u32 = 0;
pub const DP_MSG_USER_ACL_USERS_MAX_COUNT: u32 = 255;
pub const DP_MSG_LAYER_ACL_STATIC_LENGTH: u32 = 4;
pub const DP_MSG_LAYER_ACL_EXCLUSIVE_MIN_COUNT: u32 = 0;
pub const DP_MSG_LAYER_ACL_EXCLUSIVE_MAX_COUNT: u32 = 255;
pub const DP_MSG_FEATURE_ACCESS_LEVELS_STATIC_LENGTH: u32 = 0;
pub const DP_MSG_FEATURE_ACCESS_LEVELS_FEATURE_TIERS_MIN_COUNT: u32 = 1;
pub const DP_MSG_FEATURE_ACCESS_LEVELS_FEATURE_TIERS_MAX_COUNT: u32 = 255;
pub const DP_MSG_DEFAULT_LAYER_STATIC_LENGTH: u32 = 3;
pub const DP_MSG_UNDO_DEPTH_STATIC_LENGTH: u32 = 1;
pub const DP_MSG_DATA_STATIC_LENGTH: u32 = 2;
pub const DP_MSG_DATA_TYPE_USER_INFO: u32 = 0;
pub const DP_MSG_DATA_NUM_TYPE: u32 = 1;
pub const DP_MSG_DATA_ALL_TYPE: u32 = 0;
pub const DP_MSG_DATA_BODY_MIN_SIZE: u32 = 0;
pub const DP_MSG_DATA_BODY_MAX_SIZE: u32 = 65533;
pub const DP_MSG_LOCAL_CHANGE_STATIC_LENGTH: u32 = 1;
pub const DP_MSG_LOCAL_CHANGE_TYPE_LAYER_VISIBILITY: u32 = 0;
pub const DP_MSG_LOCAL_CHANGE_TYPE_BACKGROUND_TILE: u32 = 1;
pub const DP_MSG_LOCAL_CHANGE_TYPE_VIEW_MODE: u32 = 2;
pub const DP_MSG_LOCAL_CHANGE_TYPE_ACTIVE_LAYER: u32 = 3;
pub const DP_MSG_LOCAL_CHANGE_TYPE_ACTIVE_FRAME: u32 = 4;
pub const DP_MSG_LOCAL_CHANGE_TYPE_ONION_SKINS: u32 = 5;
pub const DP_MSG_LOCAL_CHANGE_TYPE_TRACK_VISIBILITY: u32 = 6;
pub const DP_MSG_LOCAL_CHANGE_TYPE_TRACK_ONION_SKIN: u32 = 7;
pub const DP_MSG_LOCAL_CHANGE_TYPE_LAYER_SKETCH: u32 = 8;
pub const DP_MSG_LOCAL_CHANGE_NUM_TYPE: u32 = 9;
pub const DP_MSG_LOCAL_CHANGE_BODY_MIN_SIZE: u32 = 0;
pub const DP_MSG_LOCAL_CHANGE_BODY_MAX_SIZE: u32 = 65534;
pub const DP_MSG_FEATURE_LIMITS_STATIC_LENGTH: u32 = 0;
pub const DP_MSG_FEATURE_LIMITS_LIMITS_MIN_COUNT: u32 = 4;
pub const DP_MSG_FEATURE_LIMITS_LIMITS_MAX_COUNT: u32 = 255;
pub const DP_MSG_UNDO_POINT_STATIC_LENGTH: u32 = 0;
pub const DP_MSG_CANVAS_RESIZE_STATIC_LENGTH: u32 = 16;
pub const DP_MSG_LAYER_ATTRIBUTES_STATIC_LENGTH: u32 = 7;
pub const DP_MSG_LAYER_ATTRIBUTES_FLAGS_CENSOR: u32 = 1;
pub const DP_MSG_LAYER_ATTRIBUTES_FLAGS_FIXED: u32 = 2;
pub const DP_MSG_LAYER_ATTRIBUTES_FLAGS_ISOLATED: u32 = 4;
pub const DP_MSG_LAYER_ATTRIBUTES_FLAGS_CLIP: u32 = 8;
pub const DP_MSG_LAYER_ATTRIBUTES_NUM_FLAGS: u32 = 4;
pub const DP_MSG_LAYER_RETITLE_STATIC_LENGTH: u32 = 3;
pub const DP_MSG_LAYER_RETITLE_TITLE_MIN_LEN: u32 = 0;
pub const DP_MSG_LAYER_RETITLE_TITLE_MAX_LEN: u32 = 65532;
pub const DP_MSG_PUT_IMAGE_STATIC_LENGTH: u32 = 20;
pub const DP_MSG_PUT_IMAGE_IMAGE_MIN_SIZE: u32 = 0;
pub const DP_MSG_PUT_IMAGE_IMAGE_MAX_SIZE: u32 = 65515;
pub const DP_MSG_FILL_RECT_STATIC_LENGTH: u32 = 24;
pub const DP_MSG_PEN_UP_STATIC_LENGTH: u32 = 3;
pub const DP_MSG_ANNOTATION_CREATE_STATIC_LENGTH: u32 = 14;
pub const DP_MSG_ANNOTATION_RESHAPE_STATIC_LENGTH: u32 = 14;
pub const DP_MSG_ANNOTATION_EDIT_STATIC_LENGTH: u32 = 8;
pub const DP_MSG_ANNOTATION_EDIT_FLAGS_PROTECT: u32 = 1;
pub const DP_MSG_ANNOTATION_EDIT_FLAGS_VALIGN_CENTER: u32 = 2;
pub const DP_MSG_ANNOTATION_EDIT_FLAGS_VALIGN_BOTTOM: u32 = 4;
pub const DP_MSG_ANNOTATION_EDIT_FLAGS_ALIAS: u32 = 8;
pub const DP_MSG_ANNOTATION_EDIT_FLAGS_RASTERIZE: u32 = 16;
pub const DP_MSG_ANNOTATION_EDIT_NUM_FLAGS: u32 = 5;
pub const DP_MSG_ANNOTATION_EDIT_TEXT_MIN_LEN: u32 = 0;
pub const DP_MSG_ANNOTATION_EDIT_TEXT_MAX_LEN: u32 = 65527;
pub const DP_MSG_ANNOTATION_DELETE_STATIC_LENGTH: u32 = 2;
pub const DP_MSG_PUT_TILE_STATIC_LENGTH: u32 = 11;
pub const DP_MSG_PUT_TILE_IMAGE_MIN_SIZE: u32 = 0;
pub const DP_MSG_PUT_TILE_IMAGE_MAX_SIZE: u32 = 65524;
pub const DP_MSG_CANVAS_BACKGROUND_STATIC_LENGTH: u32 = 0;
pub const DP_MSG_CANVAS_BACKGROUND_IMAGE_MIN_SIZE: u32 = 0;
pub const DP_MSG_CANVAS_BACKGROUND_IMAGE_MAX_SIZE: u32 = 65535;
pub const DP_MSG_DRAW_DABS_CLASSIC_STATIC_LENGTH: u32 = 17;
pub const DP_MSG_DRAW_DABS_CLASSIC_DABS_MIN_COUNT: u32 = 1;
pub const DP_MSG_DRAW_DABS_CLASSIC_DABS_MAX_COUNT: u32 = 9359;
pub const DP_MSG_DRAW_DABS_CLASSIC_DABS_MAX: u32 = 9359;
pub const DP_MSG_DRAW_DABS_PIXEL_STATIC_LENGTH: u32 = 17;
pub const DP_MSG_DRAW_DABS_PIXEL_DABS_MIN_COUNT: u32 = 1;
pub const DP_MSG_DRAW_DABS_PIXEL_DABS_MAX_COUNT: u32 = 13103;
pub const DP_MSG_DRAW_DABS_PIXEL_DABS_MAX: u32 = 13103;
pub const DP_MSG_DRAW_DABS_PIXEL_SQUARE_STATIC_LENGTH: u32 = 0;
pub const DP_MSG_DRAW_DABS_MYPAINT_STATIC_LENGTH: u32 = 19;
pub const DP_MSG_DRAW_DABS_MYPAINT_DABS_MIN_COUNT: u32 = 1;
pub const DP_MSG_DRAW_DABS_MYPAINT_DABS_MAX_COUNT: u32 = 7279;
pub const DP_MSG_DRAW_DABS_MYPAINT_DABS_MAX: u32 = 7279;
pub const DP_MSG_DRAW_DABS_MYPAINT_BLEND_STATIC_LENGTH: u32 = 17;
pub const DP_MSG_DRAW_DABS_MYPAINT_BLEND_DABS_MIN_COUNT: u32 = 1;
pub const DP_MSG_DRAW_DABS_MYPAINT_BLEND_DABS_MAX_COUNT: u32 = 7279;
pub const DP_MSG_DRAW_DABS_MYPAINT_BLEND_DABS_MAX: u32 = 7279;
pub const DP_MSG_MOVE_RECT_STATIC_LENGTH: u32 = 30;
pub const DP_MSG_MOVE_RECT_MASK_MIN_SIZE: u32 = 0;
pub const DP_MSG_MOVE_RECT_MASK_MAX_SIZE: u32 = 65505;
pub const DP_MSG_SET_METADATA_INT_STATIC_LENGTH: u32 = 5;
pub const DP_MSG_SET_METADATA_INT_FIELD_DPIX: u32 = 0;
pub const DP_MSG_SET_METADATA_INT_FIELD_DPIY: u32 = 1;
pub const DP_MSG_SET_METADATA_INT_FIELD_FRAMERATE: u32 = 2;
pub const DP_MSG_SET_METADATA_INT_FIELD_FRAME_COUNT: u32 = 3;
pub const DP_MSG_SET_METADATA_INT_NUM_FIELD: u32 = 4;
pub const DP_MSG_LAYER_TREE_CREATE_STATIC_LENGTH: u32 = 14;
pub const DP_MSG_LAYER_TREE_CREATE_FLAGS_GROUP: u32 = 1;
pub const DP_MSG_LAYER_TREE_CREATE_FLAGS_INTO: u32 = 2;
pub const DP_MSG_LAYER_TREE_CREATE_NUM_FLAGS: u32 = 2;
pub const DP_MSG_LAYER_TREE_CREATE_TITLE_MIN_LEN: u32 = 0;
pub const DP_MSG_LAYER_TREE_CREATE_TITLE_MAX_LEN: u32 = 65521;
pub const DP_MSG_LAYER_TREE_MOVE_STATIC_LENGTH: u32 = 9;
pub const DP_MSG_LAYER_TREE_DELETE_STATIC_LENGTH: u32 = 6;
pub const DP_MSG_TRANSFORM_REGION_STATIC_LENGTH: u32 = 55;
pub const DP_MSG_TRANSFORM_REGION_MODE_NEAREST: u32 = 0;
pub const DP_MSG_TRANSFORM_REGION_MODE_BILINEAR: u32 = 1;
pub const DP_MSG_TRANSFORM_REGION_NUM_MODE: u32 = 2;
pub const DP_MSG_TRANSFORM_REGION_MASK_MIN_SIZE: u32 = 0;
pub const DP_MSG_TRANSFORM_REGION_MASK_MAX_SIZE: u32 = 65480;
pub const DP_MSG_TRACK_CREATE_STATIC_LENGTH: u32 = 6;
pub const DP_MSG_TRACK_CREATE_TITLE_MIN_LEN: u32 = 0;
pub const DP_MSG_TRACK_CREATE_TITLE_MAX_LEN: u32 = 65529;
pub const DP_MSG_TRACK_RETITLE_STATIC_LENGTH: u32 = 2;
pub const DP_MSG_TRACK_RETITLE_TITLE_MIN_LEN: u32 = 0;
pub const DP_MSG_TRACK_RETITLE_TITLE_MAX_LEN: u32 = 65533;
pub const DP_MSG_TRACK_DELETE_STATIC_LENGTH: u32 = 2;
pub const DP_MSG_TRACK_ORDER_STATIC_LENGTH: u32 = 0;
pub const DP_MSG_TRACK_ORDER_TRACKS_MIN_COUNT: u32 = 0;
pub const DP_MSG_TRACK_ORDER_TRACKS_MAX_COUNT: u32 = 32767;
pub const DP_MSG_KEY_FRAME_SET_STATIC_LENGTH: u32 = 10;
pub const DP_MSG_KEY_FRAME_SET_SOURCE_LAYER: u32 = 0;
pub const DP_MSG_KEY_FRAME_SET_SOURCE_KEY_FRAME: u32 = 1;
pub const DP_MSG_KEY_FRAME_SET_NUM_SOURCE: u32 = 2;
pub const DP_MSG_KEY_FRAME_RETITLE_STATIC_LENGTH: u32 = 4;
pub const DP_MSG_KEY_FRAME_RETITLE_TITLE_MIN_LEN: u32 = 0;
pub const DP_MSG_KEY_FRAME_RETITLE_TITLE_MAX_LEN: u32 = 65531;
pub const DP_MSG_KEY_FRAME_LAYER_ATTRIBUTES_STATIC_LENGTH: u32 = 4;
pub const DP_MSG_KEY_FRAME_LAYER_ATTRIBUTES_LAYER_FLAGS_MIN_COUNT: u32 = 0;
pub const DP_MSG_KEY_FRAME_LAYER_ATTRIBUTES_LAYER_FLAGS_MAX_COUNT: u32 = 16382;
pub const DP_MSG_KEY_FRAME_DELETE_STATIC_LENGTH: u32 = 8;
pub const DP_MSG_SELECTION_PUT_STATIC_LENGTH: u32 = 14;
pub const DP_MSG_SELECTION_PUT_OP_REPLACE: u32 = 0;
pub const DP_MSG_SELECTION_PUT_OP_UNITE: u32 = 1;
pub const DP_MSG_SELECTION_PUT_OP_INTERSECT: u32 = 2;
pub const DP_MSG_SELECTION_PUT_OP_EXCLUDE: u32 = 3;
pub const DP_MSG_SELECTION_PUT_OP_COMPLEMENT: u32 = 4;
pub const DP_MSG_SELECTION_PUT_NUM_OP: u32 = 5;
pub const DP_MSG_SELECTION_PUT_MASK_MIN_SIZE: u32 = 0;
pub const DP_MSG_SELECTION_PUT_MASK_MAX_SIZE: u32 = 65521;
pub const DP_MSG_SELECTION_CLEAR_STATIC_LENGTH: u32 = 1;
pub const DP_MSG_LOCAL_MATCH_STATIC_LENGTH: u32 = 1;
pub const DP_MSG_LOCAL_MATCH_DATA_MIN_SIZE: u32 = 0;
pub const DP_MSG_LOCAL_MATCH_DATA_MAX_SIZE: u32 = 65534;
pub const DP_MSG_UNDO_STATIC_LENGTH: u32 = 2;
pub const DP_MESSAGE_MAX: u32 = 255;
pub const DP_MESSAGE_HEADER_LENGTH: u32 = 4;
pub const DP_MESSAGE_WS_HEADER_LENGTH: u32 = 2;
pub const DP_MESSAGE_MAX_PAYLOAD_LENGTH: u32 = 65535;
pub const DP_MESSAGE_TYPE_RANGE_START_CLIENT: u32 = 64;
pub const DP_MESSAGE_TYPE_RANGE_START_COMMAND: u32 = 128;
pub const DP_MESSAGE_LAYER_ID_MAX: u32 = 8388607;
extern "C" {
    pub fn DP_byte_order() -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type DP_max_align_t = max_align_t;
pub const DP_LOG_DEBUG: DP_LogLevel = 0;
pub const DP_LOG_INFO: DP_LogLevel = 1;
pub const DP_LOG_WARN: DP_LogLevel = 2;
pub const DP_LOG_PANIC: DP_LogLevel = 3;
pub type DP_LogLevel = ::std::os::raw::c_uint;
extern "C" {
    pub fn DP_debug_at(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn DP_info_at(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn DP_warn_at(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn DP_panic_at(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn DP_malloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn DP_malloc_zeroed(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn DP_realloc(ptr: *mut ::std::os::raw::c_void, size: usize)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn DP_free(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn DP_malloc_simd(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn DP_malloc_simd_zeroed(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn DP_format(fmt: *const ::std::os::raw::c_char, ...) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_strdup(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_str_equal(a: *const ::std::os::raw::c_char, b: *const ::std::os::raw::c_char)
        -> bool;
}
extern "C" {
    pub fn DP_str_equal_lowercase(
        a: *const ::std::os::raw::c_char,
        b: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn DP_error() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_error_since(count: ::std::os::raw::c_uint) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_error_set(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn DP_error_count() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn DP_error_count_set(count: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn DP_error_count_since(count: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QIODevice {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_Input {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_InputMethods {
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            internal: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
            size: usize,
            out_errror: *mut bool,
        ) -> usize,
    >,
    pub length: ::std::option::Option<
        unsafe extern "C" fn(internal: *mut ::std::os::raw::c_void, out_error: *mut bool) -> usize,
    >,
    pub rewind:
        ::std::option::Option<unsafe extern "C" fn(internal: *mut ::std::os::raw::c_void) -> bool>,
    pub rewind_by: ::std::option::Option<
        unsafe extern "C" fn(internal: *mut ::std::os::raw::c_void, size: usize) -> bool,
    >,
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(internal: *mut ::std::os::raw::c_void, offset: usize) -> bool,
    >,
    pub seek_by: ::std::option::Option<
        unsafe extern "C" fn(internal: *mut ::std::os::raw::c_void, size: usize) -> bool,
    >,
    pub qiodevice: ::std::option::Option<
        unsafe extern "C" fn(internal: *mut ::std::os::raw::c_void) -> *mut QIODevice,
    >,
    pub dispose: ::std::option::Option<unsafe extern "C" fn(internal: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_DP_InputMethods() {
    const UNINIT: ::std::mem::MaybeUninit<DP_InputMethods> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_InputMethods>(),
        64usize,
        concat!("Size of: ", stringify!(DP_InputMethods))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_InputMethods>(),
        8usize,
        concat!("Alignment of ", stringify!(DP_InputMethods))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_InputMethods),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_InputMethods),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rewind) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_InputMethods),
            "::",
            stringify!(rewind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rewind_by) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_InputMethods),
            "::",
            stringify!(rewind_by)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seek) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_InputMethods),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seek_by) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_InputMethods),
            "::",
            stringify!(seek_by)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qiodevice) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_InputMethods),
            "::",
            stringify!(qiodevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dispose) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_InputMethods),
            "::",
            stringify!(dispose)
        )
    );
}
pub type DP_InputInitFn = ::std::option::Option<
    unsafe extern "C" fn(
        internal: *mut ::std::os::raw::c_void,
        arg: *mut ::std::os::raw::c_void,
    ) -> *const DP_InputMethods,
>;
extern "C" {
    pub fn DP_input_new(
        init: DP_InputInitFn,
        arg: *mut ::std::os::raw::c_void,
        internal_size: usize,
    ) -> *mut DP_Input;
}
extern "C" {
    pub fn DP_input_free(input: *mut DP_Input);
}
extern "C" {
    pub fn DP_input_read(
        input: *mut DP_Input,
        buffer: *mut ::std::os::raw::c_void,
        size: usize,
        out_error: *mut bool,
    ) -> usize;
}
extern "C" {
    pub fn DP_input_length(input: *mut DP_Input, out_error: *mut bool) -> usize;
}
extern "C" {
    pub fn DP_input_rewind(input: *mut DP_Input) -> bool;
}
extern "C" {
    pub fn DP_input_rewind_by(input: *mut DP_Input, size: usize) -> bool;
}
extern "C" {
    pub fn DP_input_seek(input: *mut DP_Input, offset: usize) -> bool;
}
extern "C" {
    pub fn DP_input_seek_by(input: *mut DP_Input, size: usize) -> bool;
}
extern "C" {
    pub fn DP_input_qiodevice(input: *mut DP_Input) -> *mut QIODevice;
}
extern "C" {
    pub fn DP_file_input_new_from_stdin(close: bool) -> *mut DP_Input;
}
extern "C" {
    pub fn DP_file_input_new_from_path(path: *const ::std::os::raw::c_char) -> *mut DP_Input;
}
pub type DP_MemInputFreeFn = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: *mut ::std::os::raw::c_void,
        size: usize,
        free_arg: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn DP_mem_input_new(
        buffer: *mut ::std::os::raw::c_void,
        size: usize,
        free: DP_MemInputFreeFn,
        free_arg: *mut ::std::os::raw::c_void,
    ) -> *mut DP_Input;
}
extern "C" {
    pub fn DP_mem_input_new_free_on_close(
        buffer: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut DP_Input;
}
extern "C" {
    pub fn DP_mem_input_new_keep_on_close(
        buffer: *const ::std::os::raw::c_void,
        size: usize,
    ) -> *mut DP_Input;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_BufferedInput {
    pub inner: *mut DP_Input,
    pub buffer: *mut ::std::os::raw::c_uchar,
    pub capacity: usize,
}
#[test]
fn bindgen_test_layout_DP_BufferedInput() {
    const UNINIT: ::std::mem::MaybeUninit<DP_BufferedInput> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_BufferedInput>(),
        24usize,
        concat!("Size of: ", stringify!(DP_BufferedInput))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_BufferedInput>(),
        8usize,
        concat!("Alignment of ", stringify!(DP_BufferedInput))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inner) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_BufferedInput),
            "::",
            stringify!(inner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_BufferedInput),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_BufferedInput),
            "::",
            stringify!(capacity)
        )
    );
}
extern "C" {
    pub fn DP_buffered_input_init(input: *mut DP_Input) -> DP_BufferedInput;
}
extern "C" {
    pub fn DP_buffered_input_dispose(bi: *mut DP_BufferedInput);
}
extern "C" {
    pub fn DP_buffered_input_read(
        bi: *mut DP_BufferedInput,
        size: usize,
        out_error: *mut bool,
    ) -> usize;
}
extern "C" {
    pub fn DP_buffered_input_seek(bi: *mut DP_BufferedInput, offset: usize) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_Output {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_OutputMethods {
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            internal: *mut ::std::os::raw::c_void,
            buffer: *const ::std::os::raw::c_void,
            size: usize,
        ) -> usize,
    >,
    pub clear:
        ::std::option::Option<unsafe extern "C" fn(internal: *mut ::std::os::raw::c_void) -> bool>,
    pub flush:
        ::std::option::Option<unsafe extern "C" fn(internal: *mut ::std::os::raw::c_void) -> bool>,
    pub tell: ::std::option::Option<
        unsafe extern "C" fn(internal: *mut ::std::os::raw::c_void, out_error: *mut bool) -> usize,
    >,
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(internal: *mut ::std::os::raw::c_void, offset: usize) -> bool,
    >,
    pub qiodevice: ::std::option::Option<
        unsafe extern "C" fn(internal: *mut ::std::os::raw::c_void) -> *mut QIODevice,
    >,
    pub dispose: ::std::option::Option<
        unsafe extern "C" fn(internal: *mut ::std::os::raw::c_void, discard: bool) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_DP_OutputMethods() {
    const UNINIT: ::std::mem::MaybeUninit<DP_OutputMethods> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_OutputMethods>(),
        56usize,
        concat!("Size of: ", stringify!(DP_OutputMethods))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_OutputMethods>(),
        8usize,
        concat!("Alignment of ", stringify!(DP_OutputMethods))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_OutputMethods),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clear) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_OutputMethods),
            "::",
            stringify!(clear)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flush) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_OutputMethods),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tell) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_OutputMethods),
            "::",
            stringify!(tell)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seek) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_OutputMethods),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qiodevice) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_OutputMethods),
            "::",
            stringify!(qiodevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dispose) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_OutputMethods),
            "::",
            stringify!(dispose)
        )
    );
}
pub type DP_OutputInitFn = ::std::option::Option<
    unsafe extern "C" fn(
        internal: *mut ::std::os::raw::c_void,
        arg: *mut ::std::os::raw::c_void,
    ) -> *const DP_OutputMethods,
>;
extern "C" {
    pub fn DP_output_new(
        init: DP_OutputInitFn,
        arg: *mut ::std::os::raw::c_void,
        internal_size: usize,
    ) -> *mut DP_Output;
}
extern "C" {
    pub fn DP_output_free(output: *mut DP_Output) -> bool;
}
extern "C" {
    pub fn DP_output_free_discard(output: *mut DP_Output) -> bool;
}
extern "C" {
    pub fn DP_output_write(
        output: *mut DP_Output,
        buffer: *const ::std::os::raw::c_void,
        size: usize,
    ) -> bool;
}
extern "C" {
    pub fn DP_output_print(output: *mut DP_Output, string: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn DP_output_format(
        output: *mut DP_Output,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    pub fn DP_output_clear(output: *mut DP_Output) -> bool;
}
extern "C" {
    pub fn DP_output_flush(output: *mut DP_Output) -> bool;
}
extern "C" {
    pub fn DP_output_tell(output: *mut DP_Output, out_error: *mut bool) -> usize;
}
extern "C" {
    pub fn DP_output_seek(output: *mut DP_Output, offset: usize) -> bool;
}
extern "C" {
    pub fn DP_output_qiodevice(output: *mut DP_Output) -> *mut QIODevice;
}
extern "C" {
    pub fn DP_file_output_new_from_stdout(close: bool) -> *mut DP_Output;
}
extern "C" {
    pub fn DP_file_output_new_from_path(path: *const ::std::os::raw::c_char) -> *mut DP_Output;
}
extern "C" {
    pub fn DP_file_output_save_new_from_path(path: *const ::std::os::raw::c_char)
        -> *mut DP_Output;
}
extern "C" {
    pub fn DP_gzip_output_new(gf: *mut ::std::os::raw::c_void, close: bool) -> *mut DP_Output;
}
extern "C" {
    pub fn DP_gzip_output_new_from_path(path: *const ::std::os::raw::c_char) -> *mut DP_Output;
}
extern "C" {
    pub fn DP_mem_output_new(
        initial_capacity: usize,
        free_on_close: bool,
        out_buffer: *mut *mut *mut ::std::os::raw::c_void,
        out_size: *mut *mut usize,
    ) -> *mut DP_Output;
}
pub const DP_OUTPUT_BINARY_TYPE_END: DP_OutputBinaryType = 0;
pub const DP_OUTPUT_BINARY_TYPE_INT8: DP_OutputBinaryType = -1;
pub const DP_OUTPUT_BINARY_TYPE_INT16: DP_OutputBinaryType = -2;
pub const DP_OUTPUT_BINARY_TYPE_INT32: DP_OutputBinaryType = -3;
pub const DP_OUTPUT_BINARY_TYPE_INT64: DP_OutputBinaryType = -4;
pub const DP_OUTPUT_BINARY_TYPE_UINT8: DP_OutputBinaryType = -5;
pub const DP_OUTPUT_BINARY_TYPE_UINT16: DP_OutputBinaryType = -6;
pub const DP_OUTPUT_BINARY_TYPE_UINT32: DP_OutputBinaryType = -7;
pub const DP_OUTPUT_BINARY_TYPE_UINT64: DP_OutputBinaryType = -8;
pub type DP_OutputBinaryType = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DP_OutputBinaryEntry {
    pub type_: ::std::os::raw::c_int,
    pub __bindgen_anon_1: DP_OutputBinaryEntry__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union DP_OutputBinaryEntry__bindgen_ty_1 {
    pub int8: i8,
    pub int16: i16,
    pub int32: i32,
    pub int64: i64,
    pub uint8: u8,
    pub uint16: u16,
    pub uint32: u32,
    pub uint64: u64,
    pub bytes: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_DP_OutputBinaryEntry__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<DP_OutputBinaryEntry__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_OutputBinaryEntry__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(DP_OutputBinaryEntry__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_OutputBinaryEntry__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(DP_OutputBinaryEntry__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_OutputBinaryEntry__bindgen_ty_1),
            "::",
            stringify!(int8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_OutputBinaryEntry__bindgen_ty_1),
            "::",
            stringify!(int16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_OutputBinaryEntry__bindgen_ty_1),
            "::",
            stringify!(int32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_OutputBinaryEntry__bindgen_ty_1),
            "::",
            stringify!(int64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_OutputBinaryEntry__bindgen_ty_1),
            "::",
            stringify!(uint8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_OutputBinaryEntry__bindgen_ty_1),
            "::",
            stringify!(uint16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_OutputBinaryEntry__bindgen_ty_1),
            "::",
            stringify!(uint32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_OutputBinaryEntry__bindgen_ty_1),
            "::",
            stringify!(uint64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_OutputBinaryEntry__bindgen_ty_1),
            "::",
            stringify!(bytes)
        )
    );
}
#[test]
fn bindgen_test_layout_DP_OutputBinaryEntry() {
    const UNINIT: ::std::mem::MaybeUninit<DP_OutputBinaryEntry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_OutputBinaryEntry>(),
        16usize,
        concat!("Size of: ", stringify!(DP_OutputBinaryEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_OutputBinaryEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(DP_OutputBinaryEntry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_OutputBinaryEntry),
            "::",
            stringify!(type_)
        )
    );
}
extern "C" {
    pub fn DP_output_write_binary_bigendian(
        output: *mut DP_Output,
        entries: *mut DP_OutputBinaryEntry,
    ) -> bool;
}
extern "C" {
    pub fn DP_output_write_binary_littleendian(
        output: *mut DP_Output,
        entries: *mut DP_OutputBinaryEntry,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_AnnotationList {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_CanvasDiff {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_DocumentMetadata {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_DrawContext {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_Image {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_LayerList {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_LayerPropsList {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_LayerRoutes {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_Message {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_Selection {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_SelectionSet {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_Tile {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_Timeline {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_CanvasState {
    _unused: [u8; 0],
}
pub type DP_TransientAnnotationList = DP_AnnotationList;
pub type DP_TransientCanvasState = DP_CanvasState;
pub type DP_TransientDocumentMetadata = DP_DocumentMetadata;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_LayerContent {
    _unused: [u8; 0],
}
pub type DP_TransientLayerContent = DP_LayerContent;
pub type DP_TransientLayerList = DP_LayerList;
pub type DP_TransientLayerPropsList = DP_LayerPropsList;
pub type DP_TransientLayerRoutes = DP_LayerRoutes;
pub type DP_TransientSelectionSet = DP_SelectionSet;
pub type DP_TransientTile = DP_Tile;
pub type DP_TransientTimeline = DP_Timeline;
extern "C" {
    pub fn DP_canvas_state_new() -> *mut DP_CanvasState;
}
extern "C" {
    pub fn DP_canvas_state_new_with_selections_noinc(
        cs: *mut DP_CanvasState,
        ss: *mut DP_SelectionSet,
    ) -> *mut DP_CanvasState;
}
extern "C" {
    pub fn DP_canvas_state_incref(cs: *mut DP_CanvasState) -> *mut DP_CanvasState;
}
extern "C" {
    pub fn DP_canvas_state_incref_nullable(cs_or_null: *mut DP_CanvasState) -> *mut DP_CanvasState;
}
extern "C" {
    pub fn DP_canvas_state_decref(cs: *mut DP_CanvasState);
}
extern "C" {
    pub fn DP_canvas_state_decref_nullable(cs_or_null: *mut DP_CanvasState);
}
extern "C" {
    pub fn DP_canvas_state_refcount(cs: *mut DP_CanvasState) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_canvas_state_transient(cs: *mut DP_CanvasState) -> bool;
}
extern "C" {
    pub fn DP_canvas_state_width(cs: *mut DP_CanvasState) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_canvas_state_height(cs: *mut DP_CanvasState) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_canvas_state_offset_x(cs: *mut DP_CanvasState) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_canvas_state_offset_y(cs: *mut DP_CanvasState) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_canvas_state_active_context_id(cs: *mut DP_CanvasState) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn DP_canvas_state_active_selection_id(cs: *mut DP_CanvasState) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_canvas_state_background_tile_noinc(cs: *mut DP_CanvasState) -> *mut DP_Tile;
}
extern "C" {
    pub fn DP_canvas_state_background_opaque(cs: *mut DP_CanvasState) -> bool;
}
extern "C" {
    pub fn DP_canvas_state_layers_noinc(cs: *mut DP_CanvasState) -> *mut DP_LayerList;
}
extern "C" {
    pub fn DP_canvas_state_layer_props_noinc(cs: *mut DP_CanvasState) -> *mut DP_LayerPropsList;
}
extern "C" {
    pub fn DP_canvas_state_layer_routes_noinc(cs: *mut DP_CanvasState) -> *mut DP_LayerRoutes;
}
extern "C" {
    pub fn DP_canvas_state_annotations_noinc(cs: *mut DP_CanvasState) -> *mut DP_AnnotationList;
}
extern "C" {
    pub fn DP_canvas_state_timeline_noinc(cs: *mut DP_CanvasState) -> *mut DP_Timeline;
}
extern "C" {
    pub fn DP_canvas_state_metadata_noinc(cs: *mut DP_CanvasState) -> *mut DP_DocumentMetadata;
}
extern "C" {
    pub fn DP_canvas_state_selections_noinc_nullable(
        cs: *mut DP_CanvasState,
    ) -> *mut DP_SelectionSet;
}
extern "C" {
    pub fn DP_canvas_state_selection_search_noinc(
        cs: *mut DP_CanvasState,
        context_id: ::std::os::raw::c_uint,
        selection_id: ::std::os::raw::c_int,
    ) -> *mut DP_Selection;
}
extern "C" {
    pub fn DP_canvas_state_frame_count(cs: *mut DP_CanvasState) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_canvas_state_framerate(cs: *mut DP_CanvasState) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_canvas_state_same_frame(
        cs: *mut DP_CanvasState,
        frame_index_a: ::std::os::raw::c_int,
        frame_index_b: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn DP_canvas_state_handle(
        cs: *mut DP_CanvasState,
        dc: *mut DP_DrawContext,
        ucs_or_null: *mut DP_UserCursors,
        msg: *mut DP_Message,
    ) -> *mut DP_CanvasState;
}
extern "C" {
    pub fn DP_canvas_state_handle_multidab(
        cs: *mut DP_CanvasState,
        dc: *mut DP_DrawContext,
        ucs_or_null: *mut DP_UserCursors,
        count: ::std::os::raw::c_int,
        msgs: *mut *mut DP_Message,
    ) -> *mut DP_CanvasState;
}
extern "C" {
    pub fn DP_canvas_state_search_change_bounds(
        cs: *mut DP_CanvasState,
        context_id: ::std::os::raw::c_uint,
        out_x: *mut ::std::os::raw::c_int,
        out_y: *mut ::std::os::raw::c_int,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_canvas_state_to_flat_layer(
        cs: *mut DP_CanvasState,
        flags: ::std::os::raw::c_uint,
        vmf_or_null: *const DP_ViewModeFilter,
    ) -> *mut DP_TransientLayerContent;
}
extern "C" {
    pub fn DP_canvas_state_to_flat_image(
        cs: *mut DP_CanvasState,
        flags: ::std::os::raw::c_uint,
        area_or_null: *const DP_Rect,
        vmf_or_null: *const DP_ViewModeFilter,
    ) -> *mut DP_Image;
}
extern "C" {
    pub fn DP_canvas_state_into_flat_image(
        cs: *mut DP_CanvasState,
        flags: ::std::os::raw::c_uint,
        area_or_null: *const DP_Rect,
        vmf_or_null: *const DP_ViewModeFilter,
        inout_img_or_null: *mut *mut DP_Image,
    ) -> *mut DP_Image;
}
extern "C" {
    pub fn DP_canvas_state_to_flat_separated_urgba8(
        cs: *mut DP_CanvasState,
        flags: ::std::os::raw::c_uint,
        area_or_null: *const DP_Rect,
        vmf_or_null: *const DP_ViewModeFilter,
        buffer: *mut ::std::os::raw::c_uchar,
    ) -> bool;
}
extern "C" {
    pub fn DP_canvas_state_flatten_tile_to(
        cs: *mut DP_CanvasState,
        tile_index: ::std::os::raw::c_int,
        tt_or_null: *mut DP_TransientTile,
        include_sublayers: bool,
        selection_tint: *mut DP_UPixel15,
        vmf: *const DP_ViewModeFilter,
    ) -> *mut DP_TransientTile;
}
extern "C" {
    pub fn DP_canvas_state_flatten_tile(
        cs: *mut DP_CanvasState,
        tile_index: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
        vmf_or_null: *const DP_ViewModeFilter,
    ) -> *mut DP_TransientTile;
}
extern "C" {
    pub fn DP_canvas_state_flatten_tile_at(
        cs: *mut DP_CanvasState,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
        vmf_or_null: *const DP_ViewModeFilter,
    ) -> *mut DP_TransientTile;
}
extern "C" {
    pub fn DP_canvas_state_diff(
        cs: *mut DP_CanvasState,
        prev_or_null: *mut DP_CanvasState,
        diff: *mut DP_CanvasDiff,
        only_layer_id: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_canvas_state_render(
        cs: *mut DP_CanvasState,
        lc: *mut DP_TransientLayerContent,
        diff: *mut DP_CanvasDiff,
    ) -> *mut DP_TransientLayerContent;
}
extern "C" {
    pub fn DP_transient_canvas_state_new_init() -> *mut DP_TransientCanvasState;
}
extern "C" {
    pub fn DP_transient_canvas_state_new(cs: *mut DP_CanvasState) -> *mut DP_TransientCanvasState;
}
extern "C" {
    pub fn DP_transient_canvas_state_new_with_layers_noinc(
        cs: *mut DP_CanvasState,
        tll: *mut DP_TransientLayerList,
        tlpl: *mut DP_TransientLayerPropsList,
    ) -> *mut DP_TransientCanvasState;
}
extern "C" {
    pub fn DP_transient_canvas_state_new_with_timeline_noinc(
        cs: *mut DP_CanvasState,
        ttl: *mut DP_TransientTimeline,
    ) -> *mut DP_TransientCanvasState;
}
extern "C" {
    pub fn DP_transient_canvas_state_incref(
        cs: *mut DP_TransientCanvasState,
    ) -> *mut DP_TransientCanvasState;
}
extern "C" {
    pub fn DP_transient_canvas_state_incref_nullable(
        tcs_or_null: *mut DP_TransientCanvasState,
    ) -> *mut DP_TransientCanvasState;
}
extern "C" {
    pub fn DP_transient_canvas_state_decref(cs: *mut DP_TransientCanvasState);
}
extern "C" {
    pub fn DP_transient_canvas_state_decref_nullable(tcs_or_null: *mut DP_TransientCanvasState);
}
extern "C" {
    pub fn DP_transient_canvas_state_refcount(
        cs: *mut DP_TransientCanvasState,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_transient_canvas_state_persist(
        tcs: *mut DP_TransientCanvasState,
    ) -> *mut DP_CanvasState;
}
extern "C" {
    pub fn DP_transient_canvas_state_width(
        tcs: *mut DP_TransientCanvasState,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_transient_canvas_state_height(
        tcs: *mut DP_TransientCanvasState,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_transient_canvas_state_width_set(
        tcs: *mut DP_TransientCanvasState,
        width: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_canvas_state_height_set(
        tcs: *mut DP_TransientCanvasState,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_canvas_state_offsets_add(
        tcs: *mut DP_TransientCanvasState,
        offset_x: ::std::os::raw::c_int,
        offset_y: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_canvas_state_active_context_id_set(
        tcs: *mut DP_TransientCanvasState,
        active_context_id: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn DP_transient_canvas_state_active_selection_id_set(
        tcs: *mut DP_TransientCanvasState,
        active_selection_id: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_canvas_state_background_tile_set_noinc(
        tcs: *mut DP_TransientCanvasState,
        tile: *mut DP_Tile,
        opaque: bool,
    );
}
extern "C" {
    pub fn DP_transient_canvas_state_layer_routes_reindex(
        tcs: *mut DP_TransientCanvasState,
        dc: *mut DP_DrawContext,
    );
}
extern "C" {
    pub fn DP_transient_canvas_state_timeline_cleanup(tcs: *mut DP_TransientCanvasState);
}
extern "C" {
    pub fn DP_transient_canvas_state_layers_noinc(
        tcs: *mut DP_TransientCanvasState,
    ) -> *mut DP_LayerList;
}
extern "C" {
    pub fn DP_transient_canvas_state_layer_props_noinc(
        tcs: *mut DP_TransientCanvasState,
    ) -> *mut DP_LayerPropsList;
}
extern "C" {
    pub fn DP_transient_canvas_state_layer_routes_noinc(
        tcs: *mut DP_TransientCanvasState,
    ) -> *mut DP_LayerRoutes;
}
extern "C" {
    pub fn DP_transient_canvas_state_annotations_noinc(
        tcs: *mut DP_TransientCanvasState,
    ) -> *mut DP_AnnotationList;
}
extern "C" {
    pub fn DP_transient_canvas_state_metadata_noinc(
        tcs: *mut DP_TransientCanvasState,
    ) -> *mut DP_DocumentMetadata;
}
extern "C" {
    pub fn DP_transient_canvas_state_selections_noinc_nullable(
        tcs: *mut DP_TransientCanvasState,
    ) -> *mut DP_SelectionSet;
}
extern "C" {
    pub fn DP_transient_canvas_state_layers_set_inc(
        tcs: *mut DP_TransientCanvasState,
        ll: *mut DP_LayerList,
    );
}
extern "C" {
    pub fn DP_transient_canvas_state_transient_layers_set_noinc(
        tcs: *mut DP_TransientCanvasState,
        tll: *mut DP_TransientLayerList,
    );
}
extern "C" {
    pub fn DP_transient_canvas_state_transient_layers(
        tcs: *mut DP_TransientCanvasState,
        reserve: ::std::os::raw::c_int,
    ) -> *mut DP_TransientLayerList;
}
extern "C" {
    pub fn DP_transient_canvas_state_transient_layer_props(
        tcs: *mut DP_TransientCanvasState,
        reserve: ::std::os::raw::c_int,
    ) -> *mut DP_TransientLayerPropsList;
}
extern "C" {
    pub fn DP_transient_canvas_state_layer_props_set_inc(
        tcs: *mut DP_TransientCanvasState,
        lpl: *mut DP_LayerPropsList,
    );
}
extern "C" {
    pub fn DP_transient_canvas_state_transient_layer_props_set_noinc(
        tcs: *mut DP_TransientCanvasState,
        tlpl: *mut DP_TransientLayerPropsList,
    );
}
extern "C" {
    pub fn DP_transient_canvas_state_transient_annotations(
        tcs: *mut DP_TransientCanvasState,
        reserve: ::std::os::raw::c_int,
    ) -> *mut DP_TransientAnnotationList;
}
extern "C" {
    pub fn DP_transient_canvas_state_transient_timeline(
        tcs: *mut DP_TransientCanvasState,
        reserve: ::std::os::raw::c_int,
    ) -> *mut DP_TransientTimeline;
}
extern "C" {
    pub fn DP_transient_canvas_state_timeline_set_inc(
        tcs: *mut DP_TransientCanvasState,
        tl: *mut DP_Timeline,
    );
}
extern "C" {
    pub fn DP_transient_canvas_state_transient_timeline_set_noinc(
        tcs: *mut DP_TransientCanvasState,
        ttl: *mut DP_TransientTimeline,
    );
}
extern "C" {
    pub fn DP_transient_canvas_state_transient_metadata(
        tcs: *mut DP_TransientCanvasState,
    ) -> *mut DP_TransientDocumentMetadata;
}
extern "C" {
    pub fn DP_transient_canvas_state_transient_selection_set_noinc_nullable(
        tcs: *mut DP_TransientCanvasState,
        reserve: ::std::os::raw::c_int,
    ) -> *mut DP_TransientSelectionSet;
}
extern "C" {
    pub fn DP_transient_canvas_state_transient_selections_set_noinc(
        tcs: *mut DP_TransientCanvasState,
        tss: *mut DP_TransientSelectionSet,
    );
}
extern "C" {
    pub fn DP_transient_canvas_state_transient_selections_clear(tcs: *mut DP_TransientCanvasState);
}
extern "C" {
    pub fn DP_transient_canvas_state_intuit_background(tcs: *mut DP_TransientCanvasState);
}
extern "C" {
    pub fn DP_document_metadata_new() -> *mut DP_DocumentMetadata;
}
extern "C" {
    pub fn DP_document_metadata_incref(dm: *mut DP_DocumentMetadata) -> *mut DP_DocumentMetadata;
}
extern "C" {
    pub fn DP_document_metadata_incref_nullable(
        dm_or_null: *mut DP_DocumentMetadata,
    ) -> *mut DP_DocumentMetadata;
}
extern "C" {
    pub fn DP_document_metadata_decref(dm: *mut DP_DocumentMetadata);
}
extern "C" {
    pub fn DP_document_metadata_decref_nullable(dm_or_null: *mut DP_DocumentMetadata);
}
extern "C" {
    pub fn DP_document_metadata_refcount(dm: *mut DP_DocumentMetadata) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_document_metadata_transient(dm: *mut DP_DocumentMetadata) -> bool;
}
extern "C" {
    pub fn DP_document_metadata_dpix(dm: *mut DP_DocumentMetadata) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_document_metadata_dpiy(dm: *mut DP_DocumentMetadata) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_document_metadata_framerate(dm: *mut DP_DocumentMetadata) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_document_metadata_frame_count(dm: *mut DP_DocumentMetadata) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_transient_document_metadata_new(
        dm: *mut DP_DocumentMetadata,
    ) -> *mut DP_TransientDocumentMetadata;
}
extern "C" {
    pub fn DP_transient_document_metadata_new_init() -> *mut DP_TransientDocumentMetadata;
}
extern "C" {
    pub fn DP_transient_document_metadata_incref(
        tdm: *mut DP_TransientDocumentMetadata,
    ) -> *mut DP_TransientDocumentMetadata;
}
extern "C" {
    pub fn DP_transient_document_metadata_decref(tdm: *mut DP_TransientDocumentMetadata);
}
extern "C" {
    pub fn DP_transient_document_metadata_refcount(
        tdm: *mut DP_TransientDocumentMetadata,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_transient_document_metadata_persist(
        tdm: *mut DP_TransientDocumentMetadata,
    ) -> *mut DP_DocumentMetadata;
}
extern "C" {
    pub fn DP_transient_document_metadata_dpix(
        tdm: *mut DP_TransientDocumentMetadata,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_transient_document_metadata_dpiy(
        tdm: *mut DP_TransientDocumentMetadata,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_transient_document_metadata_framerate(
        tdm: *mut DP_TransientDocumentMetadata,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_transient_document_metadata_frame_count(
        tdm: *mut DP_TransientDocumentMetadata,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_transient_document_metadata_dpix_set(
        tdm: *mut DP_TransientDocumentMetadata,
        dpix: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_document_metadata_dpiy_set(
        tdm: *mut DP_TransientDocumentMetadata,
        dpiy: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_document_metadata_framerate_set(
        tdm: *mut DP_TransientDocumentMetadata,
        framerate: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_document_metadata_frame_count_set(
        tdm: *mut DP_TransientDocumentMetadata,
        frame_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_document_metadata_use_timeline_set(
        tdm: *mut DP_TransientDocumentMetadata,
        use_timeline: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_LayerListEntry {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_LayerProps {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_DrawContextStatistics {
    pub static_bytes: usize,
    pub pool_bytes: usize,
}
#[test]
fn bindgen_test_layout_DP_DrawContextStatistics() {
    const UNINIT: ::std::mem::MaybeUninit<DP_DrawContextStatistics> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_DrawContextStatistics>(),
        16usize,
        concat!("Size of: ", stringify!(DP_DrawContextStatistics))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_DrawContextStatistics>(),
        8usize,
        concat!("Alignment of ", stringify!(DP_DrawContextStatistics))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).static_bytes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_DrawContextStatistics),
            "::",
            stringify!(static_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool_bytes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_DrawContextStatistics),
            "::",
            stringify!(pool_bytes)
        )
    );
}
extern "C" {
    pub fn DP_draw_context_new() -> *mut DP_DrawContext;
}
extern "C" {
    pub fn DP_draw_context_free(dc: *mut DP_DrawContext);
}
extern "C" {
    pub fn DP_draw_context_statistics(dc: *mut DP_DrawContext) -> DP_DrawContextStatistics;
}
extern "C" {
    pub fn DP_draw_context_transform_buffer(dc: *mut DP_DrawContext) -> *mut DP_Pixel8;
}
extern "C" {
    pub fn DP_draw_context_tile8_buffer(dc: *mut DP_DrawContext) -> *mut DP_Pixel8;
}
extern "C" {
    pub fn DP_draw_context_id_generator_reset(
        dc: *mut DP_DrawContext,
        last_used_id: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_draw_context_id_generator_mark_used(
        dc: *mut DP_DrawContext,
        id: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_draw_context_id_generator_next(dc: *mut DP_DrawContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_draw_context_pool(dc: *mut DP_DrawContext) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn DP_draw_context_pool_require(
        dc: *mut DP_DrawContext,
        required_capacity: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn DP_draw_context_raster_pool(
        dc: *mut DP_DrawContext,
        out_size: *mut usize,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn DP_draw_context_raster_pool_resize(
        dc: *mut DP_DrawContext,
        new_size: usize,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn DP_draw_context_layer_indexes_clear(dc: *mut DP_DrawContext);
}
extern "C" {
    pub fn DP_draw_context_layer_indexes_push(dc: *mut DP_DrawContext);
}
extern "C" {
    pub fn DP_draw_context_layer_indexes_push_get(
        dc: *mut DP_DrawContext,
        out_count: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_draw_context_layer_indexes_set(
        dc: *mut DP_DrawContext,
        layer_index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_draw_context_layer_indexes_pop(dc: *mut DP_DrawContext);
}
extern "C" {
    pub fn DP_draw_context_layer_indexes(
        dc: *mut DP_DrawContext,
        out_count: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union DP_Pixel8 {
    pub color: u32,
}
#[test]
fn bindgen_test_layout_DP_Pixel8() {
    const UNINIT: ::std::mem::MaybeUninit<DP_Pixel8> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_Pixel8>(),
        4usize,
        concat!("Size of: ", stringify!(DP_Pixel8))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_Pixel8>(),
        4usize,
        concat!("Alignment of ", stringify!(DP_Pixel8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_Pixel8),
            "::",
            stringify!(color)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union DP_UPixel8 {
    pub color: u32,
}
#[test]
fn bindgen_test_layout_DP_UPixel8() {
    const UNINIT: ::std::mem::MaybeUninit<DP_UPixel8> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_UPixel8>(),
        4usize,
        concat!("Size of: ", stringify!(DP_UPixel8))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_UPixel8>(),
        4usize,
        concat!("Alignment of ", stringify!(DP_UPixel8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UPixel8),
            "::",
            stringify!(color)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_Pixel15 {
    pub b: u16,
    pub g: u16,
    pub r: u16,
    pub a: u16,
}
#[test]
fn bindgen_test_layout_DP_Pixel15() {
    const UNINIT: ::std::mem::MaybeUninit<DP_Pixel15> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_Pixel15>(),
        8usize,
        concat!("Size of: ", stringify!(DP_Pixel15))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_Pixel15>(),
        2usize,
        concat!("Alignment of ", stringify!(DP_Pixel15))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_Pixel15),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_Pixel15),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_Pixel15),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_Pixel15),
            "::",
            stringify!(a)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_UPixel15 {
    pub b: u16,
    pub g: u16,
    pub r: u16,
    pub a: u16,
}
#[test]
fn bindgen_test_layout_DP_UPixel15() {
    const UNINIT: ::std::mem::MaybeUninit<DP_UPixel15> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_UPixel15>(),
        8usize,
        concat!("Size of: ", stringify!(DP_UPixel15))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_UPixel15>(),
        2usize,
        concat!("Alignment of ", stringify!(DP_UPixel15))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UPixel15),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UPixel15),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UPixel15),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UPixel15),
            "::",
            stringify!(a)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_UPixelFloat {
    pub b: f32,
    pub g: f32,
    pub r: f32,
    pub a: f32,
}
#[test]
fn bindgen_test_layout_DP_UPixelFloat() {
    const UNINIT: ::std::mem::MaybeUninit<DP_UPixelFloat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_UPixelFloat>(),
        16usize,
        concat!("Size of: ", stringify!(DP_UPixelFloat))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_UPixelFloat>(),
        4usize,
        concat!("Alignment of ", stringify!(DP_UPixelFloat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UPixelFloat),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UPixelFloat),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UPixelFloat),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UPixelFloat),
            "::",
            stringify!(a)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_Spectral {
    pub channels: [f32; 16usize],
}
#[test]
fn bindgen_test_layout_DP_Spectral() {
    const UNINIT: ::std::mem::MaybeUninit<DP_Spectral> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_Spectral>(),
        64usize,
        concat!("Size of: ", stringify!(DP_Spectral))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_Spectral>(),
        4usize,
        concat!("Alignment of ", stringify!(DP_Spectral))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_Spectral),
            "::",
            stringify!(channels)
        )
    );
}
extern "C" {
    pub fn DP_fix15_mul(a: u16, b: u16) -> u16;
}
extern "C" {
    pub fn DP_channel8_to_15(c: u8) -> u16;
}
extern "C" {
    pub fn DP_channel15_to_8(c: u16) -> u8;
}
extern "C" {
    pub fn DP_channel8_to_float(c: u8) -> f32;
}
extern "C" {
    pub fn DP_channel15_to_float(c: u16) -> f32;
}
extern "C" {
    pub fn DP_channel15_to_float_round8(c: u16) -> f32;
}
extern "C" {
    pub fn DP_channel_float_to_8(c: f32) -> u8;
}
extern "C" {
    pub fn DP_channel_float_to_15(c: f32) -> u16;
}
extern "C" {
    pub fn DP_pixel8_to_15(pixel: DP_Pixel8) -> DP_Pixel15;
}
extern "C" {
    pub fn DP_pixel15_to_8(pixel: DP_Pixel15) -> DP_Pixel8;
}
extern "C" {
    pub fn DP_upixel8_to_15(pixel: DP_UPixel8) -> DP_UPixel15;
}
extern "C" {
    pub fn DP_upixel15_to_8(pixel: DP_UPixel15) -> DP_UPixel8;
}
extern "C" {
    pub fn DP_upixel8_to_float(pixel: DP_UPixel8) -> DP_UPixelFloat;
}
extern "C" {
    pub fn DP_upixel15_to_float(pixel: DP_UPixel15) -> DP_UPixelFloat;
}
extern "C" {
    pub fn DP_upixel15_to_float_round8(pixel: DP_UPixel15) -> DP_UPixelFloat;
}
extern "C" {
    pub fn DP_upixel_float_to_8(pixel: DP_UPixelFloat) -> DP_UPixel8;
}
extern "C" {
    pub fn DP_pixels8_to_15(
        dst: *mut DP_Pixel15,
        src: *const DP_Pixel8,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_pixels8_to_15_checked(
        dst: *mut DP_Pixel15,
        src: *const DP_Pixel8,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_pixels15_to_8(
        dst: *mut DP_Pixel8,
        src: *const DP_Pixel15,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_pixels15_to_8_unpremultiply(
        dst: *mut DP_UPixel8,
        src: *const DP_Pixel15,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_pixels15_to_8_tile(dst: *mut DP_Pixel8, src: *const DP_Pixel15);
}
extern "C" {
    pub fn DP_pixel8_unpremultiply(pixel: DP_Pixel8) -> DP_UPixel8;
}
extern "C" {
    pub fn DP_pixel15_unpremultiply(pixel: DP_Pixel15) -> DP_UPixel15;
}
extern "C" {
    pub fn DP_pixel8_premultiply(pixel: DP_UPixel8) -> DP_Pixel8;
}
extern "C" {
    pub fn DP_pixel15_premultiply(pixel: DP_UPixel15) -> DP_Pixel15;
}
extern "C" {
    pub fn DP_blend_mask(
        dst: *mut DP_Pixel15,
        src: DP_UPixel15,
        blend_mode: ::std::os::raw::c_int,
        mask: *const u16,
        opacity: u16,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        mask_skip: ::std::os::raw::c_int,
        base_skip: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_blend_pixels(
        dst: *mut DP_Pixel15,
        src: *const DP_Pixel15,
        pixel_count: ::std::os::raw::c_int,
        opacity: u16,
        blend_mode: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_tint_pixels(
        dst: *mut DP_Pixel15,
        pixel_count: ::std::os::raw::c_int,
        tint: DP_UPixel8,
    );
}
extern "C" {
    pub fn DP_blend_selection(
        dst: *mut DP_Pixel15,
        src: *const DP_Pixel15,
        pixel_count: ::std::os::raw::c_int,
        color: DP_UPixel15,
    );
}
extern "C" {
    pub fn DP_blend_tile(
        dst: *mut DP_Pixel15,
        src: *const DP_Pixel15,
        opacity: u16,
        blend_mode: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_posterize_mask(
        dst: *mut DP_Pixel15,
        posterize_num: ::std::os::raw::c_int,
        mask: *const u16,
        opacity: u16,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        mask_skip: ::std::os::raw::c_int,
        base_skip: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_pixel8_mul(a: ::std::os::raw::c_uint, b: ::std::os::raw::c_uint) -> u8;
}
extern "C" {
    pub fn DP_blend_color8_to(
        out: *mut DP_Pixel8,
        dst: *const DP_Pixel8,
        color: DP_UPixel8,
        pixel_count: ::std::os::raw::c_int,
        opacity: u8,
    );
}
extern "C" {
    pub fn DP_blend_pixels8(
        dst: *mut DP_Pixel8,
        src: *const DP_Pixel8,
        pixel_count: ::std::os::raw::c_int,
        opacity: u8,
    );
}
extern "C" {
    pub fn DP_rgb_to_spectral(r: f32, g: f32, b: f32) -> DP_Spectral;
}
extern "C" {
    pub fn DP_spectral_to_rgb(
        spectral: *const DP_Spectral,
        out_r: *mut f32,
        out_g: *mut f32,
        out_b: *mut f32,
    );
}
pub const DP_IMAGE_FILE_TYPE_GUESS: DP_ImageFileType = 0;
pub const DP_IMAGE_FILE_TYPE_PNG: DP_ImageFileType = 1;
pub const DP_IMAGE_FILE_TYPE_JPEG: DP_ImageFileType = 2;
pub const DP_IMAGE_FILE_TYPE_WEBP: DP_ImageFileType = 3;
pub const DP_IMAGE_FILE_TYPE_UNKNOWN: DP_ImageFileType = 0;
pub type DP_ImageFileType = ::std::os::raw::c_uint;
pub const DP_IMAGE_SCALE_INTERPOLATION_FAST_BILINEAR: DP_ImageScaleInterpolation = -1;
pub const DP_IMAGE_SCALE_INTERPOLATION_BILINEAR: DP_ImageScaleInterpolation = -2;
pub const DP_IMAGE_SCALE_INTERPOLATION_BICUBIC: DP_ImageScaleInterpolation = -3;
pub const DP_IMAGE_SCALE_INTERPOLATION_EXPERIMENTAL: DP_ImageScaleInterpolation = -4;
pub const DP_IMAGE_SCALE_INTERPOLATION_NEAREST: DP_ImageScaleInterpolation = -5;
pub const DP_IMAGE_SCALE_INTERPOLATION_AREA: DP_ImageScaleInterpolation = -6;
pub const DP_IMAGE_SCALE_INTERPOLATION_BICUBLIN: DP_ImageScaleInterpolation = -7;
pub const DP_IMAGE_SCALE_INTERPOLATION_GAUSS: DP_ImageScaleInterpolation = -8;
pub const DP_IMAGE_SCALE_INTERPOLATION_SINC: DP_ImageScaleInterpolation = -9;
pub const DP_IMAGE_SCALE_INTERPOLATION_LANCZOS: DP_ImageScaleInterpolation = -10;
pub const DP_IMAGE_SCALE_INTERPOLATION_SPLINE: DP_ImageScaleInterpolation = -11;
pub type DP_ImageScaleInterpolation = ::std::os::raw::c_int;
pub type DP_ImageGetPixelFn = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> DP_Pixel8,
>;
extern "C" {
    pub fn DP_image_new(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> *mut DP_Image;
}
extern "C" {
    pub fn DP_image_guess(buf: *const ::std::os::raw::c_uchar, size: usize) -> DP_ImageFileType;
}
extern "C" {
    pub fn DP_image_new_from_compressed(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        in_: *const ::std::os::raw::c_uchar,
        in_size: usize,
    ) -> *mut DP_Image;
}
extern "C" {
    pub fn DP_image_new_from_compressed_alpha_mask(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        in_: *const ::std::os::raw::c_uchar,
        in_size: usize,
    ) -> *mut DP_Image;
}
extern "C" {
    pub fn DP_image_new_from_compressed_monochrome(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        in_: *const ::std::os::raw::c_uchar,
        in_size: usize,
    ) -> *mut DP_Image;
}
extern "C" {
    pub fn DP_image_new_subimage(
        img: *mut DP_Image,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> *mut DP_Image;
}
extern "C" {
    pub fn DP_image_free(img: *mut DP_Image);
}
extern "C" {
    pub fn DP_image_width(img: *mut DP_Image) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_image_height(img: *mut DP_Image) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_image_pixels(img: *mut DP_Image) -> *mut DP_Pixel8;
}
extern "C" {
    pub fn DP_image_pixel_at(
        img: *mut DP_Image,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> DP_Pixel8;
}
extern "C" {
    pub fn DP_image_pixel_at_set(
        img: *mut DP_Image,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        pixel: DP_Pixel8,
    );
}
extern "C" {
    pub fn DP_image_transform_pixels(
        src_width: ::std::os::raw::c_int,
        src_height: ::std::os::raw::c_int,
        src_pixels: *const DP_Pixel8,
        dc: *mut DP_DrawContext,
        dst_quad: *const DP_Quad,
        interpolation: ::std::os::raw::c_int,
        check_bounds: bool,
        out_offset_x: *mut ::std::os::raw::c_int,
        out_offset_y: *mut ::std::os::raw::c_int,
    ) -> *mut DP_Image;
}
extern "C" {
    pub fn DP_image_transform(
        img: *mut DP_Image,
        dc: *mut DP_DrawContext,
        dst_quad: *const DP_Quad,
        interpolation: ::std::os::raw::c_int,
        out_offset_x: *mut ::std::os::raw::c_int,
        out_offset_y: *mut ::std::os::raw::c_int,
    ) -> *mut DP_Image;
}
extern "C" {
    pub fn DP_image_thumbnail(
        img: *mut DP_Image,
        dc: *mut DP_DrawContext,
        max_width: ::std::os::raw::c_int,
        max_height: ::std::os::raw::c_int,
        out_thumb: *mut *mut DP_Image,
    ) -> bool;
}
extern "C" {
    pub fn DP_image_scale_pixels(
        src_width: ::std::os::raw::c_int,
        src_height: ::std::os::raw::c_int,
        src_pixels: *const DP_Pixel8,
        dc: *mut DP_DrawContext,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        interpolation: ::std::os::raw::c_int,
    ) -> *mut DP_Image;
}
extern "C" {
    pub fn DP_image_scale(
        img: *mut DP_Image,
        dc: *mut DP_DrawContext,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        interpolation: ::std::os::raw::c_int,
    ) -> *mut DP_Image;
}
extern "C" {
    pub fn DP_image_same_pixel(img: *mut DP_Image, out_pixel: *mut DP_Pixel8) -> bool;
}
extern "C" {
    pub fn DP_image_sample_color_at_with(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        get_pixel: DP_ImageGetPixelFn,
        user: *mut ::std::os::raw::c_void,
        stamp_buffer: *mut u16,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        diameter: ::std::os::raw::c_int,
        opaque: bool,
        in_out_last_diameter: *mut ::std::os::raw::c_int,
    ) -> DP_UPixelFloat;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_KeyFrame {
    _unused: [u8; 0],
}
pub type DP_TransientKeyFrame = DP_KeyFrame;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_KeyFrameLayer {
    pub layer_id: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_DP_KeyFrameLayer() {
    const UNINIT: ::std::mem::MaybeUninit<DP_KeyFrameLayer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_KeyFrameLayer>(),
        8usize,
        concat!("Size of: ", stringify!(DP_KeyFrameLayer))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_KeyFrameLayer>(),
        4usize,
        concat!("Alignment of ", stringify!(DP_KeyFrameLayer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layer_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_KeyFrameLayer),
            "::",
            stringify!(layer_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_KeyFrameLayer),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    pub fn DP_key_frame_layer_hidden(kfl: *const DP_KeyFrameLayer) -> bool;
}
extern "C" {
    pub fn DP_key_frame_layer_revealed(kfl: *const DP_KeyFrameLayer) -> bool;
}
extern "C" {
    pub fn DP_key_frame_new_init(layer_id: ::std::os::raw::c_int) -> *mut DP_KeyFrame;
}
extern "C" {
    pub fn DP_key_frame_incref(kf: *mut DP_KeyFrame) -> *mut DP_KeyFrame;
}
extern "C" {
    pub fn DP_key_frame_incref_nullable(kf_or_null: *mut DP_KeyFrame) -> *mut DP_KeyFrame;
}
extern "C" {
    pub fn DP_key_frame_decref(kf: *mut DP_KeyFrame);
}
extern "C" {
    pub fn DP_key_frame_decref_nullable(kf_or_null: *mut DP_KeyFrame);
}
extern "C" {
    pub fn DP_key_frame_refcount(kf: *mut DP_KeyFrame) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_key_frame_transient(kf: *mut DP_KeyFrame) -> bool;
}
extern "C" {
    pub fn DP_key_frame_title(
        kf: *mut DP_KeyFrame,
        out_length: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_key_frame_layer_id(kf: *mut DP_KeyFrame) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_key_frame_layers(
        kf: *mut DP_KeyFrame,
        out_count: *mut ::std::os::raw::c_int,
    ) -> *const DP_KeyFrameLayer;
}
extern "C" {
    pub fn DP_key_frame_same_frame(kf_a: *mut DP_KeyFrame, kf_b: *mut DP_KeyFrame) -> bool;
}
extern "C" {
    pub fn DP_transient_key_frame_new(kf: *mut DP_KeyFrame) -> *mut DP_TransientKeyFrame;
}
extern "C" {
    pub fn DP_transient_key_frame_new_with_layers(
        kf: *mut DP_KeyFrame,
        layers: *const DP_KeyFrameLayer,
        count: ::std::os::raw::c_int,
    ) -> *mut DP_TransientKeyFrame;
}
extern "C" {
    pub fn DP_transient_key_frame_new_init(
        layer_id: ::std::os::raw::c_int,
        reserve: ::std::os::raw::c_int,
    ) -> *mut DP_TransientKeyFrame;
}
extern "C" {
    pub fn DP_transient_key_frame_incref(
        tkf: *mut DP_TransientKeyFrame,
    ) -> *mut DP_TransientKeyFrame;
}
extern "C" {
    pub fn DP_transient_key_frame_decref(tkf: *mut DP_TransientKeyFrame);
}
extern "C" {
    pub fn DP_transient_key_frame_refcount(tkf: *mut DP_TransientKeyFrame)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_transient_key_frame_persist(tkf: *mut DP_TransientKeyFrame) -> *mut DP_KeyFrame;
}
extern "C" {
    pub fn DP_transient_key_frame_title_set(
        tkf: *mut DP_TransientKeyFrame,
        title: *const ::std::os::raw::c_char,
        length: usize,
    );
}
extern "C" {
    pub fn DP_transient_key_frame_layer_id_set(
        tkf: *mut DP_TransientKeyFrame,
        layer_id: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_key_frame_layer_set(
        tkf: *mut DP_TransientKeyFrame,
        kfl: DP_KeyFrameLayer,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_key_frame_layer_delete_at(
        tkf: *mut DP_TransientKeyFrame,
        index: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_BrushStamp {
    _unused: [u8; 0],
}
pub type DP_TransientLayerProps = DP_LayerProps;
extern "C" {
    pub fn DP_layer_content_incref(lc: *mut DP_LayerContent) -> *mut DP_LayerContent;
}
extern "C" {
    pub fn DP_layer_content_incref_nullable(
        lc_or_null: *mut DP_LayerContent,
    ) -> *mut DP_LayerContent;
}
extern "C" {
    pub fn DP_layer_content_decref(lc: *mut DP_LayerContent);
}
extern "C" {
    pub fn DP_layer_content_decref_nullable(lc_or_null: *mut DP_LayerContent);
}
extern "C" {
    pub fn DP_layer_content_refcount(lc: *mut DP_LayerContent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_layer_content_transient(lc: *mut DP_LayerContent) -> bool;
}
extern "C" {
    pub fn DP_layer_content_diff(
        lc: *mut DP_LayerContent,
        lp: *mut DP_LayerProps,
        prev_lc: *mut DP_LayerContent,
        prev_lp: *mut DP_LayerProps,
        diff: *mut DP_CanvasDiff,
        only_layer_id: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_layer_content_diff_selection(
        lc: *mut DP_LayerContent,
        prev_lc: *mut DP_LayerContent,
        diff: *mut DP_CanvasDiff,
    );
}
extern "C" {
    pub fn DP_layer_content_diff_mark(lc: *mut DP_LayerContent, diff: *mut DP_CanvasDiff);
}
extern "C" {
    pub fn DP_layer_content_width(lc: *mut DP_LayerContent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_layer_content_height(lc: *mut DP_LayerContent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_layer_content_tile_at_index_noinc(
        lc: *mut DP_LayerContent,
        i: ::std::os::raw::c_int,
    ) -> *mut DP_Tile;
}
extern "C" {
    pub fn DP_layer_content_tile_at_noinc(
        lc: *mut DP_LayerContent,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> *mut DP_Tile;
}
extern "C" {
    pub fn DP_layer_content_pixel_at(
        lc: *mut DP_LayerContent,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> DP_Pixel15;
}
extern "C" {
    pub fn DP_layer_content_pick_at(
        lc: *mut DP_LayerContent,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        out_context_id: *mut ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn DP_layer_content_sample_color_at(
        lc: *mut DP_LayerContent,
        stamp_buffer: *mut u16,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        diameter: ::std::os::raw::c_int,
        opaque: bool,
        pigment: bool,
        in_out_last_diameter: *mut ::std::os::raw::c_int,
    ) -> DP_UPixelFloat;
}
extern "C" {
    pub fn DP_layer_content_sub_contents_noinc(lc: *mut DP_LayerContent) -> *mut DP_LayerList;
}
extern "C" {
    pub fn DP_layer_content_sub_props_noinc(lc: *mut DP_LayerContent) -> *mut DP_LayerPropsList;
}
extern "C" {
    pub fn DP_layer_content_same_pixel(
        lc: *mut DP_LayerContent,
        out_pixel: *mut DP_Pixel15,
    ) -> bool;
}
extern "C" {
    pub fn DP_layer_content_bounds(
        lc: *mut DP_LayerContent,
        include_sublayers: bool,
        out_bounds: *mut DP_Rect,
    ) -> bool;
}
extern "C" {
    pub fn DP_layer_content_search_change_bounds(
        lc: *mut DP_LayerContent,
        context_id: ::std::os::raw::c_uint,
        out_x: *mut ::std::os::raw::c_int,
        out_y: *mut ::std::os::raw::c_int,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn DP_layer_content_is_blank_in_bounds(
        lc: *mut DP_LayerContent,
        rect: *const DP_Rect,
    ) -> bool;
}
extern "C" {
    pub fn DP_layer_content_is_blank_in_mask(
        lc: *mut DP_LayerContent,
        rect: *const DP_Rect,
        mask: *const DP_Pixel8,
    ) -> bool;
}
extern "C" {
    pub fn DP_layer_content_to_image(lc: *mut DP_LayerContent) -> *mut DP_Image;
}
extern "C" {
    pub fn DP_layer_content_to_upixels8_cropped(
        lc: *mut DP_LayerContent,
        censored: bool,
        out_offset_x: *mut ::std::os::raw::c_int,
        out_offset_y: *mut ::std::os::raw::c_int,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
    ) -> *mut DP_UPixel8;
}
extern "C" {
    pub fn DP_layer_content_to_pixels8_cropped(
        lc: *mut DP_LayerContent,
        out_offset_x: *mut ::std::os::raw::c_int,
        out_offset_y: *mut ::std::os::raw::c_int,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
    ) -> *mut DP_Pixel8;
}
extern "C" {
    pub fn DP_layer_content_to_upixels8(
        lc: *mut DP_LayerContent,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> *mut DP_UPixel8;
}
extern "C" {
    pub fn DP_layer_content_to_upixels8_censored(
        lc: *mut DP_LayerContent,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> *mut DP_UPixel8;
}
extern "C" {
    pub fn DP_layer_content_to_pixels8(
        lc: *mut DP_LayerContent,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> *mut DP_Pixel8;
}
extern "C" {
    pub fn DP_layer_content_to_pixels8_mask(
        lc: *mut DP_LayerContent,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        color: DP_UPixel8,
    ) -> *mut DP_Pixel8;
}
extern "C" {
    pub fn DP_layer_content_select(
        lc: *mut DP_LayerContent,
        rect: *const DP_Rect,
        mask: *mut DP_Image,
    ) -> *mut DP_Image;
}
extern "C" {
    pub fn DP_layer_content_resize(
        lc: *mut DP_LayerContent,
        context_id: ::std::os::raw::c_uint,
        top: ::std::os::raw::c_int,
        right: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
        left: ::std::os::raw::c_int,
    ) -> *mut DP_TransientLayerContent;
}
extern "C" {
    pub fn DP_layer_content_has_sublayers(lc: *mut DP_LayerContent) -> bool;
}
extern "C" {
    pub fn DP_layer_content_merge_sublayers(lc: *mut DP_LayerContent) -> *mut DP_LayerContent;
}
extern "C" {
    pub fn DP_layer_content_flatten_tile(
        lc: *mut DP_LayerContent,
        tile_index: ::std::os::raw::c_int,
        censored: bool,
        include_sublayers: bool,
    ) -> *mut DP_Tile;
}
extern "C" {
    pub fn DP_layer_content_flatten_tile_to(
        lc: *mut DP_LayerContent,
        tile_index: ::std::os::raw::c_int,
        tt_or_null: *mut DP_TransientTile,
        opacity: u16,
        blend_mode: ::std::os::raw::c_int,
        tint: DP_UPixel8,
        censored: bool,
        include_sublayers: bool,
    ) -> *mut DP_TransientTile;
}
extern "C" {
    pub fn DP_transient_layer_content_new(
        lc: *mut DP_LayerContent,
    ) -> *mut DP_TransientLayerContent;
}
extern "C" {
    pub fn DP_transient_layer_content_new_transient(
        tlc: *mut DP_TransientLayerContent,
    ) -> *mut DP_TransientLayerContent;
}
extern "C" {
    pub fn DP_transient_layer_content_new_init(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        tile: *mut DP_Tile,
    ) -> *mut DP_TransientLayerContent;
}
extern "C" {
    pub fn DP_transient_layer_content_new_init_with_transient_sublayers_noinc(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        tile: *mut DP_Tile,
        sub_tll: *mut DP_TransientLayerList,
        sub_tlpl: *mut DP_TransientLayerPropsList,
    ) -> *mut DP_TransientLayerContent;
}
extern "C" {
    pub fn DP_transient_layer_content_incref(
        tlc: *mut DP_TransientLayerContent,
    ) -> *mut DP_TransientLayerContent;
}
extern "C" {
    pub fn DP_transient_layer_content_decref(tlc: *mut DP_TransientLayerContent);
}
extern "C" {
    pub fn DP_transient_layer_content_refcount(
        tlc: *mut DP_TransientLayerContent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_transient_layer_content_persist(
        tlc: *mut DP_TransientLayerContent,
    ) -> *mut DP_LayerContent;
}
extern "C" {
    pub fn DP_transient_layer_content_width(
        tlc: *mut DP_TransientLayerContent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_transient_layer_content_height(
        tlc: *mut DP_TransientLayerContent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_transient_layer_content_tile_at_index_noinc(
        tlc: *mut DP_TransientLayerContent,
        i: ::std::os::raw::c_int,
    ) -> *mut DP_Tile;
}
extern "C" {
    pub fn DP_transient_layer_content_tile_at_noinc(
        tlc: *mut DP_TransientLayerContent,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> *mut DP_Tile;
}
extern "C" {
    pub fn DP_transient_layer_content_transient_tile_at_set_noinc(
        tlc: *mut DP_TransientLayerContent,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        tt: *mut DP_TransientTile,
    );
}
extern "C" {
    pub fn DP_transient_layer_content_sub_contents_noinc(
        tlc: *mut DP_TransientLayerContent,
    ) -> *mut DP_LayerList;
}
extern "C" {
    pub fn DP_transient_layer_content_sub_props_noinc(
        tlc: *mut DP_TransientLayerContent,
    ) -> *mut DP_LayerPropsList;
}
extern "C" {
    pub fn DP_transient_layer_content_bounds(
        tlc: *mut DP_TransientLayerContent,
        include_sublayers: bool,
        out_bounds: *mut DP_Rect,
    ) -> bool;
}
extern "C" {
    pub fn DP_transient_layer_content_resize_to(
        tlc: *mut DP_TransientLayerContent,
        context_id: ::std::os::raw::c_uint,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> *mut DP_TransientLayerContent;
}
extern "C" {
    pub fn DP_transient_layer_content_merge(
        tlc: *mut DP_TransientLayerContent,
        context_id: ::std::os::raw::c_uint,
        lc: *mut DP_LayerContent,
        opacity: u16,
        blend_mode: ::std::os::raw::c_int,
        censored: bool,
    );
}
extern "C" {
    pub fn DP_transient_layer_content_pixel_at_put(
        tlc: *mut DP_TransientLayerContent,
        context_id: ::std::os::raw::c_uint,
        blend_mode: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        pixel: DP_Pixel15,
    );
}
extern "C" {
    pub fn DP_transient_layer_content_pixel_at_set(
        tlc: *mut DP_TransientLayerContent,
        context_id: ::std::os::raw::c_uint,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        pixel: DP_Pixel15,
    );
}
extern "C" {
    pub fn DP_transient_layer_content_put_pixels(
        tlc: *mut DP_TransientLayerContent,
        context_id: ::std::os::raw::c_uint,
        blend_mode: ::std::os::raw::c_int,
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        pixels: *const DP_Pixel8,
    );
}
extern "C" {
    pub fn DP_transient_layer_content_put_image(
        tlc: *mut DP_TransientLayerContent,
        context_id: ::std::os::raw::c_uint,
        blend_mode: ::std::os::raw::c_int,
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        img: *mut DP_Image,
    );
}
extern "C" {
    pub fn DP_transient_layer_content_fill_rect(
        tlc: *mut DP_TransientLayerContent,
        context_id: ::std::os::raw::c_uint,
        blend_mode: ::std::os::raw::c_int,
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        right: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
        pixel: DP_UPixel15,
    );
}
extern "C" {
    pub fn DP_transient_layer_content_tile_set_noinc(
        tlc: *mut DP_TransientLayerContent,
        t: *mut DP_Tile,
        i: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_layer_content_transient_tile_set_noinc(
        tlc: *mut DP_TransientLayerContent,
        tt: *mut DP_TransientTile,
        i: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_layer_content_put_tile_inc(
        tlc: *mut DP_TransientLayerContent,
        tile: *mut DP_Tile,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        repeat: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_layer_content_brush_stamp_apply(
        tlc: *mut DP_TransientLayerContent,
        context_id: ::std::os::raw::c_uint,
        pixel: DP_UPixel15,
        opacity: u16,
        blend_mode: ::std::os::raw::c_int,
        stamp: *const DP_BrushStamp,
    );
}
extern "C" {
    pub fn DP_transient_layer_content_brush_stamp_apply_posterize(
        tlc: *mut DP_TransientLayerContent,
        context_id: ::std::os::raw::c_uint,
        opacity: u16,
        posterize_num: ::std::os::raw::c_int,
        stamp: *const DP_BrushStamp,
    );
}
extern "C" {
    pub fn DP_transient_layer_content_transient_sublayer_at(
        tlc: *mut DP_TransientLayerContent,
        sublayer_index: ::std::os::raw::c_int,
        out_tlc: *mut *mut DP_TransientLayerContent,
        out_tlp: *mut *mut DP_TransientLayerProps,
    );
}
extern "C" {
    pub fn DP_transient_layer_content_transient_sublayer(
        tlc: *mut DP_TransientLayerContent,
        sublayer_id: ::std::os::raw::c_int,
        out_tlc: *mut *mut DP_TransientLayerContent,
        out_tlp: *mut *mut DP_TransientLayerProps,
    );
}
extern "C" {
    pub fn DP_transient_layer_content_sublayer_insert_inc(
        tlc: *mut DP_TransientLayerContent,
        sub_lc: *mut DP_LayerContent,
        sub_lp: *mut DP_LayerProps,
    );
}
extern "C" {
    pub fn DP_transient_layer_content_merge_sublayer_at(
        tlc: *mut DP_TransientLayerContent,
        context_id: ::std::os::raw::c_uint,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_layer_content_merge_all_sublayers(
        tl: *mut DP_TransientLayerContent,
        context_id: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn DP_transient_layer_content_render_tile(
        tlc: *mut DP_TransientLayerContent,
        cs: *mut DP_CanvasState,
        tile_index: ::std::os::raw::c_int,
        vmf_or_null: *const DP_ViewModeFilter,
    ) -> *mut DP_TransientTile;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_LayerGroup {
    _unused: [u8; 0],
}
pub type DP_TransientLayerGroup = DP_LayerGroup;
extern "C" {
    pub fn DP_layer_group_incref(lg: *mut DP_LayerGroup) -> *mut DP_LayerGroup;
}
extern "C" {
    pub fn DP_layer_group_incref_nullable(lg_or_null: *mut DP_LayerGroup) -> *mut DP_LayerGroup;
}
extern "C" {
    pub fn DP_layer_group_decref(lg: *mut DP_LayerGroup);
}
extern "C" {
    pub fn DP_layer_group_decref_nullable(lg_or_null: *mut DP_LayerGroup);
}
extern "C" {
    pub fn DP_layer_group_refcount(lg: *mut DP_LayerGroup) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_layer_group_transient(lg: *mut DP_LayerGroup) -> bool;
}
extern "C" {
    pub fn DP_layer_group_diff(
        lg: *mut DP_LayerGroup,
        lp: *mut DP_LayerProps,
        prev_lg: *mut DP_LayerGroup,
        prev_lp: *mut DP_LayerProps,
        diff: *mut DP_CanvasDiff,
        only_layer_id: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_layer_group_diff_mark(lg: *mut DP_LayerGroup, diff: *mut DP_CanvasDiff);
}
extern "C" {
    pub fn DP_layer_group_width(lg: *mut DP_LayerGroup) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_layer_group_height(lg: *mut DP_LayerGroup) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_layer_group_children_noinc(lg: *mut DP_LayerGroup) -> *mut DP_LayerList;
}
extern "C" {
    pub fn DP_layer_group_bounds(
        lg: *mut DP_LayerGroup,
        include_sublayers: bool,
        out_bounds: *mut DP_Rect,
    ) -> bool;
}
extern "C" {
    pub fn DP_layer_group_search_change_bounds(
        lg: *mut DP_LayerGroup,
        lp: *mut DP_LayerProps,
        context_id: ::std::os::raw::c_uint,
        out_x: *mut ::std::os::raw::c_int,
        out_y: *mut ::std::os::raw::c_int,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_layer_group_resize(
        lg: *mut DP_LayerGroup,
        context_id: ::std::os::raw::c_uint,
        top: ::std::os::raw::c_int,
        right: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
        left: ::std::os::raw::c_int,
    ) -> *mut DP_TransientLayerGroup;
}
extern "C" {
    pub fn DP_layer_group_to_pixels8(
        lg: *mut DP_LayerGroup,
        lp: *mut DP_LayerProps,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        reveal_censored: bool,
    ) -> *mut DP_Pixel8;
}
extern "C" {
    pub fn DP_layer_group_merge(
        lg: *mut DP_LayerGroup,
        lp: *mut DP_LayerProps,
        include_sublayers: bool,
    ) -> *mut DP_TransientLayerContent;
}
extern "C" {
    pub fn DP_layer_group_merge_to_flat_image(
        lg: *mut DP_LayerGroup,
        lp: *mut DP_LayerProps,
        tlc: *mut DP_TransientLayerContent,
        parent_opacity: u16,
        include_sublayers: bool,
        pass_through_censored: bool,
        clip: bool,
    );
}
extern "C" {
    pub fn DP_layer_group_flatten_tile(
        lg: *mut DP_LayerGroup,
        lp: *mut DP_LayerProps,
        tile_index: ::std::os::raw::c_int,
        include_sublayers: bool,
    ) -> *mut DP_TransientTile;
}
extern "C" {
    pub fn DP_layer_group_flatten_tile_to(
        lg: *mut DP_LayerGroup,
        lp: *mut DP_LayerProps,
        tile_index: ::std::os::raw::c_int,
        tt_or_null: *mut DP_TransientTile,
        parent_opacity: u16,
        parent_tint: DP_UPixel8,
        include_sublayers: bool,
        pass_through_censored: bool,
        clip: bool,
        vmc: *const DP_ViewModeContext,
    ) -> *mut DP_TransientTile;
}
extern "C" {
    pub fn DP_transient_layer_group_new(lg: *mut DP_LayerGroup) -> *mut DP_TransientLayerGroup;
}
extern "C" {
    pub fn DP_transient_layer_group_new_with_children_noinc(
        lg: *mut DP_LayerGroup,
        tll: *mut DP_TransientLayerList,
    ) -> *mut DP_TransientLayerGroup;
}
extern "C" {
    pub fn DP_transient_layer_group_new_init(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        reserve: ::std::os::raw::c_int,
    ) -> *mut DP_TransientLayerGroup;
}
extern "C" {
    pub fn DP_transient_layer_group_new_init_with_transient_children_noinc(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        tll: *mut DP_TransientLayerList,
    ) -> *mut DP_TransientLayerGroup;
}
extern "C" {
    pub fn DP_transient_layer_group_incref(
        tlg: *mut DP_TransientLayerGroup,
    ) -> *mut DP_TransientLayerGroup;
}
extern "C" {
    pub fn DP_transient_layer_group_decref(tlg: *mut DP_TransientLayerGroup);
}
extern "C" {
    pub fn DP_transient_layer_group_refcount(
        tlg: *mut DP_TransientLayerGroup,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_transient_layer_group_persist(tlg: *mut DP_TransientLayerGroup)
        -> *mut DP_LayerGroup;
}
extern "C" {
    pub fn DP_transient_layer_group_width(
        tlg: *mut DP_TransientLayerGroup,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_transient_layer_group_height(
        tlg: *mut DP_TransientLayerGroup,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_transient_layer_group_children_noinc(
        tlg: *mut DP_TransientLayerGroup,
    ) -> *mut DP_LayerList;
}
extern "C" {
    pub fn DP_transient_layer_group_transient_children(
        tlg: *mut DP_TransientLayerGroup,
        reserve: ::std::os::raw::c_int,
    ) -> *mut DP_TransientLayerList;
}
extern "C" {
    pub fn DP_layer_list_entry_is_group(lle: *mut DP_LayerListEntry) -> bool;
}
extern "C" {
    pub fn DP_layer_list_entry_transient(lle: *mut DP_LayerListEntry) -> bool;
}
extern "C" {
    pub fn DP_layer_list_entry_content_noinc(lle: *mut DP_LayerListEntry) -> *mut DP_LayerContent;
}
extern "C" {
    pub fn DP_layer_list_entry_transient_content_noinc(
        lle: *mut DP_LayerListEntry,
    ) -> *mut DP_TransientLayerContent;
}
extern "C" {
    pub fn DP_layer_list_entry_group_noinc(lle: *mut DP_LayerListEntry) -> *mut DP_LayerGroup;
}
extern "C" {
    pub fn DP_layer_list_entry_transient_group_noinc(
        lle: *mut DP_LayerListEntry,
    ) -> *mut DP_TransientLayerGroup;
}
extern "C" {
    pub fn DP_layer_list_entry_width(lle: *mut DP_LayerListEntry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_layer_list_entry_height(lle: *mut DP_LayerListEntry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_layer_list_new() -> *mut DP_LayerList;
}
extern "C" {
    pub fn DP_layer_list_incref(ll: *mut DP_LayerList) -> *mut DP_LayerList;
}
extern "C" {
    pub fn DP_layer_list_incref_nullable(ll_or_null: *mut DP_LayerList) -> *mut DP_LayerList;
}
extern "C" {
    pub fn DP_layer_list_decref(ll: *mut DP_LayerList);
}
extern "C" {
    pub fn DP_layer_list_decref_nullable(ll_or_null: *mut DP_LayerList);
}
extern "C" {
    pub fn DP_layer_list_refcount(ll: *mut DP_LayerList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_layer_list_transient(ll: *mut DP_LayerList) -> bool;
}
extern "C" {
    pub fn DP_layer_list_diff(
        ll: *mut DP_LayerList,
        lpl: *mut DP_LayerPropsList,
        prev_ll: *mut DP_LayerList,
        prev_lpl: *mut DP_LayerPropsList,
        diff: *mut DP_CanvasDiff,
        only_layer_id: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_layer_list_diff_mark(ll: *mut DP_LayerList, diff: *mut DP_CanvasDiff);
}
extern "C" {
    pub fn DP_layer_list_count(ll: *mut DP_LayerList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_layer_list_at_noinc(
        ll: *mut DP_LayerList,
        index: ::std::os::raw::c_int,
    ) -> *mut DP_LayerListEntry;
}
extern "C" {
    pub fn DP_layer_list_content_at_noinc(
        ll: *mut DP_LayerList,
        index: ::std::os::raw::c_int,
    ) -> *mut DP_LayerContent;
}
extern "C" {
    pub fn DP_layer_list_group_at_noinc(
        ll: *mut DP_LayerList,
        index: ::std::os::raw::c_int,
    ) -> *mut DP_LayerGroup;
}
extern "C" {
    pub fn DP_layer_list_resize(
        ll: *mut DP_LayerList,
        context_id: ::std::os::raw::c_uint,
        top: ::std::os::raw::c_int,
        right: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
        left: ::std::os::raw::c_int,
    ) -> *mut DP_TransientLayerList;
}
extern "C" {
    pub fn DP_layer_list_merge_to_flat_image(
        ll: *mut DP_LayerList,
        lpl: *mut DP_LayerPropsList,
        tlc: *mut DP_TransientLayerContent,
        parent_opacity: u16,
        include_sublayers: bool,
        reveal_censored: bool,
        pass_through_censored: bool,
        clip: bool,
    );
}
extern "C" {
    pub fn DP_layer_list_entry_flatten_tile_to(
        lle: *mut DP_LayerListEntry,
        lp: *mut DP_LayerProps,
        tile_index: ::std::os::raw::c_int,
        tt: *mut DP_TransientTile,
        parent_opacity: u16,
        parent_tint: DP_UPixel8,
        include_sublayers: bool,
        pass_through_censored: bool,
        clip: bool,
        vmc: *const DP_ViewModeContext,
    ) -> *mut DP_TransientTile;
}
extern "C" {
    pub fn DP_layer_list_flatten_clipping_tile_to(
        user: *mut ::std::os::raw::c_void,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: ::std::os::raw::c_int,
                arg3: *mut *mut DP_LayerListEntry,
                arg4: *mut *mut DP_LayerProps,
            ) -> DP_ViewModeContext,
        >,
        i: ::std::os::raw::c_int,
        clip_count: ::std::os::raw::c_int,
        tile_index: ::std::os::raw::c_int,
        tt_or_null: *mut DP_TransientTile,
        parent_opacity: u16,
        include_sublayers: bool,
        vmc: *const DP_ViewModeContext,
    ) -> *mut DP_TransientTile;
}
extern "C" {
    pub fn DP_layer_list_flatten_tile_to(
        ll: *mut DP_LayerList,
        lpl: *mut DP_LayerPropsList,
        tile_index: ::std::os::raw::c_int,
        tt_or_null: *mut DP_TransientTile,
        parent_opacity: u16,
        parent_tint: DP_UPixel8,
        include_sublayers: bool,
        pass_through_censored: bool,
        clip: bool,
        vmc: *const DP_ViewModeContext,
    ) -> *mut DP_TransientTile;
}
extern "C" {
    pub fn DP_transient_layer_list_new_init(
        reserve: ::std::os::raw::c_int,
    ) -> *mut DP_TransientLayerList;
}
extern "C" {
    pub fn DP_transient_layer_list_new(
        ll: *mut DP_LayerList,
        reserve: ::std::os::raw::c_int,
    ) -> *mut DP_TransientLayerList;
}
extern "C" {
    pub fn DP_transient_layer_list_reserve(
        tll: *mut DP_TransientLayerList,
        reserve: ::std::os::raw::c_int,
    ) -> *mut DP_TransientLayerList;
}
extern "C" {
    pub fn DP_transient_layer_list_incref(
        tll: *mut DP_TransientLayerList,
    ) -> *mut DP_TransientLayerList;
}
extern "C" {
    pub fn DP_transient_layer_list_decref(tll: *mut DP_TransientLayerList);
}
extern "C" {
    pub fn DP_transient_layer_list_refcount(
        tll: *mut DP_TransientLayerList,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_transient_layer_list_persist(tll: *mut DP_TransientLayerList) -> *mut DP_LayerList;
}
extern "C" {
    pub fn DP_transient_layer_list_count(tll: *mut DP_TransientLayerList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_transient_layer_list_at_noinc(
        tll: *mut DP_TransientLayerList,
        index: ::std::os::raw::c_int,
    ) -> *mut DP_LayerListEntry;
}
extern "C" {
    pub fn DP_transient_layer_list_transient_content_at_noinc(
        tll: *mut DP_TransientLayerList,
        index: ::std::os::raw::c_int,
    ) -> *mut DP_TransientLayerContent;
}
extern "C" {
    pub fn DP_transient_layer_list_transient_group_at_noinc(
        tll: *mut DP_TransientLayerList,
        index: ::std::os::raw::c_int,
    ) -> *mut DP_TransientLayerGroup;
}
extern "C" {
    pub fn DP_transient_layer_list_transient_group_at_with_children_noinc(
        tll: *mut DP_TransientLayerList,
        index: ::std::os::raw::c_int,
        transient_children: *mut DP_TransientLayerList,
    ) -> *mut DP_TransientLayerGroup;
}
extern "C" {
    pub fn DP_transient_layer_list_set_content_noinc(
        tll: *mut DP_TransientLayerList,
        lc: *mut DP_LayerContent,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_layer_list_set_content_inc(
        tll: *mut DP_TransientLayerList,
        lc: *mut DP_LayerContent,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_layer_list_set_group_noinc(
        tll: *mut DP_TransientLayerList,
        lg: *mut DP_LayerGroup,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_layer_list_set_group_inc(
        tll: *mut DP_TransientLayerList,
        lg: *mut DP_LayerGroup,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_layer_list_set_inc(
        tll: *mut DP_TransientLayerList,
        lle: *mut DP_LayerListEntry,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_layer_list_insert_content_inc(
        tll: *mut DP_TransientLayerList,
        lc: *mut DP_LayerContent,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_layer_list_insert_group_inc(
        tll: *mut DP_TransientLayerList,
        lg: *mut DP_LayerGroup,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_layer_list_set_transient_group_noinc(
        tll: *mut DP_TransientLayerList,
        tlg: *mut DP_TransientLayerGroup,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_layer_list_insert_transient_content_noinc(
        tll: *mut DP_TransientLayerList,
        tlc: *mut DP_TransientLayerContent,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_layer_list_insert_transient_group_noinc(
        tll: *mut DP_TransientLayerList,
        tlg: *mut DP_TransientLayerGroup,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_layer_list_delete_at(
        tll: *mut DP_TransientLayerList,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_layer_list_merge_at(
        tll: *mut DP_TransientLayerList,
        lp: *mut DP_LayerProps,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_layer_props_incref(lp: *mut DP_LayerProps) -> *mut DP_LayerProps;
}
extern "C" {
    pub fn DP_layer_props_incref_nullable(lp_or_null: *mut DP_LayerProps) -> *mut DP_LayerProps;
}
extern "C" {
    pub fn DP_layer_props_decref(lp: *mut DP_LayerProps);
}
extern "C" {
    pub fn DP_layer_props_decref_nullable(lp_or_null: *mut DP_LayerProps);
}
extern "C" {
    pub fn DP_layer_props_refcount(lp: *mut DP_LayerProps) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_layer_props_transient(lp: *mut DP_LayerProps) -> bool;
}
extern "C" {
    pub fn DP_layer_props_id(lp: *mut DP_LayerProps) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_layer_props_opacity(lp: *mut DP_LayerProps) -> u16;
}
extern "C" {
    pub fn DP_layer_props_sketch_opacity(lp: *mut DP_LayerProps) -> u16;
}
extern "C" {
    pub fn DP_layer_props_effective_opacity(lp: *mut DP_LayerProps) -> u16;
}
extern "C" {
    pub fn DP_layer_props_sketch_tint(lp: *mut DP_LayerProps) -> u32;
}
extern "C" {
    pub fn DP_layer_props_effective_tint(lp: *mut DP_LayerProps) -> u32;
}
extern "C" {
    pub fn DP_layer_props_blend_mode(lp: *mut DP_LayerProps) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_layer_props_hidden(lp: *mut DP_LayerProps) -> bool;
}
extern "C" {
    pub fn DP_layer_props_censored(lp: *mut DP_LayerProps) -> bool;
}
extern "C" {
    pub fn DP_layer_props_isolated(lp: *mut DP_LayerProps) -> bool;
}
extern "C" {
    pub fn DP_layer_props_clip(lp: *mut DP_LayerProps) -> bool;
}
extern "C" {
    pub fn DP_layer_props_visible(lp: *mut DP_LayerProps) -> bool;
}
extern "C" {
    pub fn DP_layer_props_title(
        lp: *mut DP_LayerProps,
        out_length: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_layer_props_children_noinc(lp: *mut DP_LayerProps) -> *mut DP_LayerPropsList;
}
extern "C" {
    pub fn DP_layer_props_differ(lp: *mut DP_LayerProps, prev_lp: *mut DP_LayerProps) -> bool;
}
extern "C" {
    pub fn DP_transient_layer_props_new(lp: *mut DP_LayerProps) -> *mut DP_TransientLayerProps;
}
extern "C" {
    pub fn DP_transient_layer_props_new_with_children_noinc(
        lp: *mut DP_LayerProps,
        tlpl: *mut DP_TransientLayerPropsList,
    ) -> *mut DP_TransientLayerProps;
}
extern "C" {
    pub fn DP_transient_layer_props_new_merge(
        lp: *mut DP_LayerProps,
    ) -> *mut DP_TransientLayerProps;
}
extern "C" {
    pub fn DP_transient_layer_props_new_init(
        layer_id: ::std::os::raw::c_int,
        group: bool,
    ) -> *mut DP_TransientLayerProps;
}
extern "C" {
    pub fn DP_transient_layer_props_new_init_with_transient_children_noinc(
        layer_id: ::std::os::raw::c_int,
        tlpl_or_null: *mut DP_TransientLayerPropsList,
    ) -> *mut DP_TransientLayerProps;
}
extern "C" {
    pub fn DP_transient_layer_props_incref(
        tlp: *mut DP_TransientLayerProps,
    ) -> *mut DP_TransientLayerProps;
}
extern "C" {
    pub fn DP_transient_layer_props_decref(tlp: *mut DP_TransientLayerProps);
}
extern "C" {
    pub fn DP_transient_layer_props_refcount(
        tlp: *mut DP_TransientLayerProps,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_transient_layer_props_persist(tlp: *mut DP_TransientLayerProps)
        -> *mut DP_LayerProps;
}
extern "C" {
    pub fn DP_transient_layer_props_id(tlp: *mut DP_TransientLayerProps) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_transient_layer_props_opacity(tlp: *mut DP_TransientLayerProps) -> u16;
}
extern "C" {
    pub fn DP_transient_layer_props_sketch_opacity(tlp: *mut DP_TransientLayerProps) -> u16;
}
extern "C" {
    pub fn DP_transient_layer_props_sketch_tint(tlp: *mut DP_TransientLayerProps) -> u32;
}
extern "C" {
    pub fn DP_transient_layer_props_blend_mode(
        tlp: *mut DP_TransientLayerProps,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_transient_layer_props_hidden(tlp: *mut DP_TransientLayerProps) -> bool;
}
extern "C" {
    pub fn DP_transient_layer_props_censored(tlp: *mut DP_TransientLayerProps) -> bool;
}
extern "C" {
    pub fn DP_transient_layer_props_isolated(tlp: *mut DP_TransientLayerProps) -> bool;
}
extern "C" {
    pub fn DP_transient_layer_props_clip(tlp: *mut DP_TransientLayerProps) -> bool;
}
extern "C" {
    pub fn DP_transient_layer_props_visible(tlp: *mut DP_TransientLayerProps) -> bool;
}
extern "C" {
    pub fn DP_transient_layer_props_title(
        tlp: *mut DP_TransientLayerProps,
        out_length: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_transient_layer_props_children_noinc(
        tlp: *mut DP_TransientLayerProps,
    ) -> *mut DP_LayerPropsList;
}
extern "C" {
    pub fn DP_transient_layer_props_transient_children(
        tlp: *mut DP_TransientLayerProps,
        reserve: ::std::os::raw::c_int,
    ) -> *mut DP_TransientLayerPropsList;
}
extern "C" {
    pub fn DP_transient_layer_props_id_set(
        tlp: *mut DP_TransientLayerProps,
        layer_id: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_layer_props_opacity_set(tlp: *mut DP_TransientLayerProps, opacity: u16);
}
extern "C" {
    pub fn DP_transient_layer_props_sketch_opacity_set(
        tlp: *mut DP_TransientLayerProps,
        sketch_opacity: u16,
    );
}
extern "C" {
    pub fn DP_transient_layer_props_sketch_tint_set(
        tlp: *mut DP_TransientLayerProps,
        sketch_tint: u32,
    );
}
extern "C" {
    pub fn DP_transient_layer_props_blend_mode_set(
        tlp: *mut DP_TransientLayerProps,
        blend_mode: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_layer_props_censored_set(tlp: *mut DP_TransientLayerProps, censored: bool);
}
extern "C" {
    pub fn DP_transient_layer_props_hidden_set(tlp: *mut DP_TransientLayerProps, hidden: bool);
}
extern "C" {
    pub fn DP_transient_layer_props_isolated_set(tlp: *mut DP_TransientLayerProps, isolated: bool);
}
extern "C" {
    pub fn DP_transient_layer_props_clip_set(tlp: *mut DP_TransientLayerProps, clip: bool);
}
extern "C" {
    pub fn DP_transient_layer_props_title_set(
        tlp: *mut DP_TransientLayerProps,
        title: *const ::std::os::raw::c_char,
        length: usize,
    );
}
extern "C" {
    pub fn DP_layer_props_list_new() -> *mut DP_LayerPropsList;
}
extern "C" {
    pub fn DP_layer_props_list_incref(lpl: *mut DP_LayerPropsList) -> *mut DP_LayerPropsList;
}
extern "C" {
    pub fn DP_layer_props_list_incref_nullable(
        lpl_or_null: *mut DP_LayerPropsList,
    ) -> *mut DP_LayerPropsList;
}
extern "C" {
    pub fn DP_layer_props_list_decref(lpl: *mut DP_LayerPropsList);
}
extern "C" {
    pub fn DP_layer_props_list_decref_nullable(lpl_or_null: *mut DP_LayerPropsList);
}
extern "C" {
    pub fn DP_layer_props_list_refcount(lpl: *mut DP_LayerPropsList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_layer_props_list_transient(lpl: *mut DP_LayerPropsList) -> bool;
}
extern "C" {
    pub fn DP_layer_props_list_count(lpl: *mut DP_LayerPropsList) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_layer_props_list_at_noinc(
        lpl: *mut DP_LayerPropsList,
        index: ::std::os::raw::c_int,
    ) -> *mut DP_LayerProps;
}
extern "C" {
    pub fn DP_layer_props_list_index_by_id(
        lpl: *mut DP_LayerPropsList,
        layer_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_layer_props_list_can_decrease_opacity(lpl: *mut DP_LayerPropsList) -> bool;
}
extern "C" {
    pub fn DP_transient_layer_props_list_new_init(
        reserve: ::std::os::raw::c_int,
    ) -> *mut DP_TransientLayerPropsList;
}
extern "C" {
    pub fn DP_transient_layer_props_list_new(
        lpl: *mut DP_LayerPropsList,
        reserve: ::std::os::raw::c_int,
    ) -> *mut DP_TransientLayerPropsList;
}
extern "C" {
    pub fn DP_transient_layer_props_list_reserve(
        tlpl: *mut DP_TransientLayerPropsList,
        reserve: ::std::os::raw::c_int,
    ) -> *mut DP_TransientLayerPropsList;
}
extern "C" {
    pub fn DP_transient_layer_props_list_incref(
        tlpl: *mut DP_TransientLayerPropsList,
    ) -> *mut DP_TransientLayerPropsList;
}
extern "C" {
    pub fn DP_transient_layer_props_list_decref(tlpl: *mut DP_TransientLayerPropsList);
}
extern "C" {
    pub fn DP_transient_layer_props_list_refcount(
        tlpl: *mut DP_TransientLayerPropsList,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_transient_layer_props_list_persist(
        tlpl: *mut DP_TransientLayerPropsList,
    ) -> *mut DP_LayerPropsList;
}
extern "C" {
    pub fn DP_transient_layer_props_list_count(
        tlpl: *mut DP_TransientLayerPropsList,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_transient_layer_props_list_at_noinc(
        tlpl: *mut DP_TransientLayerPropsList,
        index: ::std::os::raw::c_int,
    ) -> *mut DP_LayerProps;
}
extern "C" {
    pub fn DP_transient_layer_props_list_transient_at_noinc(
        tlpl: *mut DP_TransientLayerPropsList,
        index: ::std::os::raw::c_int,
    ) -> *mut DP_TransientLayerProps;
}
extern "C" {
    pub fn DP_transient_layer_props_list_transient_at_with_children_noinc(
        tlpl: *mut DP_TransientLayerPropsList,
        index: ::std::os::raw::c_int,
        transient_children: *mut DP_TransientLayerPropsList,
    ) -> *mut DP_TransientLayerProps;
}
extern "C" {
    pub fn DP_transient_layer_props_list_index_by_id(
        tlpl: *mut DP_TransientLayerPropsList,
        layer_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_transient_layer_props_list_set_noinc(
        tlpl: *mut DP_TransientLayerPropsList,
        lp: *mut DP_LayerProps,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_layer_props_list_set_inc(
        tlpl: *mut DP_TransientLayerPropsList,
        lp: *mut DP_LayerProps,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_layer_props_list_insert_inc(
        tlpl: *mut DP_TransientLayerPropsList,
        lp: *mut DP_LayerProps,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_layer_props_list_set_transient_noinc(
        tlpl: *mut DP_TransientLayerPropsList,
        tlp: *mut DP_TransientLayerProps,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_layer_props_list_insert_transient_noinc(
        tlpl: *mut DP_TransientLayerPropsList,
        tlp: *mut DP_TransientLayerProps,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_layer_props_list_delete_at(
        tlpl: *mut DP_TransientLayerPropsList,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_layer_props_list_merge_at(
        tlpl: *mut DP_TransientLayerPropsList,
        index: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_Quad {
    pub x1: ::std::os::raw::c_int,
    pub y1: ::std::os::raw::c_int,
    pub x2: ::std::os::raw::c_int,
    pub y2: ::std::os::raw::c_int,
    pub x3: ::std::os::raw::c_int,
    pub y3: ::std::os::raw::c_int,
    pub x4: ::std::os::raw::c_int,
    pub y4: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DP_Quad() {
    const UNINIT: ::std::mem::MaybeUninit<DP_Quad> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_Quad>(),
        32usize,
        concat!("Size of: ", stringify!(DP_Quad))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_Quad>(),
        4usize,
        concat!("Alignment of ", stringify!(DP_Quad))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_Quad),
            "::",
            stringify!(x1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_Quad),
            "::",
            stringify!(y1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_Quad),
            "::",
            stringify!(x2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y2) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_Quad),
            "::",
            stringify!(y2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_Quad),
            "::",
            stringify!(x3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y3) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_Quad),
            "::",
            stringify!(y3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x4) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_Quad),
            "::",
            stringify!(x4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y4) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_Quad),
            "::",
            stringify!(y4)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_Rect {
    pub x1: ::std::os::raw::c_int,
    pub y1: ::std::os::raw::c_int,
    pub x2: ::std::os::raw::c_int,
    pub y2: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DP_Rect() {
    const UNINIT: ::std::mem::MaybeUninit<DP_Rect> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_Rect>(),
        16usize,
        concat!("Size of: ", stringify!(DP_Rect))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_Rect>(),
        4usize,
        concat!("Alignment of ", stringify!(DP_Rect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_Rect),
            "::",
            stringify!(x1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_Rect),
            "::",
            stringify!(y1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_Rect),
            "::",
            stringify!(x2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y2) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_Rect),
            "::",
            stringify!(y2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_Vec2 {
    pub x: f64,
    pub y: f64,
}
#[test]
fn bindgen_test_layout_DP_Vec2() {
    const UNINIT: ::std::mem::MaybeUninit<DP_Vec2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_Vec2>(),
        16usize,
        concat!("Size of: ", stringify!(DP_Vec2))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_Vec2>(),
        8usize,
        concat!("Alignment of ", stringify!(DP_Vec2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_Vec2),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_Vec2),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_Transform {
    pub matrix: [f64; 9usize],
}
#[test]
fn bindgen_test_layout_DP_Transform() {
    const UNINIT: ::std::mem::MaybeUninit<DP_Transform> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_Transform>(),
        72usize,
        concat!("Size of: ", stringify!(DP_Transform))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_Transform>(),
        8usize,
        concat!("Alignment of ", stringify!(DP_Transform))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).matrix) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_Transform),
            "::",
            stringify!(matrix)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MaybeTransform {
    pub tf: DP_Transform,
    pub valid: bool,
}
#[test]
fn bindgen_test_layout_DP_MaybeTransform() {
    const UNINIT: ::std::mem::MaybeUninit<DP_MaybeTransform> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_MaybeTransform>(),
        80usize,
        concat!("Size of: ", stringify!(DP_MaybeTransform))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_MaybeTransform>(),
        8usize,
        concat!("Alignment of ", stringify!(DP_MaybeTransform))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_MaybeTransform),
            "::",
            stringify!(tf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valid) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_MaybeTransform),
            "::",
            stringify!(valid)
        )
    );
}
pub const DP_AFFECTED_DOMAIN_USER_ATTRS: DP_AffectedDomain = 0;
pub const DP_AFFECTED_DOMAIN_LAYER_ATTRS: DP_AffectedDomain = 1;
pub const DP_AFFECTED_DOMAIN_ANNOTATIONS: DP_AffectedDomain = 2;
pub const DP_AFFECTED_DOMAIN_PIXELS: DP_AffectedDomain = 3;
pub const DP_AFFECTED_DOMAIN_CANVAS_BACKGROUND: DP_AffectedDomain = 4;
pub const DP_AFFECTED_DOMAIN_DOCUMENT_METADATA: DP_AffectedDomain = 5;
pub const DP_AFFECTED_DOMAIN_TIMELINE: DP_AffectedDomain = 6;
pub const DP_AFFECTED_DOMAIN_SELECTIONS: DP_AffectedDomain = 7;
pub const DP_AFFECTED_DOMAIN_EVERYTHING: DP_AffectedDomain = 8;
pub type DP_AffectedDomain = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_AffectedArea {
    pub domain: DP_AffectedDomain,
    pub affected_id: ::std::os::raw::c_int,
    pub bounds: DP_Rect,
}
#[test]
fn bindgen_test_layout_DP_AffectedArea() {
    const UNINIT: ::std::mem::MaybeUninit<DP_AffectedArea> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_AffectedArea>(),
        24usize,
        concat!("Size of: ", stringify!(DP_AffectedArea))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_AffectedArea>(),
        4usize,
        concat!("Alignment of ", stringify!(DP_AffectedArea))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).domain) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_AffectedArea),
            "::",
            stringify!(domain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).affected_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_AffectedArea),
            "::",
            stringify!(affected_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bounds) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_AffectedArea),
            "::",
            stringify!(bounds)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_IndirectArea {
    pub layer_id: ::std::os::raw::c_int,
    pub bounds: DP_Rect,
}
#[test]
fn bindgen_test_layout_DP_IndirectArea() {
    const UNINIT: ::std::mem::MaybeUninit<DP_IndirectArea> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_IndirectArea>(),
        20usize,
        concat!("Size of: ", stringify!(DP_IndirectArea))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_IndirectArea>(),
        4usize,
        concat!("Alignment of ", stringify!(DP_IndirectArea))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layer_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_IndirectArea),
            "::",
            stringify!(layer_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bounds) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_IndirectArea),
            "::",
            stringify!(bounds)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_AffectedIndirectAreas {
    pub areas: [DP_IndirectArea; 256usize],
}
#[test]
fn bindgen_test_layout_DP_AffectedIndirectAreas() {
    const UNINIT: ::std::mem::MaybeUninit<DP_AffectedIndirectAreas> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_AffectedIndirectAreas>(),
        5120usize,
        concat!("Size of: ", stringify!(DP_AffectedIndirectAreas))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_AffectedIndirectAreas>(),
        4usize,
        concat!("Alignment of ", stringify!(DP_AffectedIndirectAreas))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).areas) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_AffectedIndirectAreas),
            "::",
            stringify!(areas)
        )
    );
}
extern "C" {
    pub fn DP_affected_area_make(
        msg: *mut DP_Message,
        aia_or_null: *mut DP_AffectedIndirectAreas,
    ) -> DP_AffectedArea;
}
extern "C" {
    pub fn DP_affected_area_concurrent_with(
        aa: *const DP_AffectedArea,
        other: *const DP_AffectedArea,
    ) -> bool;
}
extern "C" {
    pub fn DP_affected_area_in_bounds(
        aa: *const DP_AffectedArea,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn DP_affected_indirect_areas_clear(aia: *mut DP_AffectedIndirectAreas);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct json_value_t {
    _unused: [u8; 0],
}
pub type JSON_Value = json_value_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_Recorder {
    _unused: [u8; 0],
}
pub const DP_RECORDER_TYPE_BINARY: DP_RecorderType = 0;
pub const DP_RECORDER_TYPE_TEXT: DP_RecorderType = 1;
pub type DP_RecorderType = ::std::os::raw::c_uint;
pub type DP_RecorderGetTimeMsFn = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_longlong,
>;
extern "C" {
    pub fn DP_recorder_header_new(first: *const ::std::os::raw::c_char, ...) -> *mut JSON_Value;
}
extern "C" {
    pub fn DP_recorder_header_clone(header: *mut JSON_Value) -> *mut JSON_Value;
}
extern "C" {
    pub fn DP_recorder_new_inc(
        type_: DP_RecorderType,
        header: *mut JSON_Value,
        cs_or_null: *mut DP_CanvasState,
        get_time_fn: DP_RecorderGetTimeMsFn,
        get_time_user: *mut ::std::os::raw::c_void,
        output: *mut DP_Output,
    ) -> *mut DP_Recorder;
}
extern "C" {
    pub fn DP_recorder_free_join(r: *mut DP_Recorder, out_error: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn DP_recorder_type(r: *mut DP_Recorder) -> DP_RecorderType;
}
extern "C" {
    pub fn DP_recorder_header(r: *mut DP_Recorder) -> *mut JSON_Value;
}
extern "C" {
    pub fn DP_recorder_message_push_inc(r: *mut DP_Recorder, msg: *mut DP_Message) -> bool;
}
extern "C" {
    pub fn DP_recorder_message_push_noinc(r: *mut DP_Recorder, msg: *mut DP_Message) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_UserCursor {
    pub flags: ::std::os::raw::c_uint,
    pub context_id: ::std::os::raw::c_uint,
    pub layer_id: ::std::os::raw::c_int,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DP_UserCursor() {
    const UNINIT: ::std::mem::MaybeUninit<DP_UserCursor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_UserCursor>(),
        20usize,
        concat!("Size of: ", stringify!(DP_UserCursor))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_UserCursor>(),
        4usize,
        concat!("Alignment of ", stringify!(DP_UserCursor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UserCursor),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UserCursor),
            "::",
            stringify!(context_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layer_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UserCursor),
            "::",
            stringify!(layer_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UserCursor),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UserCursor),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_UserCursorState {
    pub flags: u8,
    pub smooth_index: u8,
    pub smooth_count: u8,
    pub layer_id: ::std::os::raw::c_int,
    pub last_r2: f32,
    pub xs: [::std::os::raw::c_int; 8usize],
    pub ys: [::std::os::raw::c_int; 8usize],
}
#[test]
fn bindgen_test_layout_DP_UserCursorState() {
    const UNINIT: ::std::mem::MaybeUninit<DP_UserCursorState> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_UserCursorState>(),
        76usize,
        concat!("Size of: ", stringify!(DP_UserCursorState))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_UserCursorState>(),
        4usize,
        concat!("Alignment of ", stringify!(DP_UserCursorState))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UserCursorState),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).smooth_index) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UserCursorState),
            "::",
            stringify!(smooth_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).smooth_count) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UserCursorState),
            "::",
            stringify!(smooth_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layer_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UserCursorState),
            "::",
            stringify!(layer_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_r2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UserCursorState),
            "::",
            stringify!(last_r2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xs) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UserCursorState),
            "::",
            stringify!(xs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ys) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UserCursorState),
            "::",
            stringify!(ys)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_UserCursors {
    pub count: ::std::os::raw::c_int,
    pub user_ids: [u8; 256usize],
    pub active_by_user: [bool; 256usize],
    pub states: [DP_UserCursorState; 256usize],
}
#[test]
fn bindgen_test_layout_DP_UserCursors() {
    const UNINIT: ::std::mem::MaybeUninit<DP_UserCursors> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_UserCursors>(),
        19972usize,
        concat!("Size of: ", stringify!(DP_UserCursors))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_UserCursors>(),
        4usize,
        concat!("Alignment of ", stringify!(DP_UserCursors))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UserCursors),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_ids) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UserCursors),
            "::",
            stringify!(user_ids)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active_by_user) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UserCursors),
            "::",
            stringify!(active_by_user)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).states) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UserCursors),
            "::",
            stringify!(states)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_EffectiveUserCursorState {
    pub flags: ::std::os::raw::c_uint,
    pub layer_id: ::std::os::raw::c_int,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DP_EffectiveUserCursorState() {
    const UNINIT: ::std::mem::MaybeUninit<DP_EffectiveUserCursorState> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_EffectiveUserCursorState>(),
        16usize,
        concat!("Size of: ", stringify!(DP_EffectiveUserCursorState))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_EffectiveUserCursorState>(),
        4usize,
        concat!("Alignment of ", stringify!(DP_EffectiveUserCursorState))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_EffectiveUserCursorState),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layer_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_EffectiveUserCursorState),
            "::",
            stringify!(layer_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_EffectiveUserCursorState),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_EffectiveUserCursorState),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_EffectiveUserCursors {
    pub count: ::std::os::raw::c_int,
    pub user_ids: [u8; 256usize],
    pub active_by_user: [bool; 256usize],
    pub states: [DP_EffectiveUserCursorState; 256usize],
}
#[test]
fn bindgen_test_layout_DP_EffectiveUserCursors() {
    const UNINIT: ::std::mem::MaybeUninit<DP_EffectiveUserCursors> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_EffectiveUserCursors>(),
        4612usize,
        concat!("Size of: ", stringify!(DP_EffectiveUserCursors))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_EffectiveUserCursors>(),
        4usize,
        concat!("Alignment of ", stringify!(DP_EffectiveUserCursors))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_EffectiveUserCursors),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_ids) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_EffectiveUserCursors),
            "::",
            stringify!(user_ids)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active_by_user) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_EffectiveUserCursors),
            "::",
            stringify!(active_by_user)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).states) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_EffectiveUserCursors),
            "::",
            stringify!(states)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_UserCursorBuffer {
    pub count: ::std::os::raw::c_int,
    pub cursors: [DP_UserCursor; 256usize],
}
#[test]
fn bindgen_test_layout_DP_UserCursorBuffer() {
    const UNINIT: ::std::mem::MaybeUninit<DP_UserCursorBuffer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_UserCursorBuffer>(),
        5124usize,
        concat!("Size of: ", stringify!(DP_UserCursorBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_UserCursorBuffer>(),
        4usize,
        concat!("Alignment of ", stringify!(DP_UserCursorBuffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UserCursorBuffer),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cursors) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UserCursorBuffer),
            "::",
            stringify!(cursors)
        )
    );
}
extern "C" {
    pub fn DP_user_cursors_init(ucs: *mut DP_UserCursors);
}
extern "C" {
    pub fn DP_user_cursors_activate(ucs: *mut DP_UserCursors, context_id: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn DP_user_cursors_move(
        ucs: *mut DP_UserCursors,
        context_id: ::std::os::raw::c_uint,
        layer_id: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_user_cursors_move_smooth(
        ucs: *mut DP_UserCursors,
        context_id: ::std::os::raw::c_uint,
        layer_id: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        radius: f32,
    );
}
extern "C" {
    pub fn DP_user_cursors_pen_up(ucs: *mut DP_UserCursors, context_id: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn DP_effective_user_cursors_init(eucs: *mut DP_EffectiveUserCursors);
}
extern "C" {
    pub fn DP_effective_user_cursors_apply(
        eucs: *mut DP_EffectiveUserCursors,
        ucs: *mut DP_UserCursors,
    );
}
extern "C" {
    pub fn DP_effective_user_cursors_retrieve(
        eucs: *mut DP_EffectiveUserCursors,
        ucb: *mut DP_UserCursorBuffer,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_CanvasHistory {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_CanvasHistorySnapshot {
    _unused: [u8; 0],
}
pub const DP_UNDO_DONE: DP_Undo = 0;
pub const DP_UNDO_UNDONE: DP_Undo = 1;
pub const DP_UNDO_GONE: DP_Undo = 2;
pub type DP_Undo = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_CanvasHistoryEntry {
    pub undo: DP_Undo,
    pub msg: *mut DP_Message,
    pub state: *mut DP_CanvasState,
}
#[test]
fn bindgen_test_layout_DP_CanvasHistoryEntry() {
    const UNINIT: ::std::mem::MaybeUninit<DP_CanvasHistoryEntry> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_CanvasHistoryEntry>(),
        24usize,
        concat!("Size of: ", stringify!(DP_CanvasHistoryEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_CanvasHistoryEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(DP_CanvasHistoryEntry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).undo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_CanvasHistoryEntry),
            "::",
            stringify!(undo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_CanvasHistoryEntry),
            "::",
            stringify!(msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_CanvasHistoryEntry),
            "::",
            stringify!(state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_ForkEntry {
    pub msg: *mut DP_Message,
    pub aa: DP_AffectedArea,
}
#[test]
fn bindgen_test_layout_DP_ForkEntry() {
    const UNINIT: ::std::mem::MaybeUninit<DP_ForkEntry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_ForkEntry>(),
        32usize,
        concat!("Size of: ", stringify!(DP_ForkEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_ForkEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(DP_ForkEntry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_ForkEntry),
            "::",
            stringify!(msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aa) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_ForkEntry),
            "::",
            stringify!(aa)
        )
    );
}
pub type DP_CanvasHistorySavePointFn = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        cs: *mut DP_CanvasState,
        snapshot_requested: bool,
    ),
>;
pub type DP_CanvasHistorySoftResetFn = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        context_id: ::std::os::raw::c_uint,
        cs: *mut DP_CanvasState,
    ),
>;
pub type DP_CanvasHistoryAcceptResetStateFn = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, cs: *mut DP_CanvasState) -> bool,
>;
pub type DP_CanvasHistoryAcceptResetMessageFn = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, msg: *mut DP_Message) -> bool,
>;
pub const DP_DUMP_REMOTE_MESSAGE: DP_DumpType = 0;
pub const DP_DUMP_REMOTE_MESSAGE_LOCAL_DRAWING_IN_PROGRESS: DP_DumpType = 1;
pub const DP_DUMP_LOCAL_MESSAGE: DP_DumpType = 2;
pub const DP_DUMP_REMOTE_MULTIDAB: DP_DumpType = 3;
pub const DP_DUMP_REMOTE_MULTIDAB_LOCAL_DRAWING_IN_PROGRESS: DP_DumpType = 4;
pub const DP_DUMP_LOCAL_MULTIDAB: DP_DumpType = 5;
pub const DP_DUMP_RESET: DP_DumpType = 6;
pub const DP_DUMP_SOFT_RESET: DP_DumpType = 7;
pub const DP_DUMP_CLEANUP: DP_DumpType = 8;
pub const DP_DUMP_UNDO_DEPTH_LIMIT: DP_DumpType = 9;
pub type DP_DumpType = ::std::os::raw::c_uint;
extern "C" {
    pub fn DP_canvas_history_new(
        save_point_fn: DP_CanvasHistorySavePointFn,
        save_point_user: *mut ::std::os::raw::c_void,
        want_dump: bool,
        dump_dir: *const ::std::os::raw::c_char,
    ) -> *mut DP_CanvasHistory;
}
extern "C" {
    pub fn DP_canvas_history_new_inc(
        cs_or_null: *mut DP_CanvasState,
        save_point_fn: DP_CanvasHistorySavePointFn,
        save_point_user: *mut ::std::os::raw::c_void,
        want_dump: bool,
        dump_dir: *const ::std::os::raw::c_char,
    ) -> *mut DP_CanvasHistory;
}
extern "C" {
    pub fn DP_canvas_history_free(ch: *mut DP_CanvasHistory);
}
extern "C" {
    pub fn DP_canvas_history_local_drawing_in_progress_set(
        ch: *mut DP_CanvasHistory,
        local_drawing_in_progress: bool,
    );
}
extern "C" {
    pub fn DP_canvas_history_want_dump(ch: *mut DP_CanvasHistory) -> bool;
}
extern "C" {
    pub fn DP_canvas_history_want_dump_set(ch: *mut DP_CanvasHistory, want_dump: bool);
}
extern "C" {
    pub fn DP_canvas_history_get(ch: *mut DP_CanvasHistory) -> *mut DP_CanvasState;
}
extern "C" {
    pub fn DP_canvas_history_compare_and_get(
        ch: *mut DP_CanvasHistory,
        prev: *mut DP_CanvasState,
        out_user_cursors: *mut DP_UserCursorBuffer,
    ) -> *mut DP_CanvasState;
}
extern "C" {
    pub fn DP_canvas_history_reset(ch: *mut DP_CanvasHistory);
}
extern "C" {
    pub fn DP_canvas_history_reset_to_state_noinc(
        ch: *mut DP_CanvasHistory,
        cs: *mut DP_CanvasState,
    );
}
extern "C" {
    pub fn DP_canvas_history_soft_reset(
        ch: *mut DP_CanvasHistory,
        dc: *mut DP_DrawContext,
        context_id: ::std::os::raw::c_uint,
        fn_: DP_CanvasHistorySoftResetFn,
        user: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn DP_canvas_history_stream_start_state_inc(
        ch: *mut DP_CanvasHistory,
    ) -> *mut DP_CanvasState;
}
extern "C" {
    pub fn DP_canvas_history_undo_depth_limit(ch: *mut DP_CanvasHistory) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_canvas_history_undo_depth_limit_set(
        ch: *mut DP_CanvasHistory,
        dc: *mut DP_DrawContext,
        undo_depth_limit: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_canvas_history_save_point_make(ch: *mut DP_CanvasHistory) -> bool;
}
extern "C" {
    pub fn DP_canvas_history_cleanup(
        ch: *mut DP_CanvasHistory,
        dc: *mut DP_DrawContext,
        push_message: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: *mut DP_Message),
        >,
        user: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn DP_canvas_history_local_fork_clear(
        ch: *mut DP_CanvasHistory,
        dc: *mut DP_DrawContext,
    ) -> bool;
}
extern "C" {
    pub fn DP_canvas_history_handle(
        ch: *mut DP_CanvasHistory,
        dc: *mut DP_DrawContext,
        msg: *mut DP_Message,
    ) -> bool;
}
extern "C" {
    pub fn DP_canvas_history_handle_local(
        ch: *mut DP_CanvasHistory,
        dc: *mut DP_DrawContext,
        msg: *mut DP_Message,
    ) -> bool;
}
extern "C" {
    pub fn DP_canvas_history_handle_multidab_dec(
        ch: *mut DP_CanvasHistory,
        dc: *mut DP_DrawContext,
        count: ::std::os::raw::c_int,
        msgs: *mut *mut DP_Message,
    );
}
extern "C" {
    pub fn DP_canvas_history_handle_local_multidab_dec(
        ch: *mut DP_CanvasHistory,
        dc: *mut DP_DrawContext,
        count: ::std::os::raw::c_int,
        msgs: *mut *mut DP_Message,
    );
}
extern "C" {
    pub fn DP_canvas_history_reset_image_new(
        ch: *mut DP_CanvasHistory,
        accept_state: DP_CanvasHistoryAcceptResetStateFn,
        accept_message: DP_CanvasHistoryAcceptResetMessageFn,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn DP_canvas_history_recorder_new(
        ch: *mut DP_CanvasHistory,
        type_: DP_RecorderType,
        header: *mut JSON_Value,
        get_time_fn: DP_RecorderGetTimeMsFn,
        get_time_user: *mut ::std::os::raw::c_void,
        output: *mut DP_Output,
    ) -> *mut DP_Recorder;
}
extern "C" {
    pub fn DP_canvas_history_snapshot_new(
        ch: *mut DP_CanvasHistory,
    ) -> *mut DP_CanvasHistorySnapshot;
}
extern "C" {
    pub fn DP_canvas_history_snapshot_incref(
        chs: *mut DP_CanvasHistorySnapshot,
    ) -> *mut DP_CanvasHistorySnapshot;
}
extern "C" {
    pub fn DP_canvas_history_snapshot_incref_nullable(
        chs_or_null: *mut DP_CanvasHistorySnapshot,
    ) -> *mut DP_CanvasHistorySnapshot;
}
extern "C" {
    pub fn DP_canvas_history_snapshot_decref(chs: *mut DP_CanvasHistorySnapshot);
}
extern "C" {
    pub fn DP_canvas_history_snapshot_decref_nullable(chs_or_null: *mut DP_CanvasHistorySnapshot);
}
extern "C" {
    pub fn DP_canvas_history_snapshot_refs(
        chs: *mut DP_CanvasHistorySnapshot,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_canvas_history_snapshot_history_undo_depth_limit(
        chs: *mut DP_CanvasHistorySnapshot,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_canvas_history_snapshot_history_offset(
        chs: *mut DP_CanvasHistorySnapshot,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_canvas_history_snapshot_history_count(
        chs: *mut DP_CanvasHistorySnapshot,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_canvas_history_snapshot_history_entry_at(
        chs: *mut DP_CanvasHistorySnapshot,
        index: ::std::os::raw::c_int,
    ) -> *const DP_CanvasHistoryEntry;
}
extern "C" {
    pub fn DP_canvas_history_snapshot_fork_start(
        chs: *mut DP_CanvasHistorySnapshot,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_canvas_history_snapshot_fork_fallbehind(
        chs: *mut DP_CanvasHistorySnapshot,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_canvas_history_snapshot_fork_count(
        chs: *mut DP_CanvasHistorySnapshot,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_canvas_history_snapshot_fork_entry_at(
        chs: *mut DP_CanvasHistorySnapshot,
        index: ::std::os::raw::c_int,
    ) -> *const DP_ForkEntry;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_LocalState {
    _unused: [u8; 0],
}
pub const DP_VIEW_MODE_NORMAL: DP_ViewMode = 0;
pub const DP_VIEW_MODE_LAYER: DP_ViewMode = 1;
pub const DP_VIEW_MODE_GROUP: DP_ViewMode = 2;
pub const DP_VIEW_MODE_FRAME: DP_ViewMode = 3;
pub type DP_ViewMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_ViewModeTrack {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_ViewModeBuffer {
    pub capacity: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
    pub tracks: *mut DP_ViewModeTrack,
}
#[test]
fn bindgen_test_layout_DP_ViewModeBuffer() {
    const UNINIT: ::std::mem::MaybeUninit<DP_ViewModeBuffer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_ViewModeBuffer>(),
        16usize,
        concat!("Size of: ", stringify!(DP_ViewModeBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_ViewModeBuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(DP_ViewModeBuffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_ViewModeBuffer),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_ViewModeBuffer),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tracks) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_ViewModeBuffer),
            "::",
            stringify!(tracks)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_ViewModeCallback {
    pub is_visible: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: *mut DP_LayerProps) -> bool,
    >,
    pub user: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_DP_ViewModeCallback() {
    const UNINIT: ::std::mem::MaybeUninit<DP_ViewModeCallback> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_ViewModeCallback>(),
        16usize,
        concat!("Size of: ", stringify!(DP_ViewModeCallback))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_ViewModeCallback>(),
        8usize,
        concat!("Alignment of ", stringify!(DP_ViewModeCallback))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_visible) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_ViewModeCallback),
            "::",
            stringify!(is_visible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_ViewModeCallback),
            "::",
            stringify!(user)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DP_ViewModeFilter {
    pub internal_type: ::std::os::raw::c_int,
    pub __bindgen_anon_1: DP_ViewModeFilter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union DP_ViewModeFilter__bindgen_ty_1 {
    pub layer_id: ::std::os::raw::c_int,
    pub vmb: *mut DP_ViewModeBuffer,
    pub callback: *mut DP_ViewModeCallback,
}
#[test]
fn bindgen_test_layout_DP_ViewModeFilter__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<DP_ViewModeFilter__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_ViewModeFilter__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(DP_ViewModeFilter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_ViewModeFilter__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(DP_ViewModeFilter__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layer_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_ViewModeFilter__bindgen_ty_1),
            "::",
            stringify!(layer_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vmb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_ViewModeFilter__bindgen_ty_1),
            "::",
            stringify!(vmb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_ViewModeFilter__bindgen_ty_1),
            "::",
            stringify!(callback)
        )
    );
}
#[test]
fn bindgen_test_layout_DP_ViewModeFilter() {
    const UNINIT: ::std::mem::MaybeUninit<DP_ViewModeFilter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_ViewModeFilter>(),
        16usize,
        concat!("Size of: ", stringify!(DP_ViewModeFilter))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_ViewModeFilter>(),
        8usize,
        concat!("Alignment of ", stringify!(DP_ViewModeFilter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internal_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_ViewModeFilter),
            "::",
            stringify!(internal_type)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DP_ViewModeContext {
    pub internal_type: ::std::os::raw::c_int,
    pub __bindgen_anon_1: DP_ViewModeContext__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union DP_ViewModeContext__bindgen_ty_1 {
    pub layer_id: ::std::os::raw::c_int,
    pub frame: DP_ViewModeContext__bindgen_ty_1__bindgen_ty_1,
    pub callback: *mut DP_ViewModeCallback,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_ViewModeContext__bindgen_ty_1__bindgen_ty_1 {
    pub track_index: ::std::os::raw::c_int,
    pub vmb: *mut DP_ViewModeBuffer,
}
#[test]
fn bindgen_test_layout_DP_ViewModeContext__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<DP_ViewModeContext__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_ViewModeContext__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(DP_ViewModeContext__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<DP_ViewModeContext__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(DP_ViewModeContext__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).track_index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_ViewModeContext__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(track_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vmb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_ViewModeContext__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(vmb)
        )
    );
}
#[test]
fn bindgen_test_layout_DP_ViewModeContext__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<DP_ViewModeContext__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_ViewModeContext__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(DP_ViewModeContext__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_ViewModeContext__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(DP_ViewModeContext__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layer_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_ViewModeContext__bindgen_ty_1),
            "::",
            stringify!(layer_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_ViewModeContext__bindgen_ty_1),
            "::",
            stringify!(frame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_ViewModeContext__bindgen_ty_1),
            "::",
            stringify!(callback)
        )
    );
}
#[test]
fn bindgen_test_layout_DP_ViewModeContext() {
    const UNINIT: ::std::mem::MaybeUninit<DP_ViewModeContext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_ViewModeContext>(),
        24usize,
        concat!("Size of: ", stringify!(DP_ViewModeContext))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_ViewModeContext>(),
        8usize,
        concat!("Alignment of ", stringify!(DP_ViewModeContext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internal_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_ViewModeContext),
            "::",
            stringify!(internal_type)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DP_ViewModeContextRoot {
    pub vmf: DP_ViewModeFilter,
    pub count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DP_ViewModeContextRoot() {
    const UNINIT: ::std::mem::MaybeUninit<DP_ViewModeContextRoot> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_ViewModeContextRoot>(),
        24usize,
        concat!("Size of: ", stringify!(DP_ViewModeContextRoot))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_ViewModeContextRoot>(),
        8usize,
        concat!("Alignment of ", stringify!(DP_ViewModeContextRoot))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vmf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_ViewModeContextRoot),
            "::",
            stringify!(vmf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_ViewModeContextRoot),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DP_ViewModeResult {
    pub visible: bool,
    pub isolated: bool,
    pub opacity: u16,
    pub blend_mode: ::std::os::raw::c_int,
    pub tint: DP_UPixel8,
    pub child_vmc: DP_ViewModeContext,
}
#[test]
fn bindgen_test_layout_DP_ViewModeResult() {
    const UNINIT: ::std::mem::MaybeUninit<DP_ViewModeResult> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_ViewModeResult>(),
        40usize,
        concat!("Size of: ", stringify!(DP_ViewModeResult))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_ViewModeResult>(),
        8usize,
        concat!("Alignment of ", stringify!(DP_ViewModeResult))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).visible) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_ViewModeResult),
            "::",
            stringify!(visible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isolated) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_ViewModeResult),
            "::",
            stringify!(isolated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opacity) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_ViewModeResult),
            "::",
            stringify!(opacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blend_mode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_ViewModeResult),
            "::",
            stringify!(blend_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tint) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_ViewModeResult),
            "::",
            stringify!(tint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).child_vmc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_ViewModeResult),
            "::",
            stringify!(child_vmc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_ViewModePick {
    pub context_id: ::std::os::raw::c_uint,
    pub layer_id: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DP_ViewModePick() {
    const UNINIT: ::std::mem::MaybeUninit<DP_ViewModePick> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_ViewModePick>(),
        8usize,
        concat!("Size of: ", stringify!(DP_ViewModePick))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_ViewModePick>(),
        4usize,
        concat!("Alignment of ", stringify!(DP_ViewModePick))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_ViewModePick),
            "::",
            stringify!(context_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layer_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_ViewModePick),
            "::",
            stringify!(layer_id)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DP_OnionSkin {
    pub opacity: u16,
    pub tint: DP_UPixel8,
}
#[test]
fn bindgen_test_layout_DP_OnionSkin() {
    const UNINIT: ::std::mem::MaybeUninit<DP_OnionSkin> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_OnionSkin>(),
        8usize,
        concat!("Size of: ", stringify!(DP_OnionSkin))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_OnionSkin>(),
        4usize,
        concat!("Alignment of ", stringify!(DP_OnionSkin))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opacity) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_OnionSkin),
            "::",
            stringify!(opacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tint) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_OnionSkin),
            "::",
            stringify!(tint)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_OnionSkins {
    _unused: [u8; 0],
}
pub type DP_AddVisibleLayerFn = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        layer_id: ::std::os::raw::c_int,
        visible: bool,
    ),
>;
extern "C" {
    pub fn DP_view_mode_buffer_init(vmb: *mut DP_ViewModeBuffer);
}
extern "C" {
    pub fn DP_view_mode_buffer_dispose(vmb: *mut DP_ViewModeBuffer);
}
extern "C" {
    pub fn DP_view_mode_filter_make_default() -> DP_ViewModeFilter;
}
extern "C" {
    pub fn DP_view_mode_filter_make_frame_render(
        vmb: *mut DP_ViewModeBuffer,
        cs: *mut DP_CanvasState,
        frame_index: ::std::os::raw::c_int,
    ) -> DP_ViewModeFilter;
}
extern "C" {
    pub fn DP_view_mode_filter_make(
        vmb: *mut DP_ViewModeBuffer,
        vm: DP_ViewMode,
        cs: *mut DP_CanvasState,
        layer_id: ::std::os::raw::c_int,
        frame_index: ::std::os::raw::c_int,
        oss: *const DP_OnionSkins,
    ) -> DP_ViewModeFilter;
}
extern "C" {
    pub fn DP_view_mode_filter_make_from_active(
        vmb: *mut DP_ViewModeBuffer,
        vm: DP_ViewMode,
        cs: *mut DP_CanvasState,
        active: ::std::os::raw::c_int,
        oss: *const DP_OnionSkins,
    ) -> DP_ViewModeFilter;
}
extern "C" {
    pub fn DP_view_mode_filter_make_callback(
        callback: *mut DP_ViewModeCallback,
    ) -> DP_ViewModeFilter;
}
extern "C" {
    pub fn DP_view_mode_filter_excludes_everything(vmf: *const DP_ViewModeFilter) -> bool;
}
extern "C" {
    pub fn DP_view_mode_context_root_init(
        vmf: *const DP_ViewModeFilter,
        cs: *mut DP_CanvasState,
    ) -> DP_ViewModeContextRoot;
}
extern "C" {
    pub fn DP_view_mode_context_make_default() -> DP_ViewModeContext;
}
extern "C" {
    pub fn DP_view_mode_context_excludes_everything(vmc: *const DP_ViewModeContext) -> bool;
}
extern "C" {
    pub fn DP_view_mode_context_root_at(
        vmcr: *const DP_ViewModeContextRoot,
        cs: *mut DP_CanvasState,
        index: ::std::os::raw::c_int,
        out_lle: *mut *mut DP_LayerListEntry,
        out_lp: *mut *mut DP_LayerProps,
        out_os: *mut *const DP_OnionSkin,
        out_parent_opacity: *mut u16,
        out_parent_tint: *mut DP_UPixel8,
        clip_count: *mut ::std::os::raw::c_int,
    ) -> DP_ViewModeContext;
}
extern "C" {
    pub fn DP_view_mode_context_root_at_clip(
        vmcr: *const DP_ViewModeContextRoot,
        cs: *mut DP_CanvasState,
        index: ::std::os::raw::c_int,
        out_lle: *mut *mut DP_LayerListEntry,
        out_lp: *mut *mut DP_LayerProps,
    ) -> DP_ViewModeContext;
}
extern "C" {
    pub fn DP_view_mode_context_apply(
        vmc: *const DP_ViewModeContext,
        lp: *mut DP_LayerProps,
        parent_opacity: u16,
    ) -> DP_ViewModeResult;
}
extern "C" {
    pub fn DP_view_mode_get_layers_visible_in_frame(
        cs: *mut DP_CanvasState,
        ls: *mut DP_LocalState,
        fn_: DP_AddVisibleLayerFn,
        user: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn DP_view_mode_get_layers_visible_in_track_frame(
        cs: *mut DP_CanvasState,
        track_id: ::std::os::raw::c_int,
        frame_index: ::std::os::raw::c_int,
        fn_: DP_AddVisibleLayerFn,
        user: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn DP_view_mode_pick(
        cs: *mut DP_CanvasState,
        ls: *mut DP_LocalState,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> DP_ViewModePick;
}
extern "C" {
    pub fn DP_onion_skins_new(
        wrap: bool,
        count_below: ::std::os::raw::c_int,
        count_above: ::std::os::raw::c_int,
    ) -> *mut DP_OnionSkins;
}
extern "C" {
    pub fn DP_onion_skins_new_clone(oss: *mut DP_OnionSkins) -> *mut DP_OnionSkins;
}
extern "C" {
    pub fn DP_onion_skins_new_clone_nullable(oss_or_null: *mut DP_OnionSkins)
        -> *mut DP_OnionSkins;
}
extern "C" {
    pub fn DP_onion_skins_free(oss: *mut DP_OnionSkins);
}
extern "C" {
    pub fn DP_onion_skins_equal(a: *mut DP_OnionSkins, b: *mut DP_OnionSkins) -> bool;
}
extern "C" {
    pub fn DP_onion_skins_wrap(oss: *const DP_OnionSkins) -> bool;
}
extern "C" {
    pub fn DP_onion_skins_count_below(oss: *const DP_OnionSkins) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_onion_skins_count_above(oss: *const DP_OnionSkins) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_onion_skins_skin_below_at(
        oss: *const DP_OnionSkins,
        index: ::std::os::raw::c_int,
    ) -> *const DP_OnionSkin;
}
extern "C" {
    pub fn DP_onion_skins_skin_above_at(
        oss: *const DP_OnionSkins,
        index: ::std::os::raw::c_int,
    ) -> *const DP_OnionSkin;
}
extern "C" {
    pub fn DP_onion_skins_skin_below_at_set(
        oss: *mut DP_OnionSkins,
        index: ::std::os::raw::c_int,
        opacity: u16,
        tint: DP_UPixel8,
    );
}
extern "C" {
    pub fn DP_onion_skins_skin_above_at_set(
        oss: *mut DP_OnionSkins,
        index: ::std::os::raw::c_int,
        opacity: u16,
        tint: DP_UPixel8,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgLocalChange {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_LocalLayerState {
    pub layer_id: ::std::os::raw::c_int,
    pub hidden: bool,
    pub sketch_opacity: u16,
    pub sketch_tint: u32,
}
#[test]
fn bindgen_test_layout_DP_LocalLayerState() {
    const UNINIT: ::std::mem::MaybeUninit<DP_LocalLayerState> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_LocalLayerState>(),
        12usize,
        concat!("Size of: ", stringify!(DP_LocalLayerState))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_LocalLayerState>(),
        4usize,
        concat!("Alignment of ", stringify!(DP_LocalLayerState))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layer_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_LocalLayerState),
            "::",
            stringify!(layer_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hidden) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_LocalLayerState),
            "::",
            stringify!(hidden)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sketch_opacity) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_LocalLayerState),
            "::",
            stringify!(sketch_opacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sketch_tint) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_LocalLayerState),
            "::",
            stringify!(sketch_tint)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_LocalTrackState {
    pub track_id: ::std::os::raw::c_int,
    pub hidden: bool,
    pub onion_skin: bool,
}
#[test]
fn bindgen_test_layout_DP_LocalTrackState() {
    const UNINIT: ::std::mem::MaybeUninit<DP_LocalTrackState> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_LocalTrackState>(),
        8usize,
        concat!("Size of: ", stringify!(DP_LocalTrackState))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_LocalTrackState>(),
        4usize,
        concat!("Alignment of ", stringify!(DP_LocalTrackState))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).track_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_LocalTrackState),
            "::",
            stringify!(track_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hidden) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_LocalTrackState),
            "::",
            stringify!(hidden)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onion_skin) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_LocalTrackState),
            "::",
            stringify!(onion_skin)
        )
    );
}
pub type DP_LocalStateViewInvalidatedFn = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        check_all: bool,
        layer_id: ::std::os::raw::c_int,
    ),
>;
pub type DP_LocalStateAcceptResetMessageFn = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, msg: *mut DP_Message) -> bool,
>;
extern "C" {
    pub fn DP_local_state_new(
        cs_or_null: *mut DP_CanvasState,
        view_invalidated: DP_LocalStateViewInvalidatedFn,
        user: *mut ::std::os::raw::c_void,
    ) -> *mut DP_LocalState;
}
extern "C" {
    pub fn DP_local_state_free(ls: *mut DP_LocalState);
}
extern "C" {
    pub fn DP_local_state_layer_states(
        ls: *mut DP_LocalState,
        out_count: *mut ::std::os::raw::c_int,
    ) -> *const DP_LocalLayerState;
}
extern "C" {
    pub fn DP_local_state_layer_state_count(ls: *mut DP_LocalState) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_local_state_background_tile_noinc(ls: *mut DP_LocalState) -> *mut DP_Tile;
}
extern "C" {
    pub fn DP_local_state_background_opaque(ls: *mut DP_LocalState) -> bool;
}
extern "C" {
    pub fn DP_local_state_view_mode(ls: *mut DP_LocalState) -> DP_ViewMode;
}
extern "C" {
    pub fn DP_local_state_onion_skins(ls: *mut DP_LocalState) -> *mut DP_OnionSkins;
}
extern "C" {
    pub fn DP_local_state_active_layer_id(ls: *mut DP_LocalState) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_local_state_active_frame_index(ls: *mut DP_LocalState) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_local_state_track_states(
        ls: *mut DP_LocalState,
        out_count: *mut ::std::os::raw::c_int,
    ) -> *const DP_LocalTrackState;
}
extern "C" {
    pub fn DP_local_state_track_state_count(ls: *mut DP_LocalState) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_local_state_track_visible(
        ls: *mut DP_LocalState,
        track_id: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn DP_local_state_handle(
        ls: *mut DP_LocalState,
        dc: *mut DP_DrawContext,
        msg: *mut DP_Message,
    );
}
extern "C" {
    pub fn DP_local_state_reset_image_build(
        ls: *mut DP_LocalState,
        dc: *mut DP_DrawContext,
        fn_: DP_LocalStateAcceptResetMessageFn,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn DP_local_state_msg_layer_visibility_new(
        layer_id: ::std::os::raw::c_int,
        hidden: bool,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_local_state_msg_background_tile_new(
        dc: *mut DP_DrawContext,
        tile_or_null: *mut DP_Tile,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_local_state_msg_view_mode_new(view_mode: DP_ViewMode) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_local_state_msg_active_layer_new(layer_id: ::std::os::raw::c_int) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_local_state_msg_active_frame_new(
        frame_index: ::std::os::raw::c_int,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_local_state_msg_onion_skins_new(oss: *const DP_OnionSkins) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_local_state_msg_track_visibility_new(
        track_id: ::std::os::raw::c_int,
        hidden: bool,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_local_state_msg_track_onion_skin_new(
        track_id: ::std::os::raw::c_int,
        onion_skin: bool,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_local_state_msg_layer_sketch_new(
        layer_id: ::std::os::raw::c_int,
        opacity: u16,
        tint: u32,
    ) -> *mut DP_Message;
}
pub const DP_LOAD_RESULT_SUCCESS: DP_LoadResult = 0;
pub const DP_LOAD_RESULT_BAD_ARGUMENTS: DP_LoadResult = 1;
pub const DP_LOAD_RESULT_UNKNOWN_FORMAT: DP_LoadResult = 2;
pub const DP_LOAD_RESULT_OPEN_ERROR: DP_LoadResult = 3;
pub const DP_LOAD_RESULT_READ_ERROR: DP_LoadResult = 4;
pub const DP_LOAD_RESULT_BAD_MIMETYPE: DP_LoadResult = 5;
pub const DP_LOAD_RESULT_RECORDING_INCOMPATIBLE: DP_LoadResult = 6;
pub const DP_LOAD_RESULT_UNSUPPORTED_PSD_BITS_PER_CHANNEL: DP_LoadResult = 7;
pub const DP_LOAD_RESULT_UNSUPPORTED_PSD_COLOR_MODE: DP_LoadResult = 8;
pub const DP_LOAD_RESULT_IMAGE_TOO_LARGE: DP_LoadResult = 9;
pub const DP_LOAD_RESULT_INTERNAL_ERROR: DP_LoadResult = 10;
pub type DP_LoadResult = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct json_object_t {
    _unused: [u8; 0],
}
pub type JSON_Object = json_object_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_Player {
    _unused: [u8; 0],
}
pub const DP_PLAYER_TYPE_GUESS: DP_PlayerType = 0;
pub const DP_PLAYER_TYPE_BINARY: DP_PlayerType = 1;
pub const DP_PLAYER_TYPE_TEXT: DP_PlayerType = 2;
pub const DP_PLAYER_TYPE_DEBUG_DUMP: DP_PlayerType = 3;
pub type DP_PlayerType = ::std::os::raw::c_uint;
pub const DP_PLAYER_SUCCESS: DP_PlayerResult = 0;
pub const DP_PLAYER_RECORDING_END: DP_PlayerResult = 1;
pub const DP_PLAYER_ERROR_PARSE: DP_PlayerResult = 2;
pub const DP_PLAYER_ERROR_INPUT: DP_PlayerResult = 3;
pub const DP_PLAYER_ERROR_OPERATION: DP_PlayerResult = 4;
pub type DP_PlayerResult = ::std::os::raw::c_uint;
pub const DP_PLAYER_COMPATIBLE: DP_PlayerCompatibility = 0;
pub const DP_PLAYER_MINOR_INCOMPATIBILITY: DP_PlayerCompatibility = 1;
pub const DP_PLAYER_INCOMPATIBLE: DP_PlayerCompatibility = 2;
pub type DP_PlayerCompatibility = ::std::os::raw::c_uint;
pub const DP_PLAYER_PASS_CLIENT_PLAYBACK: DP_PlayerPass = 0;
pub const DP_PLAYER_PASS_FEATURE_ACCESS: DP_PlayerPass = 1;
pub const DP_PLAYER_PASS_ALL: DP_PlayerPass = 2;
pub type DP_PlayerPass = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_PlayerIndexEntry {
    pub message_index: ::std::os::raw::c_longlong,
    pub message_offset: usize,
    pub snapshot_offset: usize,
    pub thumbnail_offset: usize,
}
#[test]
fn bindgen_test_layout_DP_PlayerIndexEntry() {
    const UNINIT: ::std::mem::MaybeUninit<DP_PlayerIndexEntry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_PlayerIndexEntry>(),
        32usize,
        concat!("Size of: ", stringify!(DP_PlayerIndexEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_PlayerIndexEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(DP_PlayerIndexEntry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message_index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_PlayerIndexEntry),
            "::",
            stringify!(message_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message_offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_PlayerIndexEntry),
            "::",
            stringify!(message_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).snapshot_offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_PlayerIndexEntry),
            "::",
            stringify!(snapshot_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thumbnail_offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_PlayerIndexEntry),
            "::",
            stringify!(thumbnail_offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_PlayerIndex {
    pub input: DP_BufferedInput,
    pub message_count: ::std::os::raw::c_uint,
    pub entries: *mut DP_PlayerIndexEntry,
    pub entry_count: usize,
}
#[test]
fn bindgen_test_layout_DP_PlayerIndex() {
    const UNINIT: ::std::mem::MaybeUninit<DP_PlayerIndex> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_PlayerIndex>(),
        48usize,
        concat!("Size of: ", stringify!(DP_PlayerIndex))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_PlayerIndex>(),
        8usize,
        concat!("Alignment of ", stringify!(DP_PlayerIndex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_PlayerIndex),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message_count) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_PlayerIndex),
            "::",
            stringify!(message_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entries) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_PlayerIndex),
            "::",
            stringify!(entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entry_count) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_PlayerIndex),
            "::",
            stringify!(entry_count)
        )
    );
}
extern "C" {
    pub fn DP_player_new(
        type_: DP_PlayerType,
        path_or_null: *const ::std::os::raw::c_char,
        input: *mut DP_Input,
        out_result: *mut DP_LoadResult,
    ) -> *mut DP_Player;
}
extern "C" {
    pub fn DP_player_free(player: *mut DP_Player);
}
extern "C" {
    pub fn DP_player_type(player: *mut DP_Player) -> DP_PlayerType;
}
extern "C" {
    pub fn DP_player_header(player: *mut DP_Player) -> *mut JSON_Value;
}
extern "C" {
    pub fn DP_player_compatibility(player: *mut DP_Player) -> DP_PlayerCompatibility;
}
extern "C" {
    pub fn DP_player_compatible(player: *mut DP_Player) -> bool;
}
extern "C" {
    pub fn DP_player_acl_override_set(player: *mut DP_Player, override_: bool);
}
extern "C" {
    pub fn DP_player_pass_set(player: *mut DP_Player, pass: DP_PlayerPass);
}
extern "C" {
    pub fn DP_player_recording_path(player: *mut DP_Player) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_player_index_path(player: *mut DP_Player) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_player_index_loaded(player: *mut DP_Player) -> bool;
}
extern "C" {
    pub fn DP_player_index(player: *mut DP_Player) -> *mut DP_PlayerIndex;
}
extern "C" {
    pub fn DP_player_index_set(player: *mut DP_Player, index: DP_PlayerIndex);
}
extern "C" {
    pub fn DP_player_tell(player: *mut DP_Player) -> usize;
}
extern "C" {
    pub fn DP_player_progress(player: *mut DP_Player) -> f64;
}
extern "C" {
    pub fn DP_player_position(player: *mut DP_Player) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn DP_player_step(player: *mut DP_Player, out_msg: *mut *mut DP_Message)
        -> DP_PlayerResult;
}
extern "C" {
    pub fn DP_player_step_dump(
        player: *mut DP_Player,
        out_type: *mut DP_DumpType,
        out_count: *mut ::std::os::raw::c_int,
        out_msgs: *mut *mut *mut DP_Message,
    ) -> DP_PlayerResult;
}
extern "C" {
    pub fn DP_player_seek(
        player: *mut DP_Player,
        position: ::std::os::raw::c_longlong,
        offset: usize,
    ) -> bool;
}
extern "C" {
    pub fn DP_player_body_offset(player: *mut DP_Player) -> usize;
}
extern "C" {
    pub fn DP_player_rewind(player: *mut DP_Player) -> bool;
}
extern "C" {
    pub fn DP_player_seek_dump(
        player: *mut DP_Player,
        position: ::std::os::raw::c_longlong,
    ) -> bool;
}
pub const DP_PREVIEW_CUT: DP_PreviewType = 0;
pub const DP_PREVIEW_DABS: DP_PreviewType = 1;
pub const DP_PREVIEW_FILL: DP_PreviewType = 2;
pub const DP_PREVIEW_TRANSFORM_FIRST: DP_PreviewType = 3;
pub const DP_PREVIEW_TRANSFORM_LAST: DP_PreviewType = 18;
pub const DP_PREVIEW_COUNT: DP_PreviewType = 19;
pub type DP_PreviewType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_Preview {
    _unused: [u8; 0],
}
pub type DP_PreviewTransformGetPixelsFn = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void) -> *const DP_Pixel8,
>;
pub type DP_PreviewTransformDisposePixelsFn =
    ::std::option::Option<unsafe extern "C" fn(user: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_PreviewRenderer {
    _unused: [u8; 0],
}
pub type DP_PreviewRenderedFn = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, pv: *mut DP_Preview),
>;
pub type DP_PreviewRerenderedFn =
    ::std::option::Option<unsafe extern "C" fn(user: *mut ::std::os::raw::c_void)>;
pub type DP_PreviewClearFn = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, type_: ::std::os::raw::c_int),
>;
extern "C" {
    pub static mut DP_preview_null: DP_Preview;
}
extern "C" {
    pub fn DP_preview_incref(pv: *mut DP_Preview) -> *mut DP_Preview;
}
extern "C" {
    pub fn DP_preview_incref_nullable(pv_or_null: *mut DP_Preview) -> *mut DP_Preview;
}
extern "C" {
    pub fn DP_preview_decref(pv: *mut DP_Preview);
}
extern "C" {
    pub fn DP_preview_decref_nullable(pv_or_null: *mut DP_Preview);
}
extern "C" {
    pub fn DP_preview_refcount(pv: *mut DP_Preview) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_preview_type(pv: *mut DP_Preview) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_preview_apply(
        pv: *mut DP_Preview,
        cs: *mut DP_CanvasState,
        pvr: *mut DP_PreviewRenderer,
    ) -> *mut DP_CanvasState;
}
extern "C" {
    pub fn DP_preview_render_reset(
        pv: *mut DP_Preview,
        pvr: *mut DP_PreviewRenderer,
        canvas_width: ::std::os::raw::c_int,
        canvas_height: ::std::os::raw::c_int,
        offset_x: ::std::os::raw::c_int,
        offset_y: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_preview_new_cut(
        initial_offset_x: ::std::os::raw::c_int,
        initial_offset_y: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        mask_or_null: *const DP_Pixel8,
        layer_id_count: ::std::os::raw::c_int,
        layer_ids: *const ::std::os::raw::c_int,
    ) -> *mut DP_Preview;
}
extern "C" {
    pub fn DP_preview_new_transform(
        id: ::std::os::raw::c_int,
        initial_offset_x: ::std::os::raw::c_int,
        initial_offset_y: ::std::os::raw::c_int,
        layer_id: ::std::os::raw::c_int,
        blend_mode: ::std::os::raw::c_int,
        opacity: u16,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        dst_quad: *const DP_Quad,
        interpolation: ::std::os::raw::c_int,
        get_pixels: DP_PreviewTransformGetPixelsFn,
        dispose_pixels: DP_PreviewTransformDisposePixelsFn,
        user: *mut ::std::os::raw::c_void,
    ) -> *mut DP_Preview;
}
extern "C" {
    pub fn DP_preview_new_dabs_inc(
        initial_offset_x: ::std::os::raw::c_int,
        initial_offset_y: ::std::os::raw::c_int,
        layer_id: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
        messages: *mut *mut DP_Message,
    ) -> *mut DP_Preview;
}
extern "C" {
    pub fn DP_preview_new_fill(
        initial_offset_x: ::std::os::raw::c_int,
        initial_offset_y: ::std::os::raw::c_int,
        layer_id: ::std::os::raw::c_int,
        blend_mode: ::std::os::raw::c_int,
        opacity: u16,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        pixels: *const DP_Pixel8,
    ) -> *mut DP_Preview;
}
extern "C" {
    pub fn DP_preview_renderer_new(
        dc: *mut DP_DrawContext,
        rendered: DP_PreviewRenderedFn,
        rerendered: DP_PreviewRerenderedFn,
        clear: DP_PreviewClearFn,
        user: *mut ::std::os::raw::c_void,
    ) -> *mut DP_PreviewRenderer;
}
extern "C" {
    pub fn DP_preview_renderer_free(pvr: *mut DP_PreviewRenderer);
}
extern "C" {
    pub fn DP_preview_renderer_push_noinc(
        pvr: *mut DP_PreviewRenderer,
        pv: *mut DP_Preview,
        canvas_width: ::std::os::raw::c_int,
        canvas_height: ::std::os::raw::c_int,
        offset_x: ::std::os::raw::c_int,
        offset_y: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_preview_renderer_push_rerender_inc(
        pvr: *mut DP_PreviewRenderer,
        pv: *mut DP_Preview,
        canvas_width: ::std::os::raw::c_int,
        canvas_height: ::std::os::raw::c_int,
        offset_x: ::std::os::raw::c_int,
        offset_y: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_preview_renderer_cancel(pvr: *mut DP_PreviewRenderer, type_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn DP_preview_renderer_cancel_all_transforms(pvr: *mut DP_PreviewRenderer);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_Renderer {
    _unused: [u8; 0],
}
pub type DP_RendererTileFn = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        pixels: *mut DP_Pixel8,
    ),
>;
pub type DP_RendererUnlockFn =
    ::std::option::Option<unsafe extern "C" fn(user: *mut ::std::os::raw::c_void)>;
pub type DP_RendererResizeFn = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        prev_width: ::std::os::raw::c_int,
        prev_height: ::std::os::raw::c_int,
        offset_x: ::std::os::raw::c_int,
        offset_y: ::std::os::raw::c_int,
    ),
>;
pub const DP_RENDERER_CONTINUOUS: DP_RendererMode = 0;
pub const DP_RENDERER_VIEW_BOUNDS_CHANGED: DP_RendererMode = 1;
pub const DP_RENDERER_EVERYTHING: DP_RendererMode = 2;
pub type DP_RendererMode = ::std::os::raw::c_uint;
extern "C" {
    pub fn DP_renderer_new(
        thread_count: ::std::os::raw::c_int,
        checkers: bool,
        checker_color1: DP_Pixel8,
        checker_color2: DP_Pixel8,
        selection_color: DP_UPixel15,
        tile_fn: DP_RendererTileFn,
        unlock_fn: DP_RendererUnlockFn,
        resize_fn: DP_RendererResizeFn,
        user: *mut ::std::os::raw::c_void,
    ) -> *mut DP_Renderer;
}
extern "C" {
    pub fn DP_renderer_free(renderer: *mut DP_Renderer);
}
extern "C" {
    pub fn DP_renderer_thread_count(renderer: *mut DP_Renderer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_renderer_checkers(renderer: *mut DP_Renderer) -> bool;
}
extern "C" {
    pub fn DP_renderer_checkers_visible(renderer: *mut DP_Renderer) -> bool;
}
extern "C" {
    pub fn DP_renderer_apply(
        renderer: *mut DP_Renderer,
        cs: *mut DP_CanvasState,
        ls: *mut DP_LocalState,
        diff: *mut DP_CanvasDiff,
        layers_can_decrease_opacity: bool,
        checker_color1: DP_Pixel8,
        checker_color2: DP_Pixel8,
        selection_color: DP_UPixel15,
        view_tile_bounds: DP_Rect,
        render_outside_view: bool,
        mode: DP_RendererMode,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_AclState {
    _unused: [u8; 0],
}
pub type DP_PaintEnginePlaybackFn = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, position: ::std::os::raw::c_longlong),
>;
pub type DP_PaintEngineDumpPlaybackFn = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        position: ::std::os::raw::c_longlong,
        chs: *mut DP_CanvasHistorySnapshot,
    ),
>;
pub type DP_PaintEngineStreamResetStartFn = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        cs: *mut DP_CanvasState,
        correlator_length: usize,
        correlator: *const ::std::os::raw::c_char,
    ),
>;
pub type DP_PaintEngineAclsChangedFn = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        acl_change_flags: ::std::os::raw::c_int,
    ),
>;
pub type DP_PaintEngineLaserTrailFn = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        context_id: ::std::os::raw::c_uint,
        persistence: ::std::os::raw::c_int,
        color: u32,
    ),
>;
pub type DP_PaintEngineMovePointerFn = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        context_id: ::std::os::raw::c_uint,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ),
>;
pub type DP_PaintEngineDefaultLayerSetFn = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, layer_id: ::std::os::raw::c_int),
>;
pub type DP_PaintEngineUndoDepthLimitSetFn = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        undo_depth_limit: ::std::os::raw::c_int,
    ),
>;
pub type DP_PaintEngineCensoredLayerRevealedFn = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, layer_id: ::std::os::raw::c_int),
>;
pub type DP_PaintEngineCatchupFn = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, progress: ::std::os::raw::c_int),
>;
pub type DP_PaintEngineResetLockChangedFn =
    ::std::option::Option<unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, locked: bool)>;
pub type DP_PaintEngineRecorderStateChangedFn =
    ::std::option::Option<unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, started: bool)>;
pub type DP_PaintEngineLayerPropsChangedFn = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, lpl: *mut DP_LayerPropsList),
>;
pub type DP_PaintEngineAnnotationsChangedFn = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, al: *mut DP_AnnotationList),
>;
pub type DP_PaintEngineDocumentMetadataChangedFn = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, dm: *mut DP_DocumentMetadata),
>;
pub type DP_PaintEngineTimelineChangedFn = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, tl: *mut DP_Timeline),
>;
pub type DP_PaintEngineSelectionsChangedFn = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, ss_or_null: *mut DP_SelectionSet),
>;
pub type DP_PaintEngineCursorMovedFn = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        flags: ::std::os::raw::c_uint,
        context_id: ::std::os::raw::c_uint,
        layer_id: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ),
>;
pub type DP_PaintEngineFilterMessageFn = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        msg: *mut DP_Message,
    ) -> ::std::os::raw::c_uint,
>;
pub type DP_PaintEnginePushMessageFn = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, msg: *mut DP_Message),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_PaintEngine {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_PaintEnginePlayback {
    pub player: *mut DP_Player,
    pub msecs: ::std::os::raw::c_longlong,
    pub next_has_time: bool,
    pub fn_: DP_PaintEnginePlaybackFn,
    pub dump_fn: DP_PaintEngineDumpPlaybackFn,
    pub user: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_DP_PaintEnginePlayback() {
    const UNINIT: ::std::mem::MaybeUninit<DP_PaintEnginePlayback> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_PaintEnginePlayback>(),
        48usize,
        concat!("Size of: ", stringify!(DP_PaintEnginePlayback))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_PaintEnginePlayback>(),
        8usize,
        concat!("Alignment of ", stringify!(DP_PaintEnginePlayback))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).player) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_PaintEnginePlayback),
            "::",
            stringify!(player)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msecs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_PaintEnginePlayback),
            "::",
            stringify!(msecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_has_time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_PaintEnginePlayback),
            "::",
            stringify!(next_has_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fn_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_PaintEnginePlayback),
            "::",
            stringify!(fn_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dump_fn) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_PaintEnginePlayback),
            "::",
            stringify!(dump_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_PaintEnginePlayback),
            "::",
            stringify!(user)
        )
    );
}
extern "C" {
    pub fn DP_paint_engine_new_inc(
        paint_dc: *mut DP_DrawContext,
        main_dc: *mut DP_DrawContext,
        preview_dc: *mut DP_DrawContext,
        acls: *mut DP_AclState,
        cs_or_null: *mut DP_CanvasState,
        renderer_checker: bool,
        checker_color1: u32,
        checker_color2: u32,
        selection_color: u32,
        renderer_tile_fn: DP_RendererTileFn,
        renderer_unlock_fn: DP_RendererUnlockFn,
        renderer_resize_fn: DP_RendererResizeFn,
        renderer_user: *mut ::std::os::raw::c_void,
        save_point_fn: DP_CanvasHistorySavePointFn,
        save_point_user: *mut ::std::os::raw::c_void,
        soft_reset_fn: DP_CanvasHistorySoftResetFn,
        soft_reset_user: *mut ::std::os::raw::c_void,
        want_canvas_history_dump: bool,
        canvas_history_dump_dir: *const ::std::os::raw::c_char,
        get_time_ms_fn: DP_RecorderGetTimeMsFn,
        get_time_ms_user: *mut ::std::os::raw::c_void,
        player_or_null: *mut DP_Player,
        playback_fn: DP_PaintEnginePlaybackFn,
        dump_playback_fn: DP_PaintEngineDumpPlaybackFn,
        playback_user: *mut ::std::os::raw::c_void,
        stream_reset_start_fn: DP_PaintEngineStreamResetStartFn,
        stream_reset_user: *mut ::std::os::raw::c_void,
    ) -> *mut DP_PaintEngine;
}
extern "C" {
    pub fn DP_paint_engine_free_join(pe: *mut DP_PaintEngine);
}
extern "C" {
    pub fn DP_paint_engine_render_thread_count(pe: *mut DP_PaintEngine) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_paint_engine_local_drawing_in_progress_set(
        pe: *mut DP_PaintEngine,
        local_drawing_in_progress: bool,
    );
}
extern "C" {
    pub fn DP_paint_engine_want_canvas_history_dump(pe: *mut DP_PaintEngine) -> bool;
}
extern "C" {
    pub fn DP_paint_engine_want_canvas_history_dump_set(
        pe: *mut DP_PaintEngine,
        want_canvas_history_dump: bool,
    );
}
extern "C" {
    pub fn DP_paint_engine_local_state_reset_image_build(
        pe: *mut DP_PaintEngine,
        fn_: DP_LocalStateAcceptResetMessageFn,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn DP_paint_engine_get_layers_visible_in_frame(
        pe: *mut DP_PaintEngine,
        fn_: DP_AddVisibleLayerFn,
        user: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn DP_paint_engine_active_layer_id(pe: *mut DP_PaintEngine) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_paint_engine_active_frame_index(pe: *mut DP_PaintEngine) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_paint_engine_view_mode(pe: *mut DP_PaintEngine) -> DP_ViewMode;
}
extern "C" {
    pub fn DP_paint_engine_view_mode_filter(
        pe: *mut DP_PaintEngine,
        vmb: *mut DP_ViewModeBuffer,
        cs: *mut DP_CanvasState,
    ) -> DP_ViewModeFilter;
}
extern "C" {
    pub fn DP_paint_engine_reveal_censored(pe: *mut DP_PaintEngine) -> bool;
}
extern "C" {
    pub fn DP_paint_engine_reveal_censored_set(pe: *mut DP_PaintEngine, reveal_censored: bool);
}
extern "C" {
    pub fn DP_paint_engine_pick(
        pe: *mut DP_PaintEngine,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> DP_ViewModePick;
}
extern "C" {
    pub fn DP_paint_engine_inspect_set(
        pe: *mut DP_PaintEngine,
        context_id: ::std::os::raw::c_uint,
        show_tiles: bool,
    );
}
extern "C" {
    pub fn DP_paint_engine_checkers_visible(pe: *mut DP_PaintEngine) -> bool;
}
extern "C" {
    pub fn DP_paint_engine_checker_color1(pe: *mut DP_PaintEngine) -> u32;
}
extern "C" {
    pub fn DP_paint_engine_checker_color2(pe: *mut DP_PaintEngine) -> u32;
}
extern "C" {
    pub fn DP_paint_engine_selection_color(pe: *mut DP_PaintEngine) -> u32;
}
extern "C" {
    pub fn DP_paint_engine_checker_color1_set(pe: *mut DP_PaintEngine, color1: u32);
}
extern "C" {
    pub fn DP_paint_engine_checker_color2_set(pe: *mut DP_PaintEngine, color2: u32);
}
extern "C" {
    pub fn DP_paint_engine_selection_color_set(pe: *mut DP_PaintEngine, color: u32);
}
extern "C" {
    pub fn DP_paint_engine_local_background_tile_noinc(pe: *mut DP_PaintEngine) -> *mut DP_Tile;
}
extern "C" {
    pub fn DP_paint_engine_recorder_start(
        pe: *mut DP_PaintEngine,
        type_: DP_RecorderType,
        header: *mut JSON_Value,
        path: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn DP_paint_engine_recorder_stop(pe: *mut DP_PaintEngine) -> bool;
}
extern "C" {
    pub fn DP_paint_engine_recorder_is_recording(pe: *mut DP_PaintEngine) -> bool;
}
extern "C" {
    pub fn DP_paint_engine_playback(pe: *mut DP_PaintEngine) -> *mut DP_PaintEnginePlayback;
}
extern "C" {
    pub fn DP_paint_engine_handle_inc(
        pe: *mut DP_PaintEngine,
        local: bool,
        override_acls: bool,
        count: ::std::os::raw::c_int,
        msgs: *mut *mut DP_Message,
        acls_changed: DP_PaintEngineAclsChangedFn,
        laser_trail: DP_PaintEngineLaserTrailFn,
        move_pointer: DP_PaintEngineMovePointerFn,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_paint_engine_tick(
        pe: *mut DP_PaintEngine,
        tile_bounds: DP_Rect,
        render_outside_tile_bounds: bool,
        catchup: DP_PaintEngineCatchupFn,
        reset_lock_changed: DP_PaintEngineResetLockChangedFn,
        recorder_state_changed: DP_PaintEngineRecorderStateChangedFn,
        layer_props_changed: DP_PaintEngineLayerPropsChangedFn,
        annotations_changed: DP_PaintEngineAnnotationsChangedFn,
        document_metadata_changed: DP_PaintEngineDocumentMetadataChangedFn,
        timeline_changed: DP_PaintEngineTimelineChangedFn,
        selections_changed: DP_PaintEngineSelectionsChangedFn,
        cursor_moved: DP_PaintEngineCursorMovedFn,
        default_layer_set: DP_PaintEngineDefaultLayerSetFn,
        undo_depth_limit_set: DP_PaintEngineUndoDepthLimitSetFn,
        censored_layer_revealed: DP_PaintEngineCensoredLayerRevealedFn,
        user: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn DP_paint_engine_render_continuous(
        pe: *mut DP_PaintEngine,
        tile_bounds: DP_Rect,
        render_outside_tile_bounds: bool,
    );
}
extern "C" {
    pub fn DP_paint_engine_change_bounds(
        pe: *mut DP_PaintEngine,
        tile_bounds: DP_Rect,
        render_outside_tile_bounds: bool,
    );
}
extern "C" {
    pub fn DP_paint_engine_render_everything(pe: *mut DP_PaintEngine);
}
extern "C" {
    pub fn DP_paint_engine_preview_cut(
        pe: *mut DP_PaintEngine,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        mask_or_null: *const DP_Pixel8,
        layer_id_count: ::std::os::raw::c_int,
        layer_ids: *const ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_paint_engine_preview_transform(
        pe: *mut DP_PaintEngine,
        id: ::std::os::raw::c_int,
        layer_id: ::std::os::raw::c_int,
        blend_mode: ::std::os::raw::c_int,
        opacity: u16,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        dst_quad: *const DP_Quad,
        interpolation: ::std::os::raw::c_int,
        get_pixels: DP_PreviewTransformGetPixelsFn,
        dispose_pixels: DP_PreviewTransformDisposePixelsFn,
        user: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn DP_paint_engine_preview_dabs_inc(
        pe: *mut DP_PaintEngine,
        layer_id: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
        messages: *mut *mut DP_Message,
    );
}
extern "C" {
    pub fn DP_paint_engine_preview_fill(
        pe: *mut DP_PaintEngine,
        layer_id: ::std::os::raw::c_int,
        blend_mode: ::std::os::raw::c_int,
        opacity: u16,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        pixels: *const DP_Pixel8,
    );
}
extern "C" {
    pub fn DP_paint_engine_preview_clear(pe: *mut DP_PaintEngine, type_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn DP_paint_engine_preview_clear_all_transforms(pe: *mut DP_PaintEngine);
}
extern "C" {
    pub fn DP_paint_engine_view_canvas_state_inc(pe: *mut DP_PaintEngine) -> *mut DP_CanvasState;
}
extern "C" {
    pub fn DP_paint_engine_history_canvas_state_inc(pe: *mut DP_PaintEngine)
        -> *mut DP_CanvasState;
}
extern "C" {
    pub fn DP_paint_engine_sample_canvas_state_inc(pe: *mut DP_PaintEngine) -> *mut DP_CanvasState;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MemoryPoolBucket {
    pub elements: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_DP_MemoryPoolBucket() {
    const UNINIT: ::std::mem::MaybeUninit<DP_MemoryPoolBucket> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_MemoryPoolBucket>(),
        8usize,
        concat!("Size of: ", stringify!(DP_MemoryPoolBucket))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_MemoryPoolBucket>(),
        8usize,
        concat!("Alignment of ", stringify!(DP_MemoryPoolBucket))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elements) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_MemoryPoolBucket),
            "::",
            stringify!(elements)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MemoryPoolFreeNode {
    pub next: *mut DP_MemoryPoolFreeNode,
}
#[test]
fn bindgen_test_layout_DP_MemoryPoolFreeNode() {
    const UNINIT: ::std::mem::MaybeUninit<DP_MemoryPoolFreeNode> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_MemoryPoolFreeNode>(),
        8usize,
        concat!("Size of: ", stringify!(DP_MemoryPoolFreeNode))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_MemoryPoolFreeNode>(),
        8usize,
        concat!("Alignment of ", stringify!(DP_MemoryPoolFreeNode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_MemoryPoolFreeNode),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MemoryPool {
    pub el_size: usize,
    pub bucket_el_count: usize,
    pub buckets_len: usize,
    pub buckets: *mut DP_MemoryPoolBucket,
    pub free_list: *mut DP_MemoryPoolFreeNode,
}
#[test]
fn bindgen_test_layout_DP_MemoryPool() {
    const UNINIT: ::std::mem::MaybeUninit<DP_MemoryPool> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_MemoryPool>(),
        40usize,
        concat!("Size of: ", stringify!(DP_MemoryPool))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_MemoryPool>(),
        8usize,
        concat!("Alignment of ", stringify!(DP_MemoryPool))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).el_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_MemoryPool),
            "::",
            stringify!(el_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bucket_el_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_MemoryPool),
            "::",
            stringify!(bucket_el_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buckets_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_MemoryPool),
            "::",
            stringify!(buckets_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buckets) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_MemoryPool),
            "::",
            stringify!(buckets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_list) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_MemoryPool),
            "::",
            stringify!(free_list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MemoryPoolStatistics {
    pub el_size: usize,
    pub bucket_el_count: usize,
    pub buckets_len: usize,
    pub el_free: usize,
}
#[test]
fn bindgen_test_layout_DP_MemoryPoolStatistics() {
    const UNINIT: ::std::mem::MaybeUninit<DP_MemoryPoolStatistics> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_MemoryPoolStatistics>(),
        32usize,
        concat!("Size of: ", stringify!(DP_MemoryPoolStatistics))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_MemoryPoolStatistics>(),
        8usize,
        concat!("Alignment of ", stringify!(DP_MemoryPoolStatistics))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).el_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_MemoryPoolStatistics),
            "::",
            stringify!(el_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bucket_el_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_MemoryPoolStatistics),
            "::",
            stringify!(bucket_el_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buckets_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_MemoryPoolStatistics),
            "::",
            stringify!(buckets_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).el_free) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_MemoryPoolStatistics),
            "::",
            stringify!(el_free)
        )
    );
}
extern "C" {
    pub fn DP_memory_pool_new(el_size: usize, bucket_el_count: usize) -> DP_MemoryPool;
}
extern "C" {
    pub fn DP_memory_pool_free(pool: *mut DP_MemoryPool);
}
extern "C" {
    pub fn DP_memory_pool_reset(pool: *mut DP_MemoryPool);
}
extern "C" {
    pub fn DP_memory_pool_alloc_el(pool: *mut DP_MemoryPool) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn DP_memory_pool_free_el(pool: *mut DP_MemoryPool, el: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn DP_memory_pool_statistics(pool: *mut DP_MemoryPool) -> DP_MemoryPoolStatistics;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_TileCounts {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DP_TileCounts() {
    const UNINIT: ::std::mem::MaybeUninit<DP_TileCounts> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_TileCounts>(),
        8usize,
        concat!("Size of: ", stringify!(DP_TileCounts))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_TileCounts>(),
        4usize,
        concat!("Alignment of ", stringify!(DP_TileCounts))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_TileCounts),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_TileCounts),
            "::",
            stringify!(y)
        )
    );
}
extern "C" {
    pub fn DP_tile_opaque_mask() -> *const u16;
}
extern "C" {
    pub fn DP_tile_memory_usage() -> DP_MemoryPoolStatistics;
}
extern "C" {
    pub fn DP_tile_new(context_id: ::std::os::raw::c_uint) -> *mut DP_Tile;
}
extern "C" {
    pub fn DP_tile_new_from_pixel15(
        context_id: ::std::os::raw::c_uint,
        pixel: DP_Pixel15,
    ) -> *mut DP_Tile;
}
extern "C" {
    pub fn DP_tile_new_from_upixel15(
        context_id: ::std::os::raw::c_uint,
        pixel: DP_UPixel15,
    ) -> *mut DP_Tile;
}
extern "C" {
    pub fn DP_tile_new_from_pixels8(
        context_id: ::std::os::raw::c_uint,
        pixels: *const DP_Pixel8,
    ) -> *mut DP_Tile;
}
extern "C" {
    pub fn DP_tile_new_from_bgra(context_id: ::std::os::raw::c_uint, bgra: u32) -> *mut DP_Tile;
}
extern "C" {
    pub fn DP_tile_new_from_compressed(
        dc: *mut DP_DrawContext,
        context_id: ::std::os::raw::c_uint,
        image: *const ::std::os::raw::c_uchar,
        image_size: usize,
    ) -> *mut DP_Tile;
}
extern "C" {
    pub fn DP_tile_new_zebra(
        context_id: ::std::os::raw::c_uint,
        pixel1: DP_Pixel15,
        pixel2: DP_Pixel15,
    ) -> *mut DP_Tile;
}
extern "C" {
    pub fn DP_tile_censored_noinc() -> *mut DP_Tile;
}
extern "C" {
    pub fn DP_tile_censored_inc() -> *mut DP_Tile;
}
extern "C" {
    pub fn DP_tile_incref(tile: *mut DP_Tile) -> *mut DP_Tile;
}
extern "C" {
    pub fn DP_tile_incref_nullable(tile_or_null: *mut DP_Tile) -> *mut DP_Tile;
}
extern "C" {
    pub fn DP_tile_incref_by(tile: *mut DP_Tile, refcount: ::std::os::raw::c_int) -> *mut DP_Tile;
}
extern "C" {
    pub fn DP_tile_incref_by_nullable(
        tile_or_null: *mut DP_Tile,
        refcount: ::std::os::raw::c_int,
    ) -> *mut DP_Tile;
}
extern "C" {
    pub fn DP_tile_decref(tile: *mut DP_Tile);
}
extern "C" {
    pub fn DP_tile_decref_nullable(tile_or_null: *mut DP_Tile);
}
extern "C" {
    pub fn DP_tile_refcount(tile: *mut DP_Tile) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_tile_transient(tile: *mut DP_Tile) -> bool;
}
extern "C" {
    pub fn DP_tile_context_id(tile: *mut DP_Tile) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn DP_tile_pixels(tile: *mut DP_Tile) -> *const DP_Pixel15;
}
extern "C" {
    pub fn DP_tile_pixel_at(
        tile: *mut DP_Tile,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> DP_Pixel15;
}
extern "C" {
    pub fn DP_tile_blank(tile: *mut DP_Tile) -> bool;
}
extern "C" {
    pub fn DP_tile_opaque(tile_or_null: *mut DP_Tile) -> bool;
}
extern "C" {
    pub fn DP_tile_same_pixel(tile_or_null: *mut DP_Tile, out_pixel: *mut DP_Pixel15) -> bool;
}
extern "C" {
    pub fn DP_tile_pixels_equal(t1: *mut DP_Tile, t2: *mut DP_Tile) -> bool;
}
extern "C" {
    pub fn DP_tile_pixels_equal_pixel(tile: *mut DP_Tile, pixel: DP_Pixel15) -> bool;
}
extern "C" {
    pub fn DP_tile_compress_pixel(
        pixel: DP_Pixel15,
        get_output_buffer: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: usize,
                arg2: *mut ::std::os::raw::c_void,
            ) -> *mut ::std::os::raw::c_uchar,
        >,
        user: *mut ::std::os::raw::c_void,
    ) -> usize;
}
extern "C" {
    pub fn DP_tile_compress(
        tile: *mut DP_Tile,
        pixel_buffer: *mut DP_Pixel8,
        get_output_buffer: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: usize,
                arg2: *mut ::std::os::raw::c_void,
            ) -> *mut ::std::os::raw::c_uchar,
        >,
        user: *mut ::std::os::raw::c_void,
    ) -> usize;
}
extern "C" {
    pub fn DP_tile_copy_to_image(
        tile_or_null: *mut DP_Tile,
        img: *mut DP_Image,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_tile_copy_to_pixels8(
        tile_or_null: *mut DP_Tile,
        pixels: *mut DP_Pixel8,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        pixels_width: ::std::os::raw::c_int,
        pixels_height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_tile_copy_to_upixels8(
        tile_or_null: *mut DP_Tile,
        pixels: *mut DP_UPixel8,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        pixels_width: ::std::os::raw::c_int,
        pixels_height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_tile_sample(
        tile_or_null: *mut DP_Tile,
        mask: *const u16,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        skip: ::std::os::raw::c_int,
        opaque: bool,
        in_out_weight: *mut f32,
        in_out_red: *mut f32,
        in_out_green: *mut f32,
        in_out_blue: *mut f32,
        in_out_alpha: *mut f32,
    );
}
extern "C" {
    pub fn DP_tile_sample_pigment(
        tile_or_null: *mut DP_Tile,
        mask: *const u16,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        skip: ::std::os::raw::c_int,
        opaque: bool,
        sample_interval: ::std::os::raw::c_int,
        sample_rate: f32,
        in_out_weight: *mut f32,
        in_out_red: *mut f32,
        in_out_green: *mut f32,
        in_out_blue: *mut f32,
        in_out_alpha: *mut f32,
    );
}
extern "C" {
    pub fn DP_transient_tile_new(
        tile: *mut DP_Tile,
        context_id: ::std::os::raw::c_uint,
    ) -> *mut DP_TransientTile;
}
extern "C" {
    pub fn DP_transient_tile_new_transient(
        tt: *mut DP_TransientTile,
        context_id: ::std::os::raw::c_uint,
    ) -> *mut DP_TransientTile;
}
extern "C" {
    pub fn DP_transient_tile_new_blank(context_id: ::std::os::raw::c_uint)
        -> *mut DP_TransientTile;
}
extern "C" {
    pub fn DP_transient_tile_new_nullable(
        tile_or_null: *mut DP_Tile,
        context_id: ::std::os::raw::c_uint,
    ) -> *mut DP_TransientTile;
}
extern "C" {
    pub fn DP_transient_tile_new_checker(
        context_id: ::std::os::raw::c_uint,
        pixel1: DP_Pixel15,
        pixel2: DP_Pixel15,
    ) -> *mut DP_TransientTile;
}
extern "C" {
    pub fn DP_transient_tile_incref(tt: *mut DP_TransientTile) -> *mut DP_TransientTile;
}
extern "C" {
    pub fn DP_transient_tile_incref_nullable(
        tt_or_null: *mut DP_TransientTile,
    ) -> *mut DP_TransientTile;
}
extern "C" {
    pub fn DP_transient_tile_decref(tt: *mut DP_TransientTile);
}
extern "C" {
    pub fn DP_transient_tile_decref_nullable(tt_or_null: *mut DP_TransientTile);
}
extern "C" {
    pub fn DP_transient_tile_refcount(tt: *mut DP_TransientTile) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_transient_tile_persist(tt: *mut DP_TransientTile) -> *mut DP_Tile;
}
extern "C" {
    pub fn DP_transient_tile_context_id(tt: *mut DP_Tile) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn DP_transient_tile_pixels(tt: *mut DP_TransientTile) -> *mut DP_Pixel15;
}
extern "C" {
    pub fn DP_transient_tile_pixel_at(
        tt: *mut DP_TransientTile,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> DP_Pixel15;
}
extern "C" {
    pub fn DP_transient_tile_pixel_at_set(
        tt: *mut DP_TransientTile,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        pixel: DP_Pixel15,
    );
}
extern "C" {
    pub fn DP_transient_tile_pixel_at_put(
        tt: *mut DP_TransientTile,
        blend_mode: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        pixel: DP_Pixel15,
    );
}
extern "C" {
    pub fn DP_transient_tile_clear(tt: *mut DP_TransientTile);
}
extern "C" {
    pub fn DP_transient_tile_fill_checker(
        tt: *mut DP_TransientTile,
        pixel1: DP_Pixel15,
        pixel2: DP_Pixel15,
    );
}
extern "C" {
    pub fn DP_transient_tile_copy(tt: *mut DP_TransientTile, t: *mut DP_Tile);
}
extern "C" {
    pub fn DP_transient_tile_blank(tt: *mut DP_TransientTile) -> bool;
}
extern "C" {
    pub fn DP_transient_tile_merge(
        tt: *mut DP_TransientTile,
        t: *mut DP_Tile,
        opacity: u16,
        blend_mode: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_tile_merge_nullable(
        tt_or_null: *mut DP_TransientTile,
        t: *mut DP_Tile,
        opacity: u16,
        blend_mode: ::std::os::raw::c_int,
    ) -> *mut DP_TransientTile;
}
extern "C" {
    pub fn DP_transient_tile_brush_apply(
        tt: *mut DP_TransientTile,
        src: DP_UPixel15,
        blend_mode: ::std::os::raw::c_int,
        mask: *const u16,
        opacity: u16,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        skip: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_tile_brush_apply_posterize(
        tt: *mut DP_TransientTile,
        posterize_num: ::std::os::raw::c_int,
        mask: *const u16,
        opacity: u16,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        skip: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_tile_tint(tt: *mut DP_TransientTile, tint: DP_UPixel8);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_Track {
    _unused: [u8; 0],
}
pub type DP_TransientTrack = DP_Track;
extern "C" {
    pub fn DP_timeline_new() -> *mut DP_Timeline;
}
extern "C" {
    pub fn DP_timeline_incref(tl: *mut DP_Timeline) -> *mut DP_Timeline;
}
extern "C" {
    pub fn DP_timeline_incref_nullable(tl_or_null: *mut DP_Timeline) -> *mut DP_Timeline;
}
extern "C" {
    pub fn DP_timeline_decref(tl: *mut DP_Timeline);
}
extern "C" {
    pub fn DP_timeline_decref_nullable(tl_or_null: *mut DP_Timeline);
}
extern "C" {
    pub fn DP_timeline_refcount(tl: *mut DP_Timeline) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_timeline_transient(tl: *mut DP_Timeline) -> bool;
}
extern "C" {
    pub fn DP_timeline_count(tl: *mut DP_Timeline) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_timeline_at_noinc(
        tl: *mut DP_Timeline,
        index: ::std::os::raw::c_int,
    ) -> *mut DP_Track;
}
extern "C" {
    pub fn DP_timeline_index_by_id(
        tl: *mut DP_Timeline,
        track_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_timeline_same_frame(
        tl: *mut DP_Timeline,
        frame_index_a: ::std::os::raw::c_int,
        frame_index_b: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn DP_transient_timeline_new(
        tl: *mut DP_Timeline,
        reserve: ::std::os::raw::c_int,
    ) -> *mut DP_TransientTimeline;
}
extern "C" {
    pub fn DP_transient_timeline_new_init(
        reserve: ::std::os::raw::c_int,
    ) -> *mut DP_TransientTimeline;
}
extern "C" {
    pub fn DP_transient_timeline_reserve(
        ttl: *mut DP_TransientTimeline,
        reserve: ::std::os::raw::c_int,
    ) -> *mut DP_TransientTimeline;
}
extern "C" {
    pub fn DP_transient_timeline_incref(
        ttl: *mut DP_TransientTimeline,
    ) -> *mut DP_TransientTimeline;
}
extern "C" {
    pub fn DP_transient_timeline_decref(ttl: *mut DP_TransientTimeline);
}
extern "C" {
    pub fn DP_transient_timeline_refcount(ttl: *mut DP_TransientTimeline) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_transient_timeline_persist(ttl: *mut DP_TransientTimeline) -> *mut DP_Timeline;
}
extern "C" {
    pub fn DP_transient_timeline_at_noinc(
        ttl: *mut DP_TransientTimeline,
        index: ::std::os::raw::c_int,
    ) -> *mut DP_Track;
}
extern "C" {
    pub fn DP_transient_timeline_transient_at_noinc(
        ttl: *mut DP_TransientTimeline,
        index: ::std::os::raw::c_int,
        reserve: ::std::os::raw::c_int,
    ) -> *mut DP_TransientTrack;
}
extern "C" {
    pub fn DP_transient_timeline_index_by_id(
        ttl: *mut DP_TransientTimeline,
        track_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_transient_timeline_set_noinc(
        ttl: *mut DP_TransientTimeline,
        t: *mut DP_Track,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_timeline_set_inc(
        ttl: *mut DP_TransientTimeline,
        t: *mut DP_Track,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_timeline_set_transient_noinc(
        ttl: *mut DP_TransientTimeline,
        tt: *mut DP_TransientTrack,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_timeline_insert_transient_noinc(
        ttl: *mut DP_TransientTimeline,
        tt: *mut DP_TransientTrack,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_timeline_delete_at(
        ttl: *mut DP_TransientTimeline,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_track_incref(t: *mut DP_Track) -> *mut DP_Track;
}
extern "C" {
    pub fn DP_track_incref_nullable(t_or_null: *mut DP_Track) -> *mut DP_Track;
}
extern "C" {
    pub fn DP_track_decref(t: *mut DP_Track);
}
extern "C" {
    pub fn DP_track_decref_nullable(t_or_null: *mut DP_Track);
}
extern "C" {
    pub fn DP_track_refcount(t: *mut DP_Track) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_track_transient(t: *mut DP_Track) -> bool;
}
extern "C" {
    pub fn DP_track_id(t: *mut DP_Track) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_track_title(
        t: *mut DP_Track,
        out_length: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_track_hidden(t: *mut DP_Track) -> bool;
}
extern "C" {
    pub fn DP_track_onion_skin(t: *mut DP_Track) -> bool;
}
extern "C" {
    pub fn DP_track_key_frame_count(t: *mut DP_Track) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_track_frame_index_at_noinc(
        t: *mut DP_Track,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_track_key_frame_at_noinc(
        t: *mut DP_Track,
        index: ::std::os::raw::c_int,
    ) -> *mut DP_KeyFrame;
}
extern "C" {
    pub fn DP_track_key_frame_at_inc(
        t: *mut DP_Track,
        index: ::std::os::raw::c_int,
    ) -> *mut DP_KeyFrame;
}
extern "C" {
    pub fn DP_track_key_frame_search_at(
        t: *mut DP_Track,
        frame_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_track_key_frame_search_at_or_before(
        t: *mut DP_Track,
        frame_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_track_key_frame_search_at_or_after(
        t: *mut DP_Track,
        frame_index: ::std::os::raw::c_int,
        out_exact: *mut bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_track_same_frame(
        t: *mut DP_Track,
        frame_index_a: ::std::os::raw::c_int,
        frame_index_b: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn DP_transient_track_new_init(reserve: ::std::os::raw::c_int) -> *mut DP_TransientTrack;
}
extern "C" {
    pub fn DP_transient_track_new(
        t: *mut DP_Track,
        reserve: ::std::os::raw::c_int,
    ) -> *mut DP_TransientTrack;
}
extern "C" {
    pub fn DP_transient_track_reserve(
        tt: *mut DP_TransientTrack,
        reserve: ::std::os::raw::c_int,
    ) -> *mut DP_TransientTrack;
}
extern "C" {
    pub fn DP_transient_track_incref(tt: *mut DP_TransientTrack) -> *mut DP_TransientTrack;
}
extern "C" {
    pub fn DP_transient_track_decref(tt: *mut DP_TransientTrack);
}
extern "C" {
    pub fn DP_transient_track_refcount(tt: *mut DP_TransientTrack) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_transient_track_persist(tt: *mut DP_TransientTrack) -> *mut DP_Track;
}
extern "C" {
    pub fn DP_transient_track_key_frame_at_noinc(
        tt: *mut DP_TransientTrack,
        index: ::std::os::raw::c_int,
    ) -> *mut DP_KeyFrame;
}
extern "C" {
    pub fn DP_transient_track_key_frame_search_at(
        tt: *mut DP_TransientTrack,
        frame_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_transient_track_id_set(tt: *mut DP_TransientTrack, id: ::std::os::raw::c_int);
}
extern "C" {
    pub fn DP_transient_track_title_set(
        tt: *mut DP_TransientTrack,
        title: *const ::std::os::raw::c_char,
        length: usize,
    );
}
extern "C" {
    pub fn DP_transient_track_hidden_set(tt: *mut DP_TransientTrack, hidden: bool);
}
extern "C" {
    pub fn DP_transient_track_onion_skin_set(tt: *mut DP_TransientTrack, onion_skin: bool);
}
extern "C" {
    pub fn DP_transient_track_truncate(tt: *mut DP_TransientTrack, to_count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn DP_transient_track_transient_at_noinc(
        tt: *mut DP_TransientTrack,
        index: ::std::os::raw::c_int,
    ) -> *mut DP_TransientKeyFrame;
}
extern "C" {
    pub fn DP_transient_track_set_transient_noinc(
        tt: *mut DP_TransientTrack,
        frame_index: ::std::os::raw::c_int,
        tkf: *mut DP_TransientKeyFrame,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_track_replace_noinc(
        tt: *mut DP_TransientTrack,
        frame_index: ::std::os::raw::c_int,
        kf: *mut DP_KeyFrame,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_track_replace_transient_noinc(
        tt: *mut DP_TransientTrack,
        frame_index: ::std::os::raw::c_int,
        tkf: *mut DP_TransientKeyFrame,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_track_insert_noinc(
        tt: *mut DP_TransientTrack,
        frame_index: ::std::os::raw::c_int,
        kf: *mut DP_KeyFrame,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DP_transient_track_delete_at(tt: *mut DP_TransientTrack, index: ::std::os::raw::c_int);
}
extern "C" {
    pub fn DP_image_impex_init();
}
extern "C" {
    pub fn DP_image_new_from_file(
        input: *mut DP_Input,
        type_: DP_ImageFileType,
        out_type: *mut DP_ImageFileType,
    ) -> *mut DP_Image;
}
extern "C" {
    pub fn DP_image_read_png(input: *mut DP_Input) -> *mut DP_Image;
}
extern "C" {
    pub fn DP_image_read_jpeg(input: *mut DP_Input) -> *mut DP_Image;
}
extern "C" {
    pub fn DP_image_write_png(img: *mut DP_Image, output: *mut DP_Output) -> bool;
}
extern "C" {
    pub fn DP_image_write_jpeg(img: *mut DP_Image, output: *mut DP_Output) -> bool;
}
extern "C" {
    pub fn DP_image_write_webp(img: *mut DP_Image, output: *mut DP_Output) -> bool;
}
pub const DP_SAVE_IMAGE_UNKNOWN: DP_SaveImageType = 0;
pub const DP_SAVE_IMAGE_ORA: DP_SaveImageType = 1;
pub const DP_SAVE_IMAGE_PNG: DP_SaveImageType = 2;
pub const DP_SAVE_IMAGE_JPEG: DP_SaveImageType = 3;
pub const DP_SAVE_IMAGE_PSD: DP_SaveImageType = 4;
pub const DP_SAVE_IMAGE_WEBP: DP_SaveImageType = 5;
pub type DP_SaveImageType = ::std::os::raw::c_uint;
pub const DP_SAVE_RESULT_SUCCESS: DP_SaveResult = 0;
pub const DP_SAVE_RESULT_BAD_ARGUMENTS: DP_SaveResult = 1;
pub const DP_SAVE_RESULT_UNKNOWN_FORMAT: DP_SaveResult = 2;
pub const DP_SAVE_RESULT_FLATTEN_ERROR: DP_SaveResult = 3;
pub const DP_SAVE_RESULT_OPEN_ERROR: DP_SaveResult = 4;
pub const DP_SAVE_RESULT_WRITE_ERROR: DP_SaveResult = 5;
pub const DP_SAVE_RESULT_INTERNAL_ERROR: DP_SaveResult = 6;
pub const DP_SAVE_RESULT_CANCEL: DP_SaveResult = 7;
pub type DP_SaveResult = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_LoadFormat {
    pub title: *const ::std::os::raw::c_char,
    pub extensions: *mut *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_DP_LoadFormat() {
    const UNINIT: ::std::mem::MaybeUninit<DP_LoadFormat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_LoadFormat>(),
        16usize,
        concat!("Size of: ", stringify!(DP_LoadFormat))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_LoadFormat>(),
        8usize,
        concat!("Alignment of ", stringify!(DP_LoadFormat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_LoadFormat),
            "::",
            stringify!(title)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extensions) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_LoadFormat),
            "::",
            stringify!(extensions)
        )
    );
}
extern "C" {
    pub fn DP_load_supported_formats() -> *const DP_LoadFormat;
}
pub type DP_LoadFixedLayerFn = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, layer_id: ::std::os::raw::c_int),
>;
extern "C" {
    pub fn DP_load_guess(buf: *const ::std::os::raw::c_uchar, size: usize) -> DP_SaveImageType;
}
extern "C" {
    pub fn DP_load(
        dc: *mut DP_DrawContext,
        path: *const ::std::os::raw::c_char,
        flat_image_layer_title: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
        out_result: *mut DP_LoadResult,
        out_type: *mut DP_SaveImageType,
    ) -> *mut DP_CanvasState;
}
extern "C" {
    pub fn DP_load_ora(
        dc: *mut DP_DrawContext,
        path: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
        on_fixed_layer: DP_LoadFixedLayerFn,
        user: *mut ::std::os::raw::c_void,
        out_result: *mut DP_LoadResult,
    ) -> *mut DP_CanvasState;
}
extern "C" {
    pub fn DP_load_psd(
        dc: *mut DP_DrawContext,
        input: *mut DP_Input,
        out_result: *mut DP_LoadResult,
    ) -> *mut DP_CanvasState;
}
extern "C" {
    pub fn DP_load_recording(
        path: *const ::std::os::raw::c_char,
        out_result: *mut DP_LoadResult,
    ) -> *mut DP_Player;
}
extern "C" {
    pub fn DP_load_debug_dump(
        path: *const ::std::os::raw::c_char,
        out_result: *mut DP_LoadResult,
    ) -> *mut DP_Player;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_PlayerIndexEntrySnapshot {
    _unused: [u8; 0],
}
pub type DP_PlayerIndexShouldSnapshotFn =
    ::std::option::Option<unsafe extern "C" fn(user: *mut ::std::os::raw::c_void) -> bool>;
pub type DP_PlayerIndexProgressFn = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, percent: ::std::os::raw::c_int),
>;
extern "C" {
    pub fn DP_player_index_build(
        player: *mut DP_Player,
        dc: *mut DP_DrawContext,
        should_snapshot_fn: DP_PlayerIndexShouldSnapshotFn,
        progress_fn: DP_PlayerIndexProgressFn,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn DP_player_index_load(player: *mut DP_Player) -> bool;
}
extern "C" {
    pub fn DP_player_index_message_count(player: *mut DP_Player) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn DP_player_index_entry_count(player: *mut DP_Player) -> usize;
}
extern "C" {
    pub fn DP_player_index_entry_search(
        player: *mut DP_Player,
        position: ::std::os::raw::c_longlong,
        after: bool,
    ) -> DP_PlayerIndexEntry;
}
extern "C" {
    pub fn DP_player_index_entry_load(
        player: *mut DP_Player,
        dc: *mut DP_DrawContext,
        entry: DP_PlayerIndexEntry,
    ) -> *mut DP_PlayerIndexEntrySnapshot;
}
extern "C" {
    pub fn DP_player_index_entry_snapshot_canvas_state_inc(
        snapshot: *mut DP_PlayerIndexEntrySnapshot,
    ) -> *mut DP_CanvasState;
}
extern "C" {
    pub fn DP_player_index_entry_snapshot_message_count(
        snapshot: *mut DP_PlayerIndexEntrySnapshot,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_player_index_entry_snapshot_message_at_inc(
        snapshot: *mut DP_PlayerIndexEntrySnapshot,
        i: ::std::os::raw::c_int,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_player_index_entry_snapshot_free(snapshot: *mut DP_PlayerIndexEntrySnapshot);
}
extern "C" {
    pub fn DP_player_index_thumbnail_at(
        player: *mut DP_Player,
        index: usize,
        out_error: *mut bool,
    ) -> *mut DP_Image;
}
extern "C" {
    pub fn DP_paint_engine_playback_step(
        pe: *mut DP_PaintEngine,
        steps: ::std::os::raw::c_longlong,
        push_message: DP_PaintEnginePushMessageFn,
        user: *mut ::std::os::raw::c_void,
    ) -> DP_PlayerResult;
}
extern "C" {
    pub fn DP_paint_engine_playback_skip_by(
        pe: *mut DP_PaintEngine,
        dc: *mut DP_DrawContext,
        steps: ::std::os::raw::c_longlong,
        by_snapshots: bool,
        push_message: DP_PaintEnginePushMessageFn,
        user: *mut ::std::os::raw::c_void,
    ) -> DP_PlayerResult;
}
extern "C" {
    pub fn DP_paint_engine_playback_jump_to(
        pe: *mut DP_PaintEngine,
        dc: *mut DP_DrawContext,
        position: ::std::os::raw::c_longlong,
        push_message: DP_PaintEnginePushMessageFn,
        user: *mut ::std::os::raw::c_void,
    ) -> DP_PlayerResult;
}
extern "C" {
    pub fn DP_paint_engine_playback_begin(pe: *mut DP_PaintEngine) -> DP_PlayerResult;
}
extern "C" {
    pub fn DP_paint_engine_playback_play(
        pe: *mut DP_PaintEngine,
        msecs: ::std::os::raw::c_longlong,
        filter_message_or_null: DP_PaintEngineFilterMessageFn,
        push_message: DP_PaintEnginePushMessageFn,
        user: *mut ::std::os::raw::c_void,
    ) -> DP_PlayerResult;
}
extern "C" {
    pub fn DP_paint_engine_playback_index_build(
        pe: *mut DP_PaintEngine,
        dc: *mut DP_DrawContext,
        should_snapshot_fn: DP_PlayerIndexShouldSnapshotFn,
        progress_fn: DP_PlayerIndexProgressFn,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn DP_paint_engine_playback_index_load(pe: *mut DP_PaintEngine) -> bool;
}
extern "C" {
    pub fn DP_paint_engine_playback_index_message_count(
        pe: *mut DP_PaintEngine,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn DP_paint_engine_playback_index_entry_count(pe: *mut DP_PaintEngine) -> usize;
}
extern "C" {
    pub fn DP_paint_engine_playback_index_thumbnail_at(
        pe: *mut DP_PaintEngine,
        index: usize,
        out_error: *mut bool,
    ) -> *mut DP_Image;
}
extern "C" {
    pub fn DP_paint_engine_playback_dump_step(
        pe: *mut DP_PaintEngine,
        push_message: DP_PaintEnginePushMessageFn,
        user: *mut ::std::os::raw::c_void,
    ) -> DP_PlayerResult;
}
extern "C" {
    pub fn DP_paint_engine_playback_dump_jump_previous_reset(
        pe: *mut DP_PaintEngine,
        push_message: DP_PaintEnginePushMessageFn,
        user: *mut ::std::os::raw::c_void,
    ) -> DP_PlayerResult;
}
extern "C" {
    pub fn DP_paint_engine_playback_dump_jump_next_reset(
        pe: *mut DP_PaintEngine,
        push_message: DP_PaintEnginePushMessageFn,
        user: *mut ::std::os::raw::c_void,
    ) -> DP_PlayerResult;
}
extern "C" {
    pub fn DP_paint_engine_playback_dump_jump(
        pe: *mut DP_PaintEngine,
        position: ::std::os::raw::c_longlong,
        push_message: DP_PaintEnginePushMessageFn,
        user: *mut ::std::os::raw::c_void,
    ) -> DP_PlayerResult;
}
extern "C" {
    pub fn DP_paint_engine_playback_flush(
        pe: *mut DP_PaintEngine,
        push_message: DP_PaintEnginePushMessageFn,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn DP_paint_engine_playback_close(pe: *mut DP_PaintEngine) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_Annotation {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_SaveFormat {
    pub title: *const ::std::os::raw::c_char,
    pub extensions: *mut *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_DP_SaveFormat() {
    const UNINIT: ::std::mem::MaybeUninit<DP_SaveFormat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_SaveFormat>(),
        16usize,
        concat!("Size of: ", stringify!(DP_SaveFormat))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_SaveFormat>(),
        8usize,
        concat!("Alignment of ", stringify!(DP_SaveFormat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_SaveFormat),
            "::",
            stringify!(title)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extensions) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_SaveFormat),
            "::",
            stringify!(extensions)
        )
    );
}
extern "C" {
    pub fn DP_save_supported_formats() -> *const DP_SaveFormat;
}
pub type DP_SaveBakeAnnotationFn = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        a: *mut DP_Annotation,
        out: *mut ::std::os::raw::c_uchar,
    ) -> bool,
>;
extern "C" {
    pub fn DP_save_image_type_guess(path: *const ::std::os::raw::c_char) -> DP_SaveImageType;
}
extern "C" {
    pub fn DP_save_image_type_is_flat_image(type_: DP_SaveImageType) -> bool;
}
extern "C" {
    pub fn DP_save(
        cs: *mut DP_CanvasState,
        dc: *mut DP_DrawContext,
        type_: DP_SaveImageType,
        path: *const ::std::os::raw::c_char,
        vmf_or_null: *const DP_ViewModeFilter,
        bake_annotation: DP_SaveBakeAnnotationFn,
        user: *mut ::std::os::raw::c_void,
    ) -> DP_SaveResult;
}
pub type DP_SaveAnimationProgressFn = ::std::option::Option<
    unsafe extern "C" fn(user: *mut ::std::os::raw::c_void, progress: f64) -> bool,
>;
extern "C" {
    pub fn DP_save_animation_frames(
        cs: *mut DP_CanvasState,
        dc: *mut DP_DrawContext,
        path: *const ::std::os::raw::c_char,
        crop: *mut DP_Rect,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        interpolation: ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        end_inclusive: ::std::os::raw::c_int,
        progress_fn: DP_SaveAnimationProgressFn,
        user: *mut ::std::os::raw::c_void,
    ) -> DP_SaveResult;
}
extern "C" {
    pub fn DP_save_animation_zip(
        cs: *mut DP_CanvasState,
        dc: *mut DP_DrawContext,
        path: *const ::std::os::raw::c_char,
        crop: *mut DP_Rect,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        interpolation: ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        end_inclusive: ::std::os::raw::c_int,
        progress_fn: DP_SaveAnimationProgressFn,
        user: *mut ::std::os::raw::c_void,
    ) -> DP_SaveResult;
}
pub const DP_ACCESS_TIER_OPERATOR: DP_AccessTier = 0;
pub const DP_ACCESS_TIER_TRUSTED: DP_AccessTier = 1;
pub const DP_ACCESS_TIER_AUTHENTICATED: DP_AccessTier = 2;
pub const DP_ACCESS_TIER_GUEST: DP_AccessTier = 3;
pub const DP_ACCESS_TIER_COUNT: DP_AccessTier = 4;
pub type DP_AccessTier = ::std::os::raw::c_uint;
pub const DP_FEATURE_PUT_IMAGE: DP_Feature = 0;
pub const DP_FEATURE_REGION_MOVE: DP_Feature = 1;
pub const DP_FEATURE_RESIZE: DP_Feature = 2;
pub const DP_FEATURE_BACKGROUND: DP_Feature = 3;
pub const DP_FEATURE_EDIT_LAYERS: DP_Feature = 4;
pub const DP_FEATURE_OWN_LAYERS: DP_Feature = 5;
pub const DP_FEATURE_CREATE_ANNOTATION: DP_Feature = 6;
pub const DP_FEATURE_LASER: DP_Feature = 7;
pub const DP_FEATURE_UNDO: DP_Feature = 8;
pub const DP_FEATURE_PIGMENT: DP_Feature = 9;
pub const DP_FEATURE_TIMELINE: DP_Feature = 10;
pub const DP_FEATURE_MYPAINT: DP_Feature = 11;
pub const DP_FEATURE_COUNT: DP_Feature = 12;
pub type DP_Feature = ::std::os::raw::c_uint;
pub const DP_FEATURE_LIMIT_BRUSH_SIZE: DP_FeatureLimit = 0;
pub const DP_FEATURE_LIMIT_COUNT: DP_FeatureLimit = 1;
pub type DP_FeatureLimit = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_FeatureTiers {
    pub tiers: [DP_AccessTier; 12usize],
    pub limits: [[::std::os::raw::c_int; 4usize]; 1usize],
}
#[test]
fn bindgen_test_layout_DP_FeatureTiers() {
    const UNINIT: ::std::mem::MaybeUninit<DP_FeatureTiers> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_FeatureTiers>(),
        64usize,
        concat!("Size of: ", stringify!(DP_FeatureTiers))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_FeatureTiers>(),
        4usize,
        concat!("Alignment of ", stringify!(DP_FeatureTiers))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_FeatureTiers),
            "::",
            stringify!(tiers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limits) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_FeatureTiers),
            "::",
            stringify!(limits)
        )
    );
}
pub type DP_UserBits = [u8; 32usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_UserAcls {
    pub operators: DP_UserBits,
    pub trusted: DP_UserBits,
    pub authenticated: DP_UserBits,
    pub locked: DP_UserBits,
    pub all_locked: bool,
}
#[test]
fn bindgen_test_layout_DP_UserAcls() {
    const UNINIT: ::std::mem::MaybeUninit<DP_UserAcls> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_UserAcls>(),
        129usize,
        concat!("Size of: ", stringify!(DP_UserAcls))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_UserAcls>(),
        1usize,
        concat!("Alignment of ", stringify!(DP_UserAcls))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).operators) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UserAcls),
            "::",
            stringify!(operators)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trusted) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UserAcls),
            "::",
            stringify!(trusted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).authenticated) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UserAcls),
            "::",
            stringify!(authenticated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locked) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UserAcls),
            "::",
            stringify!(locked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).all_locked) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_UserAcls),
            "::",
            stringify!(all_locked)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_LayerAcl {
    pub locked: bool,
    pub tier: DP_AccessTier,
    pub exclusive: DP_UserBits,
}
#[test]
fn bindgen_test_layout_DP_LayerAcl() {
    const UNINIT: ::std::mem::MaybeUninit<DP_LayerAcl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_LayerAcl>(),
        40usize,
        concat!("Size of: ", stringify!(DP_LayerAcl))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_LayerAcl>(),
        4usize,
        concat!("Alignment of ", stringify!(DP_LayerAcl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locked) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_LayerAcl),
            "::",
            stringify!(locked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tier) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_LayerAcl),
            "::",
            stringify!(tier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exclusive) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_LayerAcl),
            "::",
            stringify!(exclusive)
        )
    );
}
pub type DP_AclStateLayerFn = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        layer_id: ::std::os::raw::c_int,
        l: *const DP_LayerAcl,
    ),
>;
extern "C" {
    pub fn DP_access_tier_clamp(tier: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_access_tier_enum_name(tier: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_access_tier_name(tier: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_feature_enum_name(feature: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_feature_name(feature: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_feature_access_tier_default(
        feature: ::std::os::raw::c_int,
        fallback: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_feature_limit_enum_name(
        limit: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_feature_limit_name(limit: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_feature_limit_default(
        limit: ::std::os::raw::c_int,
        tier: ::std::os::raw::c_int,
        fallback: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_user_bit_get(users: *const u8, user_id: u8) -> bool;
}
extern "C" {
    pub fn DP_user_bit_set(users: *mut u8, user_id: u8);
}
extern "C" {
    pub fn DP_user_bit_unset(users: *mut u8, user_id: u8);
}
extern "C" {
    pub fn DP_user_bits_set(users: *mut u8, count: ::std::os::raw::c_int, user_ids: *const u8);
}
extern "C" {
    pub fn DP_user_bits_unset(users: *mut u8, count: ::std::os::raw::c_int, user_ids: *const u8);
}
extern "C" {
    pub fn DP_user_bits_replace(users: *mut u8, count: ::std::os::raw::c_int, user_ids: *const u8);
}
extern "C" {
    pub fn DP_user_acls_is_op(users: *const DP_UserAcls, user_id: u8) -> bool;
}
extern "C" {
    pub fn DP_user_acls_is_trusted(users: *const DP_UserAcls, user_id: u8) -> bool;
}
extern "C" {
    pub fn DP_user_acls_is_authenticated(users: *const DP_UserAcls, user_id: u8) -> bool;
}
extern "C" {
    pub fn DP_user_acls_is_locked(users: *const DP_UserAcls, user_id: u8) -> bool;
}
extern "C" {
    pub fn DP_user_acls_tier(users: *const DP_UserAcls, user_id: u8) -> DP_AccessTier;
}
extern "C" {
    pub fn DP_acl_state_new() -> *mut DP_AclState;
}
extern "C" {
    pub fn DP_acl_state_new_playback() -> *mut DP_AclState;
}
extern "C" {
    pub fn DP_acl_state_new_clone(acls: *mut DP_AclState, local_user_id: u8) -> *mut DP_AclState;
}
extern "C" {
    pub fn DP_acl_state_free(acls: *mut DP_AclState);
}
extern "C" {
    pub fn DP_acl_state_reset(acls: *mut DP_AclState, local_user_id: u8);
}
extern "C" {
    pub fn DP_acl_state_dump(acls: *mut DP_AclState) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_acl_state_local_user_id(acls: *mut DP_AclState) -> u8;
}
extern "C" {
    pub fn DP_acl_state_users(acls: *mut DP_AclState) -> DP_UserAcls;
}
extern "C" {
    pub fn DP_acl_state_feature_tiers(acls: *mut DP_AclState) -> DP_FeatureTiers;
}
extern "C" {
    pub fn DP_acl_state_layers_each(
        acls: *mut DP_AclState,
        fn_: DP_AclStateLayerFn,
        user: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn DP_acl_state_is_op(acls: *mut DP_AclState, user_id: u8) -> bool;
}
extern "C" {
    pub fn DP_acl_state_user_tier(acls: *mut DP_AclState, user_id: u8) -> DP_AccessTier;
}
extern "C" {
    pub fn DP_acl_state_can_use_feature(
        acls: *mut DP_AclState,
        feature: DP_Feature,
        user_id: u8,
    ) -> bool;
}
extern "C" {
    pub fn DP_acl_state_layer_locked_for(
        acls: *mut DP_AclState,
        user_id: u8,
        layer_id: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn DP_acl_state_annotation_locked(
        acls: *mut DP_AclState,
        annotation_id: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn DP_acl_state_handle(acls: *mut DP_AclState, msg: *mut DP_Message, override_: bool)
        -> u8;
}
extern "C" {
    pub fn DP_acl_state_msg_feature_access_all_new(
        context_id: ::std::os::raw::c_uint,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_acl_state_msg_feature_limits_none_new(
        context_id: ::std::os::raw::c_uint,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_acl_state_reset_image_build(
        acls: *mut DP_AclState,
        context_id: ::std::os::raw::c_uint,
        include_flags: ::std::os::raw::c_uint,
        override_feature_tier: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: DP_Feature,
                arg3: DP_AccessTier,
            ) -> DP_AccessTier,
        >,
        push_message: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: *mut DP_Message) -> bool,
        >,
        user: *mut ::std::os::raw::c_void,
    ) -> bool;
}
pub const DP_BLEND_MODE_ERASE: DP_BlendMode = 0;
pub const DP_BLEND_MODE_NORMAL: DP_BlendMode = 1;
pub const DP_BLEND_MODE_MULTIPLY: DP_BlendMode = 2;
pub const DP_BLEND_MODE_DIVIDE: DP_BlendMode = 3;
pub const DP_BLEND_MODE_BURN: DP_BlendMode = 4;
pub const DP_BLEND_MODE_DODGE: DP_BlendMode = 5;
pub const DP_BLEND_MODE_DARKEN: DP_BlendMode = 6;
pub const DP_BLEND_MODE_LIGHTEN: DP_BlendMode = 7;
pub const DP_BLEND_MODE_SUBTRACT: DP_BlendMode = 8;
pub const DP_BLEND_MODE_ADD: DP_BlendMode = 9;
pub const DP_BLEND_MODE_RECOLOR: DP_BlendMode = 10;
pub const DP_BLEND_MODE_BEHIND: DP_BlendMode = 11;
pub const DP_BLEND_MODE_COLOR_ERASE: DP_BlendMode = 12;
pub const DP_BLEND_MODE_SCREEN: DP_BlendMode = 13;
pub const DP_BLEND_MODE_NORMAL_AND_ERASER: DP_BlendMode = 14;
pub const DP_BLEND_MODE_LUMINOSITY_SHINE_SAI: DP_BlendMode = 15;
pub const DP_BLEND_MODE_OVERLAY: DP_BlendMode = 16;
pub const DP_BLEND_MODE_HARD_LIGHT: DP_BlendMode = 17;
pub const DP_BLEND_MODE_SOFT_LIGHT: DP_BlendMode = 18;
pub const DP_BLEND_MODE_LINEAR_BURN: DP_BlendMode = 19;
pub const DP_BLEND_MODE_LINEAR_LIGHT: DP_BlendMode = 20;
pub const DP_BLEND_MODE_HUE: DP_BlendMode = 21;
pub const DP_BLEND_MODE_SATURATION: DP_BlendMode = 22;
pub const DP_BLEND_MODE_LUMINOSITY: DP_BlendMode = 23;
pub const DP_BLEND_MODE_COLOR: DP_BlendMode = 24;
pub const DP_BLEND_MODE_COMPARE_DENSITY_SOFT: DP_BlendMode = 25;
pub const DP_BLEND_MODE_COMPARE_DENSITY: DP_BlendMode = 26;
pub const DP_BLEND_MODE_VIVID_LIGHT: DP_BlendMode = 27;
pub const DP_BLEND_MODE_PIN_LIGHT: DP_BlendMode = 28;
pub const DP_BLEND_MODE_DIFFERENCE: DP_BlendMode = 29;
pub const DP_BLEND_MODE_DARKER_COLOR: DP_BlendMode = 30;
pub const DP_BLEND_MODE_LIGHTER_COLOR: DP_BlendMode = 31;
pub const DP_BLEND_MODE_SHADE_SAI: DP_BlendMode = 32;
pub const DP_BLEND_MODE_SHADE_SHINE_SAI: DP_BlendMode = 33;
pub const DP_BLEND_MODE_BURN_SAI: DP_BlendMode = 34;
pub const DP_BLEND_MODE_DODGE_SAI: DP_BlendMode = 35;
pub const DP_BLEND_MODE_BURN_DODGE_SAI: DP_BlendMode = 36;
pub const DP_BLEND_MODE_HARD_MIX_SAI: DP_BlendMode = 37;
pub const DP_BLEND_MODE_DIFFERENCE_SAI: DP_BlendMode = 38;
pub const DP_BLEND_MODE_MARKER: DP_BlendMode = 39;
pub const DP_BLEND_MODE_MARKER_WASH: DP_BlendMode = 40;
pub const DP_BLEND_MODE_GREATER: DP_BlendMode = 41;
pub const DP_BLEND_MODE_GREATER_WASH: DP_BlendMode = 42;
pub const DP_BLEND_MODE_PIGMENT: DP_BlendMode = 43;
pub const DP_BLEND_MODE_LIGHT_TO_ALPHA: DP_BlendMode = 44;
pub const DP_BLEND_MODE_DARK_TO_ALPHA: DP_BlendMode = 45;
pub const DP_BLEND_MODE_MULTIPLY_ALPHA: DP_BlendMode = 46;
pub const DP_BLEND_MODE_DIVIDE_ALPHA: DP_BlendMode = 47;
pub const DP_BLEND_MODE_BURN_ALPHA: DP_BlendMode = 48;
pub const DP_BLEND_MODE_DODGE_ALPHA: DP_BlendMode = 49;
pub const DP_BLEND_MODE_DARKEN_ALPHA: DP_BlendMode = 50;
pub const DP_BLEND_MODE_LIGHTEN_ALPHA: DP_BlendMode = 51;
pub const DP_BLEND_MODE_SUBTRACT_ALPHA: DP_BlendMode = 52;
pub const DP_BLEND_MODE_ADD_ALPHA: DP_BlendMode = 53;
pub const DP_BLEND_MODE_SCREEN_ALPHA: DP_BlendMode = 54;
pub const DP_BLEND_MODE_LUMINOSITY_SHINE_SAI_ALPHA: DP_BlendMode = 55;
pub const DP_BLEND_MODE_OVERLAY_ALPHA: DP_BlendMode = 56;
pub const DP_BLEND_MODE_HARD_LIGHT_ALPHA: DP_BlendMode = 57;
pub const DP_BLEND_MODE_SOFT_LIGHT_ALPHA: DP_BlendMode = 58;
pub const DP_BLEND_MODE_LINEAR_BURN_ALPHA: DP_BlendMode = 59;
pub const DP_BLEND_MODE_LINEAR_LIGHT_ALPHA: DP_BlendMode = 60;
pub const DP_BLEND_MODE_HUE_ALPHA: DP_BlendMode = 61;
pub const DP_BLEND_MODE_SATURATION_ALPHA: DP_BlendMode = 62;
pub const DP_BLEND_MODE_LUMINOSITY_ALPHA: DP_BlendMode = 63;
pub const DP_BLEND_MODE_COLOR_ALPHA: DP_BlendMode = 64;
pub const DP_BLEND_MODE_VIVID_LIGHT_ALPHA: DP_BlendMode = 65;
pub const DP_BLEND_MODE_PIN_LIGHT_ALPHA: DP_BlendMode = 66;
pub const DP_BLEND_MODE_DIFFERENCE_ALPHA: DP_BlendMode = 67;
pub const DP_BLEND_MODE_DARKER_COLOR_ALPHA: DP_BlendMode = 68;
pub const DP_BLEND_MODE_LIGHTER_COLOR_ALPHA: DP_BlendMode = 69;
pub const DP_BLEND_MODE_SHADE_SAI_ALPHA: DP_BlendMode = 70;
pub const DP_BLEND_MODE_SHADE_SHINE_SAI_ALPHA: DP_BlendMode = 71;
pub const DP_BLEND_MODE_BURN_SAI_ALPHA: DP_BlendMode = 72;
pub const DP_BLEND_MODE_DODGE_SAI_ALPHA: DP_BlendMode = 73;
pub const DP_BLEND_MODE_BURN_DODGE_SAI_ALPHA: DP_BlendMode = 74;
pub const DP_BLEND_MODE_HARD_MIX_SAI_ALPHA: DP_BlendMode = 75;
pub const DP_BLEND_MODE_DIFFERENCE_SAI_ALPHA: DP_BlendMode = 76;
pub const DP_BLEND_MODE_MARKER_ALPHA: DP_BlendMode = 77;
pub const DP_BLEND_MODE_MARKER_ALPHA_WASH: DP_BlendMode = 78;
pub const DP_BLEND_MODE_GREATER_ALPHA: DP_BlendMode = 79;
pub const DP_BLEND_MODE_GREATER_ALPHA_WASH: DP_BlendMode = 80;
pub const DP_BLEND_MODE_PIGMENT_ALPHA: DP_BlendMode = 81;
pub const DP_BLEND_MODE_PIGMENT_AND_ERASER: DP_BlendMode = 82;
pub const DP_BLEND_MODE_ERASE_PRESERVE: DP_BlendMode = 83;
pub const DP_BLEND_MODE_BEHIND_PRESERVE: DP_BlendMode = 84;
pub const DP_BLEND_MODE_COLOR_ERASE_PRESERVE: DP_BlendMode = 85;
pub const DP_BLEND_MODE_LIGHT_TO_ALPHA_PRESERVE: DP_BlendMode = 86;
pub const DP_BLEND_MODE_DARK_TO_ALPHA_PRESERVE: DP_BlendMode = 87;
pub const DP_BLEND_MODE_LAST_EXCEPT_REPLACE: DP_BlendMode = 88;
pub const DP_BLEND_MODE_COMPAT_LOCAL_MATCH: DP_BlendMode = 252;
pub const DP_BLEND_MODE_REPLACE: DP_BlendMode = 255;
pub const DP_BLEND_MODE_COUNT: DP_BlendMode = 256;
pub type DP_BlendMode = ::std::os::raw::c_uint;
pub const DP_PAINT_MODE_DIRECT: DP_PaintMode = 0;
pub const DP_PAINT_MODE_INDIRECT_WASH: DP_PaintMode = 1;
pub const DP_PAINT_MODE_INDIRECT_SOFT: DP_PaintMode = 2;
pub const DP_PAINT_MODE_INDIRECT_NORMAL: DP_PaintMode = 3;
pub const DP_PAINT_MODE_COUNT: DP_PaintMode = 4;
pub type DP_PaintMode = ::std::os::raw::c_uint;
extern "C" {
    pub fn DP_blend_mode_exists(blend_mode: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn DP_blend_mode_valid_for_layer(blend_mode: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn DP_blend_mode_valid_for_brush(blend_mode: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn DP_blend_mode_secondary_alias(blend_mode: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn DP_blend_mode_enum_name(
        blend_mode: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_blend_mode_enum_name_unprefixed(
        blend_mode: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_blend_mode_ora_name(
        blend_mode: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_blend_mode_dptxt_name(
        blend_mode: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_blend_mode_can_increase_opacity(blend_mode: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn DP_blend_mode_can_decrease_opacity(blend_mode: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn DP_blend_mode_blend_blank(blend_mode: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn DP_blend_mode_preserves_alpha(blend_mode: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn DP_blend_mode_presents_as_eraser(blend_mode: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn DP_blend_mode_presents_as_alpha_preserving(blend_mode: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn DP_blend_mode_compares_alpha(blend_mode: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn DP_blend_mode_direct_only(blend_mode: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn DP_blend_mode_by_ora_name(
        svg_name: *const ::std::os::raw::c_char,
        not_found_value: DP_BlendMode,
    ) -> DP_BlendMode;
}
extern "C" {
    pub fn DP_blend_mode_by_dptxt_name(
        svg_name: *const ::std::os::raw::c_char,
        not_found_value: DP_BlendMode,
    ) -> DP_BlendMode;
}
extern "C" {
    pub fn DP_blend_mode_alpha_preserve_pair(
        blend_mode: ::std::os::raw::c_int,
        out_alpha_affecting: *mut DP_BlendMode,
        out_alpha_preserving: *mut DP_BlendMode,
    ) -> bool;
}
extern "C" {
    pub fn DP_blend_mode_to_alpha_affecting(
        blend_mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_blend_mode_to_alpha_preserving(
        blend_mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_paint_mode_exists(paint_mode: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn DP_paint_mode_enum_name(
        paint_mode: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_paint_mode_enum_name_unprefixed(
        paint_mode: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_paint_mode_setting_name(
        paint_mode: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_paint_mode_by_setting_name(
        setting_name: *const ::std::os::raw::c_char,
        not_found_value: DP_PaintMode,
    ) -> DP_PaintMode;
}
extern "C" {
    pub fn DP_paint_mode_indirect(
        paint_mode: ::std::os::raw::c_int,
        out_blend_mode: *mut ::std::os::raw::c_int,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_TextReader {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_TextWriter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MessageMethods {
    pub payload_length: ::std::option::Option<unsafe extern "C" fn(msg: *mut DP_Message) -> usize>,
    pub serialize_payload: ::std::option::Option<
        unsafe extern "C" fn(msg: *mut DP_Message, data: *mut ::std::os::raw::c_uchar) -> usize,
    >,
    pub write_payload_text: ::std::option::Option<
        unsafe extern "C" fn(msg: *mut DP_Message, writer: *mut DP_TextWriter) -> bool,
    >,
    pub equals: ::std::option::Option<
        unsafe extern "C" fn(msg: *mut DP_Message, other: *mut DP_Message) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_DP_MessageMethods() {
    const UNINIT: ::std::mem::MaybeUninit<DP_MessageMethods> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP_MessageMethods>(),
        32usize,
        concat!("Size of: ", stringify!(DP_MessageMethods))
    );
    assert_eq!(
        ::std::mem::align_of::<DP_MessageMethods>(),
        8usize,
        concat!("Alignment of ", stringify!(DP_MessageMethods))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).payload_length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_MessageMethods),
            "::",
            stringify!(payload_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serialize_payload) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_MessageMethods),
            "::",
            stringify!(serialize_payload)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_payload_text) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_MessageMethods),
            "::",
            stringify!(write_payload_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).equals) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DP_MessageMethods),
            "::",
            stringify!(equals)
        )
    );
}
pub const DP_MSG_SERVER_COMMAND: DP_MessageType = 0;
pub const DP_MSG_DISCONNECT: DP_MessageType = 1;
pub const DP_MSG_PING: DP_MessageType = 2;
pub const DP_MSG_KEEP_ALIVE: DP_MessageType = 3;
pub const DP_MSG_INTERNAL: DP_MessageType = 31;
pub const DP_MSG_JOIN: DP_MessageType = 32;
pub const DP_MSG_LEAVE: DP_MessageType = 33;
pub const DP_MSG_SESSION_OWNER: DP_MessageType = 34;
pub const DP_MSG_CHAT: DP_MessageType = 35;
pub const DP_MSG_TRUSTED_USERS: DP_MessageType = 36;
pub const DP_MSG_SOFT_RESET: DP_MessageType = 37;
pub const DP_MSG_PRIVATE_CHAT: DP_MessageType = 38;
pub const DP_MSG_RESET_STREAM: DP_MessageType = 39;
pub const DP_MSG_INTERVAL: DP_MessageType = 64;
pub const DP_MSG_LASER_TRAIL: DP_MessageType = 65;
pub const DP_MSG_MOVE_POINTER: DP_MessageType = 66;
pub const DP_MSG_REMOVED_MARKER: DP_MessageType = 67;
pub const DP_MSG_USER_ACL: DP_MessageType = 68;
pub const DP_MSG_LAYER_ACL: DP_MessageType = 69;
pub const DP_MSG_FEATURE_ACCESS_LEVELS: DP_MessageType = 70;
pub const DP_MSG_DEFAULT_LAYER: DP_MessageType = 71;
pub const DP_MSG_REMOVED_FILTERED: DP_MessageType = 72;
pub const DP_MSG_EXTENSION: DP_MessageType = 73;
pub const DP_MSG_UNDO_DEPTH: DP_MessageType = 74;
pub const DP_MSG_DATA: DP_MessageType = 75;
pub const DP_MSG_LOCAL_CHANGE: DP_MessageType = 76;
pub const DP_MSG_FEATURE_LIMITS: DP_MessageType = 77;
pub const DP_MSG_UNDO_POINT: DP_MessageType = 128;
pub const DP_MSG_CANVAS_RESIZE: DP_MessageType = 129;
pub const DP_MSG_REMOVED_LAYER_CREATE: DP_MessageType = 130;
pub const DP_MSG_LAYER_ATTRIBUTES: DP_MessageType = 131;
pub const DP_MSG_LAYER_RETITLE: DP_MessageType = 132;
pub const DP_MSG_REMOVED_LAYER_ORDER: DP_MessageType = 133;
pub const DP_MSG_REMOVED_LAYER_DELETE: DP_MessageType = 134;
pub const DP_MSG_REMOVED_LAYER_VISIBILITY: DP_MessageType = 135;
pub const DP_MSG_PUT_IMAGE: DP_MessageType = 136;
pub const DP_MSG_FILL_RECT: DP_MessageType = 137;
pub const DP_MSG_REMOVED_TOOL_CHANGE: DP_MessageType = 138;
pub const DP_MSG_REMOVED_PEN_MOVE: DP_MessageType = 139;
pub const DP_MSG_PEN_UP: DP_MessageType = 140;
pub const DP_MSG_ANNOTATION_CREATE: DP_MessageType = 141;
pub const DP_MSG_ANNOTATION_RESHAPE: DP_MessageType = 142;
pub const DP_MSG_ANNOTATION_EDIT: DP_MessageType = 143;
pub const DP_MSG_ANNOTATION_DELETE: DP_MessageType = 144;
pub const DP_MSG_REMOVED_MOVE_REGION: DP_MessageType = 145;
pub const DP_MSG_PUT_TILE: DP_MessageType = 146;
pub const DP_MSG_CANVAS_BACKGROUND: DP_MessageType = 147;
pub const DP_MSG_DRAW_DABS_CLASSIC: DP_MessageType = 148;
pub const DP_MSG_DRAW_DABS_PIXEL: DP_MessageType = 149;
pub const DP_MSG_DRAW_DABS_PIXEL_SQUARE: DP_MessageType = 150;
pub const DP_MSG_DRAW_DABS_MYPAINT: DP_MessageType = 151;
pub const DP_MSG_DRAW_DABS_MYPAINT_BLEND: DP_MessageType = 152;
pub const DP_MSG_MOVE_RECT: DP_MessageType = 160;
pub const DP_MSG_SET_METADATA_INT: DP_MessageType = 161;
pub const DP_MSG_LAYER_TREE_CREATE: DP_MessageType = 162;
pub const DP_MSG_LAYER_TREE_MOVE: DP_MessageType = 163;
pub const DP_MSG_LAYER_TREE_DELETE: DP_MessageType = 164;
pub const DP_MSG_TRANSFORM_REGION: DP_MessageType = 165;
pub const DP_MSG_TRACK_CREATE: DP_MessageType = 166;
pub const DP_MSG_TRACK_RETITLE: DP_MessageType = 167;
pub const DP_MSG_TRACK_DELETE: DP_MessageType = 168;
pub const DP_MSG_TRACK_ORDER: DP_MessageType = 169;
pub const DP_MSG_KEY_FRAME_SET: DP_MessageType = 170;
pub const DP_MSG_KEY_FRAME_RETITLE: DP_MessageType = 171;
pub const DP_MSG_KEY_FRAME_LAYER_ATTRIBUTES: DP_MessageType = 172;
pub const DP_MSG_KEY_FRAME_DELETE: DP_MessageType = 173;
pub const DP_MSG_SELECTION_PUT: DP_MessageType = 174;
pub const DP_MSG_SELECTION_CLEAR: DP_MessageType = 175;
pub const DP_MSG_LOCAL_MATCH: DP_MessageType = 176;
pub const DP_MSG_UNDO: DP_MessageType = 255;
pub const DP_MSG_TYPE_COUNT: DP_MessageType = 256;
pub type DP_MessageType = ::std::os::raw::c_uint;
extern "C" {
    pub fn DP_message_type_control(type_: DP_MessageType) -> bool;
}
extern "C" {
    pub fn DP_message_type_client_meta(type_: DP_MessageType) -> bool;
}
extern "C" {
    pub fn DP_message_type_server_meta(type_: DP_MessageType) -> bool;
}
extern "C" {
    pub fn DP_message_type_command(type_: DP_MessageType) -> bool;
}
extern "C" {
    pub fn DP_message_type_name(type_: DP_MessageType) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_message_type_enum_name(type_: DP_MessageType) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_message_type_enum_name_unprefixed(
        type_: DP_MessageType,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_message_type_from_name(
        type_name: *const ::std::os::raw::c_char,
        not_found_value: DP_MessageType,
    ) -> DP_MessageType;
}
extern "C" {
    pub fn DP_message_type_parse_multiline_tuples(type_: DP_MessageType) -> bool;
}
extern "C" {
    pub fn DP_message_deserialize_body(
        type_: ::std::os::raw::c_int,
        context_id: ::std::os::raw::c_uint,
        buf: *const ::std::os::raw::c_uchar,
        length: usize,
        decode_opaque: bool,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_message_parse_body(
        type_: DP_MessageType,
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgServerCommand {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_server_command_new(
        context_id: ::std::os::raw::c_uint,
        msg_value: *const ::std::os::raw::c_char,
        msg_len: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_server_command_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_server_command_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_server_command_cast(msg: *mut DP_Message) -> *mut DP_MsgServerCommand;
}
extern "C" {
    pub fn DP_msg_server_command_msg(
        msc: *const DP_MsgServerCommand,
        out_len: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_msg_server_command_msg_len(msc: *const DP_MsgServerCommand) -> usize;
}
extern "C" {
    pub fn DP_msg_disconnect_reason_variant_name(
        value: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgDisconnect {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_disconnect_new(
        context_id: ::std::os::raw::c_uint,
        reason: u8,
        message_value: *const ::std::os::raw::c_char,
        message_len: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_disconnect_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_disconnect_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_disconnect_cast(msg: *mut DP_Message) -> *mut DP_MsgDisconnect;
}
extern "C" {
    pub fn DP_msg_disconnect_reason(md: *const DP_MsgDisconnect) -> u8;
}
extern "C" {
    pub fn DP_msg_disconnect_message(
        md: *const DP_MsgDisconnect,
        out_len: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_msg_disconnect_message_len(md: *const DP_MsgDisconnect) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgPing {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_ping_new(context_id: ::std::os::raw::c_uint, is_pong: bool) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_ping_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_ping_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_ping_cast(msg: *mut DP_Message) -> *mut DP_MsgPing;
}
extern "C" {
    pub fn DP_msg_ping_is_pong(mp: *const DP_MsgPing) -> bool;
}
extern "C" {
    pub fn DP_msg_keep_alive_new(context_id: ::std::os::raw::c_uint) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_keep_alive_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_keep_alive_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_join_flags_flag_name(
        value: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgJoin {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_join_new(
        context_id: ::std::os::raw::c_uint,
        flags: u8,
        name_value: *const ::std::os::raw::c_char,
        name_len: usize,
        set_avatar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: usize,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        avatar_size: usize,
        avatar_user: *mut ::std::os::raw::c_void,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_join_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_join_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_join_cast(msg: *mut DP_Message) -> *mut DP_MsgJoin;
}
extern "C" {
    pub fn DP_msg_join_flags(mj: *const DP_MsgJoin) -> u8;
}
extern "C" {
    pub fn DP_msg_join_name(
        mj: *const DP_MsgJoin,
        out_len: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_msg_join_name_len(mj: *const DP_MsgJoin) -> usize;
}
extern "C" {
    pub fn DP_msg_join_avatar(
        mj: *const DP_MsgJoin,
        out_size: *mut usize,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn DP_msg_join_avatar_size(mj: *const DP_MsgJoin) -> usize;
}
extern "C" {
    pub fn DP_msg_leave_new(context_id: ::std::os::raw::c_uint) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_leave_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_leave_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgSessionOwner {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_session_owner_new(
        context_id: ::std::os::raw::c_uint,
        set_users: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut u8,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        users_count: ::std::os::raw::c_int,
        users_user: *mut ::std::os::raw::c_void,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_session_owner_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_session_owner_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_session_owner_cast(msg: *mut DP_Message) -> *mut DP_MsgSessionOwner;
}
extern "C" {
    pub fn DP_msg_session_owner_users(
        mso: *const DP_MsgSessionOwner,
        out_count: *mut ::std::os::raw::c_int,
    ) -> *const u8;
}
extern "C" {
    pub fn DP_msg_session_owner_users_count(
        mso: *const DP_MsgSessionOwner,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_msg_chat_tflags_flag_name(
        value: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_msg_chat_oflags_flag_name(
        value: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgChat {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_chat_new(
        context_id: ::std::os::raw::c_uint,
        tflags: u8,
        oflags: u8,
        message_value: *const ::std::os::raw::c_char,
        message_len: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_chat_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_chat_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_chat_cast(msg: *mut DP_Message) -> *mut DP_MsgChat;
}
extern "C" {
    pub fn DP_msg_chat_tflags(mc: *const DP_MsgChat) -> u8;
}
extern "C" {
    pub fn DP_msg_chat_oflags(mc: *const DP_MsgChat) -> u8;
}
extern "C" {
    pub fn DP_msg_chat_message(
        mc: *const DP_MsgChat,
        out_len: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_msg_chat_message_len(mc: *const DP_MsgChat) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgTrustedUsers {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_trusted_users_new(
        context_id: ::std::os::raw::c_uint,
        set_users: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut u8,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        users_count: ::std::os::raw::c_int,
        users_user: *mut ::std::os::raw::c_void,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_trusted_users_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_trusted_users_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_trusted_users_cast(msg: *mut DP_Message) -> *mut DP_MsgTrustedUsers;
}
extern "C" {
    pub fn DP_msg_trusted_users_users(
        mtu: *const DP_MsgTrustedUsers,
        out_count: *mut ::std::os::raw::c_int,
    ) -> *const u8;
}
extern "C" {
    pub fn DP_msg_trusted_users_users_count(
        mtu: *const DP_MsgTrustedUsers,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_msg_soft_reset_new(context_id: ::std::os::raw::c_uint) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_soft_reset_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_soft_reset_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgPrivateChat {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_private_chat_new(
        context_id: ::std::os::raw::c_uint,
        target: u8,
        oflags: u8,
        message_value: *const ::std::os::raw::c_char,
        message_len: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_private_chat_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_private_chat_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_private_chat_cast(msg: *mut DP_Message) -> *mut DP_MsgPrivateChat;
}
extern "C" {
    pub fn DP_msg_private_chat_target(mpc: *const DP_MsgPrivateChat) -> u8;
}
extern "C" {
    pub fn DP_msg_private_chat_oflags(mpc: *const DP_MsgPrivateChat) -> u8;
}
extern "C" {
    pub fn DP_msg_private_chat_message(
        mpc: *const DP_MsgPrivateChat,
        out_len: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_msg_private_chat_message_len(mpc: *const DP_MsgPrivateChat) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgResetStream {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_reset_stream_new(
        context_id: ::std::os::raw::c_uint,
        set_data: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: usize,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        data_size: usize,
        data_user: *mut ::std::os::raw::c_void,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_reset_stream_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_reset_stream_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_reset_stream_cast(msg: *mut DP_Message) -> *mut DP_MsgResetStream;
}
extern "C" {
    pub fn DP_msg_reset_stream_data(
        mrs: *const DP_MsgResetStream,
        out_size: *mut usize,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn DP_msg_reset_stream_data_size(mrs: *const DP_MsgResetStream) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgInterval {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_interval_new(context_id: ::std::os::raw::c_uint, msecs: u16) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_interval_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_interval_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_interval_cast(msg: *mut DP_Message) -> *mut DP_MsgInterval;
}
extern "C" {
    pub fn DP_msg_interval_msecs(mi: *const DP_MsgInterval) -> u16;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgLaserTrail {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_laser_trail_new(
        context_id: ::std::os::raw::c_uint,
        color: u32,
        persistence: u8,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_laser_trail_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_laser_trail_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_laser_trail_cast(msg: *mut DP_Message) -> *mut DP_MsgLaserTrail;
}
extern "C" {
    pub fn DP_msg_laser_trail_color(mlt: *const DP_MsgLaserTrail) -> u32;
}
extern "C" {
    pub fn DP_msg_laser_trail_persistence(mlt: *const DP_MsgLaserTrail) -> u8;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgMovePointer {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_move_pointer_new(
        context_id: ::std::os::raw::c_uint,
        x: i32,
        y: i32,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_move_pointer_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_move_pointer_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_move_pointer_cast(msg: *mut DP_Message) -> *mut DP_MsgMovePointer;
}
extern "C" {
    pub fn DP_msg_move_pointer_x(mmp: *const DP_MsgMovePointer) -> i32;
}
extern "C" {
    pub fn DP_msg_move_pointer_y(mmp: *const DP_MsgMovePointer) -> i32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgUserAcl {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_user_acl_new(
        context_id: ::std::os::raw::c_uint,
        set_users: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut u8,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        users_count: ::std::os::raw::c_int,
        users_user: *mut ::std::os::raw::c_void,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_user_acl_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_user_acl_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_user_acl_cast(msg: *mut DP_Message) -> *mut DP_MsgUserAcl;
}
extern "C" {
    pub fn DP_msg_user_acl_users(
        mua: *const DP_MsgUserAcl,
        out_count: *mut ::std::os::raw::c_int,
    ) -> *const u8;
}
extern "C" {
    pub fn DP_msg_user_acl_users_count(mua: *const DP_MsgUserAcl) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgLayerAcl {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_layer_acl_new(
        context_id: ::std::os::raw::c_uint,
        id: u32,
        flags: u8,
        set_exclusive: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut u8,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        exclusive_count: ::std::os::raw::c_int,
        exclusive_user: *mut ::std::os::raw::c_void,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_layer_acl_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_layer_acl_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_layer_acl_cast(msg: *mut DP_Message) -> *mut DP_MsgLayerAcl;
}
extern "C" {
    pub fn DP_msg_layer_acl_id(mla: *const DP_MsgLayerAcl) -> u32;
}
extern "C" {
    pub fn DP_msg_layer_acl_flags(mla: *const DP_MsgLayerAcl) -> u8;
}
extern "C" {
    pub fn DP_msg_layer_acl_exclusive(
        mla: *const DP_MsgLayerAcl,
        out_count: *mut ::std::os::raw::c_int,
    ) -> *const u8;
}
extern "C" {
    pub fn DP_msg_layer_acl_exclusive_count(mla: *const DP_MsgLayerAcl) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgFeatureAccessLevels {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_feature_access_levels_new(
        context_id: ::std::os::raw::c_uint,
        set_feature_tiers: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut u8,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        feature_tiers_count: ::std::os::raw::c_int,
        feature_tiers_user: *mut ::std::os::raw::c_void,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_feature_access_levels_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_feature_access_levels_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_feature_access_levels_cast(
        msg: *mut DP_Message,
    ) -> *mut DP_MsgFeatureAccessLevels;
}
extern "C" {
    pub fn DP_msg_feature_access_levels_feature_tiers(
        mfal: *const DP_MsgFeatureAccessLevels,
        out_count: *mut ::std::os::raw::c_int,
    ) -> *const u8;
}
extern "C" {
    pub fn DP_msg_feature_access_levels_feature_tiers_count(
        mfal: *const DP_MsgFeatureAccessLevels,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgDefaultLayer {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_default_layer_new(context_id: ::std::os::raw::c_uint, id: u32)
        -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_default_layer_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_default_layer_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_default_layer_cast(msg: *mut DP_Message) -> *mut DP_MsgDefaultLayer;
}
extern "C" {
    pub fn DP_msg_default_layer_id(mdl: *const DP_MsgDefaultLayer) -> u32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgUndoDepth {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_undo_depth_new(context_id: ::std::os::raw::c_uint, depth: u8) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_undo_depth_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_undo_depth_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_undo_depth_cast(msg: *mut DP_Message) -> *mut DP_MsgUndoDepth;
}
extern "C" {
    pub fn DP_msg_undo_depth_depth(mud: *const DP_MsgUndoDepth) -> u8;
}
extern "C" {
    pub fn DP_msg_data_type_variant_name(
        value: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgData {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_data_new(
        context_id: ::std::os::raw::c_uint,
        type_: u8,
        recipient: u8,
        set_body: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: usize,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        body_size: usize,
        body_user: *mut ::std::os::raw::c_void,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_data_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_data_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_data_cast(msg: *mut DP_Message) -> *mut DP_MsgData;
}
extern "C" {
    pub fn DP_msg_data_type(md: *const DP_MsgData) -> u8;
}
extern "C" {
    pub fn DP_msg_data_recipient(md: *const DP_MsgData) -> u8;
}
extern "C" {
    pub fn DP_msg_data_body(
        md: *const DP_MsgData,
        out_size: *mut usize,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn DP_msg_data_body_size(md: *const DP_MsgData) -> usize;
}
extern "C" {
    pub fn DP_msg_local_change_type_variant_name(
        value: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_msg_local_change_new(
        context_id: ::std::os::raw::c_uint,
        type_: u8,
        set_body: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: usize,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        body_size: usize,
        body_user: *mut ::std::os::raw::c_void,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_local_change_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_local_change_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_local_change_cast(msg: *mut DP_Message) -> *mut DP_MsgLocalChange;
}
extern "C" {
    pub fn DP_msg_local_change_type(mlc: *const DP_MsgLocalChange) -> u8;
}
extern "C" {
    pub fn DP_msg_local_change_body(
        mlc: *const DP_MsgLocalChange,
        out_size: *mut usize,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn DP_msg_local_change_body_size(mlc: *const DP_MsgLocalChange) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgFeatureLimits {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_feature_limits_new(
        context_id: ::std::os::raw::c_uint,
        set_limits: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut i32,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        limits_count: ::std::os::raw::c_int,
        limits_user: *mut ::std::os::raw::c_void,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_feature_limits_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_feature_limits_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_feature_limits_cast(msg: *mut DP_Message) -> *mut DP_MsgFeatureLimits;
}
extern "C" {
    pub fn DP_msg_feature_limits_limits(
        mfl: *const DP_MsgFeatureLimits,
        out_count: *mut ::std::os::raw::c_int,
    ) -> *const i32;
}
extern "C" {
    pub fn DP_msg_feature_limits_limits_count(
        mfl: *const DP_MsgFeatureLimits,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_msg_undo_point_new(context_id: ::std::os::raw::c_uint) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_undo_point_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_undo_point_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgCanvasResize {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_canvas_resize_new(
        context_id: ::std::os::raw::c_uint,
        top: i32,
        right: i32,
        bottom: i32,
        left: i32,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_canvas_resize_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_canvas_resize_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_canvas_resize_cast(msg: *mut DP_Message) -> *mut DP_MsgCanvasResize;
}
extern "C" {
    pub fn DP_msg_canvas_resize_top(mcr: *const DP_MsgCanvasResize) -> i32;
}
extern "C" {
    pub fn DP_msg_canvas_resize_right(mcr: *const DP_MsgCanvasResize) -> i32;
}
extern "C" {
    pub fn DP_msg_canvas_resize_bottom(mcr: *const DP_MsgCanvasResize) -> i32;
}
extern "C" {
    pub fn DP_msg_canvas_resize_left(mcr: *const DP_MsgCanvasResize) -> i32;
}
extern "C" {
    pub fn DP_msg_layer_attributes_flags_flag_name(
        value: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgLayerAttributes {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_layer_attributes_new(
        context_id: ::std::os::raw::c_uint,
        id: u32,
        sublayer: u8,
        flags: u8,
        opacity: u8,
        blend: u8,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_layer_attributes_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_layer_attributes_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_layer_attributes_cast(msg: *mut DP_Message) -> *mut DP_MsgLayerAttributes;
}
extern "C" {
    pub fn DP_msg_layer_attributes_id(mla: *const DP_MsgLayerAttributes) -> u32;
}
extern "C" {
    pub fn DP_msg_layer_attributes_sublayer(mla: *const DP_MsgLayerAttributes) -> u8;
}
extern "C" {
    pub fn DP_msg_layer_attributes_flags(mla: *const DP_MsgLayerAttributes) -> u8;
}
extern "C" {
    pub fn DP_msg_layer_attributes_opacity(mla: *const DP_MsgLayerAttributes) -> u8;
}
extern "C" {
    pub fn DP_msg_layer_attributes_blend(mla: *const DP_MsgLayerAttributes) -> u8;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgLayerRetitle {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_layer_retitle_new(
        context_id: ::std::os::raw::c_uint,
        id: u32,
        title_value: *const ::std::os::raw::c_char,
        title_len: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_layer_retitle_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_layer_retitle_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_layer_retitle_cast(msg: *mut DP_Message) -> *mut DP_MsgLayerRetitle;
}
extern "C" {
    pub fn DP_msg_layer_retitle_id(mlr: *const DP_MsgLayerRetitle) -> u32;
}
extern "C" {
    pub fn DP_msg_layer_retitle_title(
        mlr: *const DP_MsgLayerRetitle,
        out_len: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_msg_layer_retitle_title_len(mlr: *const DP_MsgLayerRetitle) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgPutImage {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_put_image_new(
        context_id: ::std::os::raw::c_uint,
        layer: u32,
        mode: u8,
        x: u32,
        y: u32,
        w: u32,
        h: u32,
        set_image: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: usize,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        image_size: usize,
        image_user: *mut ::std::os::raw::c_void,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_put_image_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_put_image_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_put_image_cast(msg: *mut DP_Message) -> *mut DP_MsgPutImage;
}
extern "C" {
    pub fn DP_msg_put_image_layer(mpi: *const DP_MsgPutImage) -> u32;
}
extern "C" {
    pub fn DP_msg_put_image_mode(mpi: *const DP_MsgPutImage) -> u8;
}
extern "C" {
    pub fn DP_msg_put_image_x(mpi: *const DP_MsgPutImage) -> u32;
}
extern "C" {
    pub fn DP_msg_put_image_y(mpi: *const DP_MsgPutImage) -> u32;
}
extern "C" {
    pub fn DP_msg_put_image_w(mpi: *const DP_MsgPutImage) -> u32;
}
extern "C" {
    pub fn DP_msg_put_image_h(mpi: *const DP_MsgPutImage) -> u32;
}
extern "C" {
    pub fn DP_msg_put_image_image(
        mpi: *const DP_MsgPutImage,
        out_size: *mut usize,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn DP_msg_put_image_image_size(mpi: *const DP_MsgPutImage) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgFillRect {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_fill_rect_new(
        context_id: ::std::os::raw::c_uint,
        layer: u32,
        mode: u8,
        x: u32,
        y: u32,
        w: u32,
        h: u32,
        color: u32,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_fill_rect_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_fill_rect_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_fill_rect_cast(msg: *mut DP_Message) -> *mut DP_MsgFillRect;
}
extern "C" {
    pub fn DP_msg_fill_rect_layer(mfr: *const DP_MsgFillRect) -> u32;
}
extern "C" {
    pub fn DP_msg_fill_rect_mode(mfr: *const DP_MsgFillRect) -> u8;
}
extern "C" {
    pub fn DP_msg_fill_rect_x(mfr: *const DP_MsgFillRect) -> u32;
}
extern "C" {
    pub fn DP_msg_fill_rect_y(mfr: *const DP_MsgFillRect) -> u32;
}
extern "C" {
    pub fn DP_msg_fill_rect_w(mfr: *const DP_MsgFillRect) -> u32;
}
extern "C" {
    pub fn DP_msg_fill_rect_h(mfr: *const DP_MsgFillRect) -> u32;
}
extern "C" {
    pub fn DP_msg_fill_rect_color(mfr: *const DP_MsgFillRect) -> u32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgPenUp {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_pen_up_new(context_id: ::std::os::raw::c_uint, layer: u32) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_pen_up_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_pen_up_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_pen_up_cast(msg: *mut DP_Message) -> *mut DP_MsgPenUp;
}
extern "C" {
    pub fn DP_msg_pen_up_layer(mpu: *const DP_MsgPenUp) -> u32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgAnnotationCreate {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_annotation_create_new(
        context_id: ::std::os::raw::c_uint,
        id: u16,
        x: i32,
        y: i32,
        w: u16,
        h: u16,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_annotation_create_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_annotation_create_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_annotation_create_cast(msg: *mut DP_Message) -> *mut DP_MsgAnnotationCreate;
}
extern "C" {
    pub fn DP_msg_annotation_create_id(mac: *const DP_MsgAnnotationCreate) -> u16;
}
extern "C" {
    pub fn DP_msg_annotation_create_x(mac: *const DP_MsgAnnotationCreate) -> i32;
}
extern "C" {
    pub fn DP_msg_annotation_create_y(mac: *const DP_MsgAnnotationCreate) -> i32;
}
extern "C" {
    pub fn DP_msg_annotation_create_w(mac: *const DP_MsgAnnotationCreate) -> u16;
}
extern "C" {
    pub fn DP_msg_annotation_create_h(mac: *const DP_MsgAnnotationCreate) -> u16;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgAnnotationReshape {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_annotation_reshape_new(
        context_id: ::std::os::raw::c_uint,
        id: u16,
        x: i32,
        y: i32,
        w: u16,
        h: u16,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_annotation_reshape_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_annotation_reshape_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_annotation_reshape_cast(msg: *mut DP_Message) -> *mut DP_MsgAnnotationReshape;
}
extern "C" {
    pub fn DP_msg_annotation_reshape_id(mar: *const DP_MsgAnnotationReshape) -> u16;
}
extern "C" {
    pub fn DP_msg_annotation_reshape_x(mar: *const DP_MsgAnnotationReshape) -> i32;
}
extern "C" {
    pub fn DP_msg_annotation_reshape_y(mar: *const DP_MsgAnnotationReshape) -> i32;
}
extern "C" {
    pub fn DP_msg_annotation_reshape_w(mar: *const DP_MsgAnnotationReshape) -> u16;
}
extern "C" {
    pub fn DP_msg_annotation_reshape_h(mar: *const DP_MsgAnnotationReshape) -> u16;
}
extern "C" {
    pub fn DP_msg_annotation_edit_flags_flag_name(
        value: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgAnnotationEdit {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_annotation_edit_new(
        context_id: ::std::os::raw::c_uint,
        id: u16,
        bg: u32,
        flags: u8,
        border: u8,
        text_value: *const ::std::os::raw::c_char,
        text_len: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_annotation_edit_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_annotation_edit_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_annotation_edit_cast(msg: *mut DP_Message) -> *mut DP_MsgAnnotationEdit;
}
extern "C" {
    pub fn DP_msg_annotation_edit_id(mae: *const DP_MsgAnnotationEdit) -> u16;
}
extern "C" {
    pub fn DP_msg_annotation_edit_bg(mae: *const DP_MsgAnnotationEdit) -> u32;
}
extern "C" {
    pub fn DP_msg_annotation_edit_flags(mae: *const DP_MsgAnnotationEdit) -> u8;
}
extern "C" {
    pub fn DP_msg_annotation_edit_border(mae: *const DP_MsgAnnotationEdit) -> u8;
}
extern "C" {
    pub fn DP_msg_annotation_edit_text(
        mae: *const DP_MsgAnnotationEdit,
        out_len: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_msg_annotation_edit_text_len(mae: *const DP_MsgAnnotationEdit) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgAnnotationDelete {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_annotation_delete_new(
        context_id: ::std::os::raw::c_uint,
        id: u16,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_annotation_delete_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_annotation_delete_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_annotation_delete_cast(msg: *mut DP_Message) -> *mut DP_MsgAnnotationDelete;
}
extern "C" {
    pub fn DP_msg_annotation_delete_id(mad: *const DP_MsgAnnotationDelete) -> u16;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgPutTile {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_put_tile_new(
        context_id: ::std::os::raw::c_uint,
        user: u8,
        layer: u32,
        sublayer: u8,
        col: u16,
        row: u16,
        repeat: u16,
        set_image: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: usize,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        image_size: usize,
        image_user: *mut ::std::os::raw::c_void,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_put_tile_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_put_tile_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_put_tile_cast(msg: *mut DP_Message) -> *mut DP_MsgPutTile;
}
extern "C" {
    pub fn DP_msg_put_tile_user(mpt: *const DP_MsgPutTile) -> u8;
}
extern "C" {
    pub fn DP_msg_put_tile_layer(mpt: *const DP_MsgPutTile) -> u32;
}
extern "C" {
    pub fn DP_msg_put_tile_sublayer(mpt: *const DP_MsgPutTile) -> u8;
}
extern "C" {
    pub fn DP_msg_put_tile_col(mpt: *const DP_MsgPutTile) -> u16;
}
extern "C" {
    pub fn DP_msg_put_tile_row(mpt: *const DP_MsgPutTile) -> u16;
}
extern "C" {
    pub fn DP_msg_put_tile_repeat(mpt: *const DP_MsgPutTile) -> u16;
}
extern "C" {
    pub fn DP_msg_put_tile_image(
        mpt: *const DP_MsgPutTile,
        out_size: *mut usize,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn DP_msg_put_tile_image_size(mpt: *const DP_MsgPutTile) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgCanvasBackground {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_canvas_background_new(
        context_id: ::std::os::raw::c_uint,
        set_image: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: usize,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        image_size: usize,
        image_user: *mut ::std::os::raw::c_void,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_canvas_background_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_canvas_background_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_canvas_background_cast(msg: *mut DP_Message) -> *mut DP_MsgCanvasBackground;
}
extern "C" {
    pub fn DP_msg_canvas_background_image(
        mcb: *const DP_MsgCanvasBackground,
        out_size: *mut usize,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn DP_msg_canvas_background_image_size(mcb: *const DP_MsgCanvasBackground) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_ClassicDab {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_classic_dab_init(
        cds: *mut DP_ClassicDab,
        i: ::std::os::raw::c_int,
        x: i8,
        y: i8,
        size: u32,
        hardness: u8,
        opacity: u8,
    );
}
extern "C" {
    pub fn DP_classic_dab_x(cd: *const DP_ClassicDab) -> i8;
}
extern "C" {
    pub fn DP_classic_dab_y(cd: *const DP_ClassicDab) -> i8;
}
extern "C" {
    pub fn DP_classic_dab_size(cd: *const DP_ClassicDab) -> u32;
}
extern "C" {
    pub fn DP_classic_dab_hardness(cd: *const DP_ClassicDab) -> u8;
}
extern "C" {
    pub fn DP_classic_dab_opacity(cd: *const DP_ClassicDab) -> u8;
}
extern "C" {
    pub fn DP_classic_dab_at(
        cd: *const DP_ClassicDab,
        i: ::std::os::raw::c_int,
    ) -> *const DP_ClassicDab;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgDrawDabsClassic {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_draw_dabs_classic_new(
        context_id: ::std::os::raw::c_uint,
        flags: u8,
        layer: u32,
        x: i32,
        y: i32,
        color: u32,
        mode: u8,
        set_dabs: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut DP_ClassicDab,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        dabs_count: ::std::os::raw::c_int,
        dabs_user: *mut ::std::os::raw::c_void,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_draw_dabs_classic_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_draw_dabs_classic_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_draw_dabs_classic_cast(msg: *mut DP_Message) -> *mut DP_MsgDrawDabsClassic;
}
extern "C" {
    pub fn DP_msg_draw_dabs_classic_flags(mddc: *const DP_MsgDrawDabsClassic) -> u8;
}
extern "C" {
    pub fn DP_msg_draw_dabs_classic_layer(mddc: *const DP_MsgDrawDabsClassic) -> u32;
}
extern "C" {
    pub fn DP_msg_draw_dabs_classic_x(mddc: *const DP_MsgDrawDabsClassic) -> i32;
}
extern "C" {
    pub fn DP_msg_draw_dabs_classic_y(mddc: *const DP_MsgDrawDabsClassic) -> i32;
}
extern "C" {
    pub fn DP_msg_draw_dabs_classic_color(mddc: *const DP_MsgDrawDabsClassic) -> u32;
}
extern "C" {
    pub fn DP_msg_draw_dabs_classic_mode(mddc: *const DP_MsgDrawDabsClassic) -> u8;
}
extern "C" {
    pub fn DP_msg_draw_dabs_classic_dabs(
        mddc: *const DP_MsgDrawDabsClassic,
        out_count: *mut ::std::os::raw::c_int,
    ) -> *const DP_ClassicDab;
}
extern "C" {
    pub fn DP_msg_draw_dabs_classic_dabs_count(
        mddc: *const DP_MsgDrawDabsClassic,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_PixelDab {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_pixel_dab_init(
        pds: *mut DP_PixelDab,
        i: ::std::os::raw::c_int,
        x: i8,
        y: i8,
        size: u16,
        opacity: u8,
    );
}
extern "C" {
    pub fn DP_pixel_dab_x(pd: *const DP_PixelDab) -> i8;
}
extern "C" {
    pub fn DP_pixel_dab_y(pd: *const DP_PixelDab) -> i8;
}
extern "C" {
    pub fn DP_pixel_dab_size(pd: *const DP_PixelDab) -> u16;
}
extern "C" {
    pub fn DP_pixel_dab_opacity(pd: *const DP_PixelDab) -> u8;
}
extern "C" {
    pub fn DP_pixel_dab_at(pd: *const DP_PixelDab, i: ::std::os::raw::c_int) -> *const DP_PixelDab;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgDrawDabsPixel {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_draw_dabs_pixel_new(
        context_id: ::std::os::raw::c_uint,
        flags: u8,
        layer: u32,
        x: i32,
        y: i32,
        color: u32,
        mode: u8,
        set_dabs: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut DP_PixelDab,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        dabs_count: ::std::os::raw::c_int,
        dabs_user: *mut ::std::os::raw::c_void,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_draw_dabs_pixel_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_draw_dabs_pixel_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_draw_dabs_pixel_cast(msg: *mut DP_Message) -> *mut DP_MsgDrawDabsPixel;
}
extern "C" {
    pub fn DP_msg_draw_dabs_pixel_flags(mddp: *const DP_MsgDrawDabsPixel) -> u8;
}
extern "C" {
    pub fn DP_msg_draw_dabs_pixel_layer(mddp: *const DP_MsgDrawDabsPixel) -> u32;
}
extern "C" {
    pub fn DP_msg_draw_dabs_pixel_x(mddp: *const DP_MsgDrawDabsPixel) -> i32;
}
extern "C" {
    pub fn DP_msg_draw_dabs_pixel_y(mddp: *const DP_MsgDrawDabsPixel) -> i32;
}
extern "C" {
    pub fn DP_msg_draw_dabs_pixel_color(mddp: *const DP_MsgDrawDabsPixel) -> u32;
}
extern "C" {
    pub fn DP_msg_draw_dabs_pixel_mode(mddp: *const DP_MsgDrawDabsPixel) -> u8;
}
extern "C" {
    pub fn DP_msg_draw_dabs_pixel_dabs(
        mddp: *const DP_MsgDrawDabsPixel,
        out_count: *mut ::std::os::raw::c_int,
    ) -> *const DP_PixelDab;
}
extern "C" {
    pub fn DP_msg_draw_dabs_pixel_dabs_count(
        mddp: *const DP_MsgDrawDabsPixel,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_msg_draw_dabs_pixel_square_new(
        context_id: ::std::os::raw::c_uint,
        flags: u8,
        layer: u32,
        x: i32,
        y: i32,
        color: u32,
        mode: u8,
        set_dabs: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut DP_PixelDab,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        dabs_count: ::std::os::raw::c_int,
        dabs_user: *mut ::std::os::raw::c_void,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_draw_dabs_pixel_square_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_draw_dabs_pixel_square_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_draw_dabs_pixel_square_cast(msg: *mut DP_Message) -> *mut DP_MsgDrawDabsPixel;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MyPaintDab {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_mypaint_dab_init(
        mpds: *mut DP_MyPaintDab,
        i: ::std::os::raw::c_int,
        x: i8,
        y: i8,
        size: u32,
        hardness: u8,
        opacity: u8,
        angle: u8,
        aspect_ratio: u8,
    );
}
extern "C" {
    pub fn DP_mypaint_dab_x(mpd: *const DP_MyPaintDab) -> i8;
}
extern "C" {
    pub fn DP_mypaint_dab_y(mpd: *const DP_MyPaintDab) -> i8;
}
extern "C" {
    pub fn DP_mypaint_dab_size(mpd: *const DP_MyPaintDab) -> u32;
}
extern "C" {
    pub fn DP_mypaint_dab_hardness(mpd: *const DP_MyPaintDab) -> u8;
}
extern "C" {
    pub fn DP_mypaint_dab_opacity(mpd: *const DP_MyPaintDab) -> u8;
}
extern "C" {
    pub fn DP_mypaint_dab_angle(mpd: *const DP_MyPaintDab) -> u8;
}
extern "C" {
    pub fn DP_mypaint_dab_aspect_ratio(mpd: *const DP_MyPaintDab) -> u8;
}
extern "C" {
    pub fn DP_mypaint_dab_at(
        mpd: *const DP_MyPaintDab,
        i: ::std::os::raw::c_int,
    ) -> *const DP_MyPaintDab;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgDrawDabsMyPaint {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_draw_dabs_mypaint_new(
        context_id: ::std::os::raw::c_uint,
        layer: u32,
        x: i32,
        y: i32,
        color: u32,
        lock_alpha: u8,
        colorize: u8,
        posterize: u8,
        posterize_num: u8,
        set_dabs: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut DP_MyPaintDab,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        dabs_count: ::std::os::raw::c_int,
        dabs_user: *mut ::std::os::raw::c_void,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_draw_dabs_mypaint_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_draw_dabs_mypaint_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_draw_dabs_mypaint_cast(msg: *mut DP_Message) -> *mut DP_MsgDrawDabsMyPaint;
}
extern "C" {
    pub fn DP_msg_draw_dabs_mypaint_layer(mddmp: *const DP_MsgDrawDabsMyPaint) -> u32;
}
extern "C" {
    pub fn DP_msg_draw_dabs_mypaint_x(mddmp: *const DP_MsgDrawDabsMyPaint) -> i32;
}
extern "C" {
    pub fn DP_msg_draw_dabs_mypaint_y(mddmp: *const DP_MsgDrawDabsMyPaint) -> i32;
}
extern "C" {
    pub fn DP_msg_draw_dabs_mypaint_color(mddmp: *const DP_MsgDrawDabsMyPaint) -> u32;
}
extern "C" {
    pub fn DP_msg_draw_dabs_mypaint_lock_alpha(mddmp: *const DP_MsgDrawDabsMyPaint) -> u8;
}
extern "C" {
    pub fn DP_msg_draw_dabs_mypaint_colorize(mddmp: *const DP_MsgDrawDabsMyPaint) -> u8;
}
extern "C" {
    pub fn DP_msg_draw_dabs_mypaint_posterize(mddmp: *const DP_MsgDrawDabsMyPaint) -> u8;
}
extern "C" {
    pub fn DP_msg_draw_dabs_mypaint_posterize_num(mddmp: *const DP_MsgDrawDabsMyPaint) -> u8;
}
extern "C" {
    pub fn DP_msg_draw_dabs_mypaint_dabs(
        mddmp: *const DP_MsgDrawDabsMyPaint,
        out_count: *mut ::std::os::raw::c_int,
    ) -> *const DP_MyPaintDab;
}
extern "C" {
    pub fn DP_msg_draw_dabs_mypaint_dabs_count(
        mddmp: *const DP_MsgDrawDabsMyPaint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MyPaintBlendDab {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_mypaint_blend_dab_init(
        mpbds: *mut DP_MyPaintBlendDab,
        i: ::std::os::raw::c_int,
        x: i8,
        y: i8,
        size: u32,
        hardness: u8,
        opacity: u8,
        angle: u8,
        aspect_ratio: u8,
    );
}
extern "C" {
    pub fn DP_mypaint_blend_dab_x(mpbd: *const DP_MyPaintBlendDab) -> i8;
}
extern "C" {
    pub fn DP_mypaint_blend_dab_y(mpbd: *const DP_MyPaintBlendDab) -> i8;
}
extern "C" {
    pub fn DP_mypaint_blend_dab_size(mpbd: *const DP_MyPaintBlendDab) -> u32;
}
extern "C" {
    pub fn DP_mypaint_blend_dab_hardness(mpbd: *const DP_MyPaintBlendDab) -> u8;
}
extern "C" {
    pub fn DP_mypaint_blend_dab_opacity(mpbd: *const DP_MyPaintBlendDab) -> u8;
}
extern "C" {
    pub fn DP_mypaint_blend_dab_angle(mpbd: *const DP_MyPaintBlendDab) -> u8;
}
extern "C" {
    pub fn DP_mypaint_blend_dab_aspect_ratio(mpbd: *const DP_MyPaintBlendDab) -> u8;
}
extern "C" {
    pub fn DP_mypaint_blend_dab_at(
        mpbd: *const DP_MyPaintBlendDab,
        i: ::std::os::raw::c_int,
    ) -> *const DP_MyPaintBlendDab;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgDrawDabsMyPaintBlend {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_draw_dabs_mypaint_blend_new(
        context_id: ::std::os::raw::c_uint,
        flags: u8,
        layer: u32,
        x: i32,
        y: i32,
        color: u32,
        mode: u8,
        set_dabs: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut DP_MyPaintBlendDab,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        dabs_count: ::std::os::raw::c_int,
        dabs_user: *mut ::std::os::raw::c_void,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_draw_dabs_mypaint_blend_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_draw_dabs_mypaint_blend_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_draw_dabs_mypaint_blend_cast(
        msg: *mut DP_Message,
    ) -> *mut DP_MsgDrawDabsMyPaintBlend;
}
extern "C" {
    pub fn DP_msg_draw_dabs_mypaint_blend_flags(mddmpb: *const DP_MsgDrawDabsMyPaintBlend) -> u8;
}
extern "C" {
    pub fn DP_msg_draw_dabs_mypaint_blend_layer(mddmpb: *const DP_MsgDrawDabsMyPaintBlend) -> u32;
}
extern "C" {
    pub fn DP_msg_draw_dabs_mypaint_blend_x(mddmpb: *const DP_MsgDrawDabsMyPaintBlend) -> i32;
}
extern "C" {
    pub fn DP_msg_draw_dabs_mypaint_blend_y(mddmpb: *const DP_MsgDrawDabsMyPaintBlend) -> i32;
}
extern "C" {
    pub fn DP_msg_draw_dabs_mypaint_blend_color(mddmpb: *const DP_MsgDrawDabsMyPaintBlend) -> u32;
}
extern "C" {
    pub fn DP_msg_draw_dabs_mypaint_blend_mode(mddmpb: *const DP_MsgDrawDabsMyPaintBlend) -> u8;
}
extern "C" {
    pub fn DP_msg_draw_dabs_mypaint_blend_dabs(
        mddmpb: *const DP_MsgDrawDabsMyPaintBlend,
        out_count: *mut ::std::os::raw::c_int,
    ) -> *const DP_MyPaintBlendDab;
}
extern "C" {
    pub fn DP_msg_draw_dabs_mypaint_blend_dabs_count(
        mddmpb: *const DP_MsgDrawDabsMyPaintBlend,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgMoveRect {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_move_rect_new(
        context_id: ::std::os::raw::c_uint,
        layer: u32,
        source: u32,
        sx: i32,
        sy: i32,
        tx: i32,
        ty: i32,
        w: i32,
        h: i32,
        set_mask: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: usize,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        mask_size: usize,
        mask_user: *mut ::std::os::raw::c_void,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_move_rect_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_move_rect_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_move_rect_cast(msg: *mut DP_Message) -> *mut DP_MsgMoveRect;
}
extern "C" {
    pub fn DP_msg_move_rect_layer(mmr: *const DP_MsgMoveRect) -> u32;
}
extern "C" {
    pub fn DP_msg_move_rect_source(mmr: *const DP_MsgMoveRect) -> u32;
}
extern "C" {
    pub fn DP_msg_move_rect_sx(mmr: *const DP_MsgMoveRect) -> i32;
}
extern "C" {
    pub fn DP_msg_move_rect_sy(mmr: *const DP_MsgMoveRect) -> i32;
}
extern "C" {
    pub fn DP_msg_move_rect_tx(mmr: *const DP_MsgMoveRect) -> i32;
}
extern "C" {
    pub fn DP_msg_move_rect_ty(mmr: *const DP_MsgMoveRect) -> i32;
}
extern "C" {
    pub fn DP_msg_move_rect_w(mmr: *const DP_MsgMoveRect) -> i32;
}
extern "C" {
    pub fn DP_msg_move_rect_h(mmr: *const DP_MsgMoveRect) -> i32;
}
extern "C" {
    pub fn DP_msg_move_rect_mask(
        mmr: *const DP_MsgMoveRect,
        out_size: *mut usize,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn DP_msg_move_rect_mask_size(mmr: *const DP_MsgMoveRect) -> usize;
}
extern "C" {
    pub fn DP_msg_set_metadata_int_field_variant_name(
        value: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgSetMetadataInt {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_set_metadata_int_new(
        context_id: ::std::os::raw::c_uint,
        field: u8,
        value: i32,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_set_metadata_int_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_set_metadata_int_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_set_metadata_int_cast(msg: *mut DP_Message) -> *mut DP_MsgSetMetadataInt;
}
extern "C" {
    pub fn DP_msg_set_metadata_int_field(msmi: *const DP_MsgSetMetadataInt) -> u8;
}
extern "C" {
    pub fn DP_msg_set_metadata_int_value(msmi: *const DP_MsgSetMetadataInt) -> i32;
}
extern "C" {
    pub fn DP_msg_layer_tree_create_flags_flag_name(
        value: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgLayerTreeCreate {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_layer_tree_create_new(
        context_id: ::std::os::raw::c_uint,
        id: u32,
        source: u32,
        target: u32,
        fill: u32,
        flags: u8,
        title_value: *const ::std::os::raw::c_char,
        title_len: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_layer_tree_create_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_layer_tree_create_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_layer_tree_create_cast(msg: *mut DP_Message) -> *mut DP_MsgLayerTreeCreate;
}
extern "C" {
    pub fn DP_msg_layer_tree_create_id(mltc: *const DP_MsgLayerTreeCreate) -> u32;
}
extern "C" {
    pub fn DP_msg_layer_tree_create_source(mltc: *const DP_MsgLayerTreeCreate) -> u32;
}
extern "C" {
    pub fn DP_msg_layer_tree_create_target(mltc: *const DP_MsgLayerTreeCreate) -> u32;
}
extern "C" {
    pub fn DP_msg_layer_tree_create_fill(mltc: *const DP_MsgLayerTreeCreate) -> u32;
}
extern "C" {
    pub fn DP_msg_layer_tree_create_flags(mltc: *const DP_MsgLayerTreeCreate) -> u8;
}
extern "C" {
    pub fn DP_msg_layer_tree_create_title(
        mltc: *const DP_MsgLayerTreeCreate,
        out_len: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_msg_layer_tree_create_title_len(mltc: *const DP_MsgLayerTreeCreate) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgLayerTreeMove {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_layer_tree_move_new(
        context_id: ::std::os::raw::c_uint,
        layer: u32,
        parent: u32,
        sibling: u32,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_layer_tree_move_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_layer_tree_move_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_layer_tree_move_cast(msg: *mut DP_Message) -> *mut DP_MsgLayerTreeMove;
}
extern "C" {
    pub fn DP_msg_layer_tree_move_layer(mltm: *const DP_MsgLayerTreeMove) -> u32;
}
extern "C" {
    pub fn DP_msg_layer_tree_move_parent(mltm: *const DP_MsgLayerTreeMove) -> u32;
}
extern "C" {
    pub fn DP_msg_layer_tree_move_sibling(mltm: *const DP_MsgLayerTreeMove) -> u32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgLayerTreeDelete {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_layer_tree_delete_new(
        context_id: ::std::os::raw::c_uint,
        id: u32,
        merge_to: u32,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_layer_tree_delete_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_layer_tree_delete_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_layer_tree_delete_cast(msg: *mut DP_Message) -> *mut DP_MsgLayerTreeDelete;
}
extern "C" {
    pub fn DP_msg_layer_tree_delete_id(mltd: *const DP_MsgLayerTreeDelete) -> u32;
}
extern "C" {
    pub fn DP_msg_layer_tree_delete_merge_to(mltd: *const DP_MsgLayerTreeDelete) -> u32;
}
extern "C" {
    pub fn DP_msg_transform_region_mode_variant_name(
        value: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgTransformRegion {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_transform_region_new(
        context_id: ::std::os::raw::c_uint,
        layer: u32,
        source: u32,
        bx: i32,
        by: i32,
        bw: i32,
        bh: i32,
        x1: i32,
        y1: i32,
        x2: i32,
        y2: i32,
        x3: i32,
        y3: i32,
        x4: i32,
        y4: i32,
        mode: u8,
        set_mask: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: usize,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        mask_size: usize,
        mask_user: *mut ::std::os::raw::c_void,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_transform_region_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_transform_region_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_transform_region_cast(msg: *mut DP_Message) -> *mut DP_MsgTransformRegion;
}
extern "C" {
    pub fn DP_msg_transform_region_layer(mtr: *const DP_MsgTransformRegion) -> u32;
}
extern "C" {
    pub fn DP_msg_transform_region_source(mtr: *const DP_MsgTransformRegion) -> u32;
}
extern "C" {
    pub fn DP_msg_transform_region_bx(mtr: *const DP_MsgTransformRegion) -> i32;
}
extern "C" {
    pub fn DP_msg_transform_region_by(mtr: *const DP_MsgTransformRegion) -> i32;
}
extern "C" {
    pub fn DP_msg_transform_region_bw(mtr: *const DP_MsgTransformRegion) -> i32;
}
extern "C" {
    pub fn DP_msg_transform_region_bh(mtr: *const DP_MsgTransformRegion) -> i32;
}
extern "C" {
    pub fn DP_msg_transform_region_x1(mtr: *const DP_MsgTransformRegion) -> i32;
}
extern "C" {
    pub fn DP_msg_transform_region_y1(mtr: *const DP_MsgTransformRegion) -> i32;
}
extern "C" {
    pub fn DP_msg_transform_region_x2(mtr: *const DP_MsgTransformRegion) -> i32;
}
extern "C" {
    pub fn DP_msg_transform_region_y2(mtr: *const DP_MsgTransformRegion) -> i32;
}
extern "C" {
    pub fn DP_msg_transform_region_x3(mtr: *const DP_MsgTransformRegion) -> i32;
}
extern "C" {
    pub fn DP_msg_transform_region_y3(mtr: *const DP_MsgTransformRegion) -> i32;
}
extern "C" {
    pub fn DP_msg_transform_region_x4(mtr: *const DP_MsgTransformRegion) -> i32;
}
extern "C" {
    pub fn DP_msg_transform_region_y4(mtr: *const DP_MsgTransformRegion) -> i32;
}
extern "C" {
    pub fn DP_msg_transform_region_mode(mtr: *const DP_MsgTransformRegion) -> u8;
}
extern "C" {
    pub fn DP_msg_transform_region_mask(
        mtr: *const DP_MsgTransformRegion,
        out_size: *mut usize,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn DP_msg_transform_region_mask_size(mtr: *const DP_MsgTransformRegion) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgTrackCreate {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_track_create_new(
        context_id: ::std::os::raw::c_uint,
        id: u16,
        insert_id: u16,
        source_id: u16,
        title_value: *const ::std::os::raw::c_char,
        title_len: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_track_create_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_track_create_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_track_create_cast(msg: *mut DP_Message) -> *mut DP_MsgTrackCreate;
}
extern "C" {
    pub fn DP_msg_track_create_id(mtc: *const DP_MsgTrackCreate) -> u16;
}
extern "C" {
    pub fn DP_msg_track_create_insert_id(mtc: *const DP_MsgTrackCreate) -> u16;
}
extern "C" {
    pub fn DP_msg_track_create_source_id(mtc: *const DP_MsgTrackCreate) -> u16;
}
extern "C" {
    pub fn DP_msg_track_create_title(
        mtc: *const DP_MsgTrackCreate,
        out_len: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_msg_track_create_title_len(mtc: *const DP_MsgTrackCreate) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgTrackRetitle {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_track_retitle_new(
        context_id: ::std::os::raw::c_uint,
        id: u16,
        title_value: *const ::std::os::raw::c_char,
        title_len: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_track_retitle_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_track_retitle_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_track_retitle_cast(msg: *mut DP_Message) -> *mut DP_MsgTrackRetitle;
}
extern "C" {
    pub fn DP_msg_track_retitle_id(mtr: *const DP_MsgTrackRetitle) -> u16;
}
extern "C" {
    pub fn DP_msg_track_retitle_title(
        mtr: *const DP_MsgTrackRetitle,
        out_len: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_msg_track_retitle_title_len(mtr: *const DP_MsgTrackRetitle) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgTrackDelete {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_track_delete_new(context_id: ::std::os::raw::c_uint, id: u16) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_track_delete_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_track_delete_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_track_delete_cast(msg: *mut DP_Message) -> *mut DP_MsgTrackDelete;
}
extern "C" {
    pub fn DP_msg_track_delete_id(mtd: *const DP_MsgTrackDelete) -> u16;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgTrackOrder {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_track_order_new(
        context_id: ::std::os::raw::c_uint,
        set_tracks: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut u16,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        tracks_count: ::std::os::raw::c_int,
        tracks_user: *mut ::std::os::raw::c_void,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_track_order_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_track_order_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_track_order_cast(msg: *mut DP_Message) -> *mut DP_MsgTrackOrder;
}
extern "C" {
    pub fn DP_msg_track_order_tracks(
        mto: *const DP_MsgTrackOrder,
        out_count: *mut ::std::os::raw::c_int,
    ) -> *const u16;
}
extern "C" {
    pub fn DP_msg_track_order_tracks_count(mto: *const DP_MsgTrackOrder) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_msg_key_frame_set_source_variant_name(
        value: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgKeyFrameSet {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_key_frame_set_new(
        context_id: ::std::os::raw::c_uint,
        track_id: u16,
        frame_index: u16,
        source_id: u32,
        source_index: u16,
        source: u8,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_key_frame_set_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_key_frame_set_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_key_frame_set_cast(msg: *mut DP_Message) -> *mut DP_MsgKeyFrameSet;
}
extern "C" {
    pub fn DP_msg_key_frame_set_track_id(mkfs: *const DP_MsgKeyFrameSet) -> u16;
}
extern "C" {
    pub fn DP_msg_key_frame_set_frame_index(mkfs: *const DP_MsgKeyFrameSet) -> u16;
}
extern "C" {
    pub fn DP_msg_key_frame_set_source_id(mkfs: *const DP_MsgKeyFrameSet) -> u32;
}
extern "C" {
    pub fn DP_msg_key_frame_set_source_index(mkfs: *const DP_MsgKeyFrameSet) -> u16;
}
extern "C" {
    pub fn DP_msg_key_frame_set_source(mkfs: *const DP_MsgKeyFrameSet) -> u8;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgKeyFrameRetitle {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_key_frame_retitle_new(
        context_id: ::std::os::raw::c_uint,
        track_id: u16,
        frame_index: u16,
        title_value: *const ::std::os::raw::c_char,
        title_len: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_key_frame_retitle_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_key_frame_retitle_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_key_frame_retitle_cast(msg: *mut DP_Message) -> *mut DP_MsgKeyFrameRetitle;
}
extern "C" {
    pub fn DP_msg_key_frame_retitle_track_id(mkfr: *const DP_MsgKeyFrameRetitle) -> u16;
}
extern "C" {
    pub fn DP_msg_key_frame_retitle_frame_index(mkfr: *const DP_MsgKeyFrameRetitle) -> u16;
}
extern "C" {
    pub fn DP_msg_key_frame_retitle_title(
        mkfr: *const DP_MsgKeyFrameRetitle,
        out_len: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_msg_key_frame_retitle_title_len(mkfr: *const DP_MsgKeyFrameRetitle) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgKeyFrameLayerAttributes {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_key_frame_layer_attributes_new(
        context_id: ::std::os::raw::c_uint,
        track_id: u16,
        frame_index: u16,
        set_layer_flags: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut u32,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        layer_flags_count: ::std::os::raw::c_int,
        layer_flags_user: *mut ::std::os::raw::c_void,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_key_frame_layer_attributes_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_key_frame_layer_attributes_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_key_frame_layer_attributes_cast(
        msg: *mut DP_Message,
    ) -> *mut DP_MsgKeyFrameLayerAttributes;
}
extern "C" {
    pub fn DP_msg_key_frame_layer_attributes_track_id(
        mkfla: *const DP_MsgKeyFrameLayerAttributes,
    ) -> u16;
}
extern "C" {
    pub fn DP_msg_key_frame_layer_attributes_frame_index(
        mkfla: *const DP_MsgKeyFrameLayerAttributes,
    ) -> u16;
}
extern "C" {
    pub fn DP_msg_key_frame_layer_attributes_layer_flags(
        mkfla: *const DP_MsgKeyFrameLayerAttributes,
        out_count: *mut ::std::os::raw::c_int,
    ) -> *const u32;
}
extern "C" {
    pub fn DP_msg_key_frame_layer_attributes_layer_flags_count(
        mkfla: *const DP_MsgKeyFrameLayerAttributes,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgKeyFrameDelete {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_key_frame_delete_new(
        context_id: ::std::os::raw::c_uint,
        track_id: u16,
        frame_index: u16,
        move_track_id: u16,
        move_frame_index: u16,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_key_frame_delete_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_key_frame_delete_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_key_frame_delete_cast(msg: *mut DP_Message) -> *mut DP_MsgKeyFrameDelete;
}
extern "C" {
    pub fn DP_msg_key_frame_delete_track_id(mkfd: *const DP_MsgKeyFrameDelete) -> u16;
}
extern "C" {
    pub fn DP_msg_key_frame_delete_frame_index(mkfd: *const DP_MsgKeyFrameDelete) -> u16;
}
extern "C" {
    pub fn DP_msg_key_frame_delete_move_track_id(mkfd: *const DP_MsgKeyFrameDelete) -> u16;
}
extern "C" {
    pub fn DP_msg_key_frame_delete_move_frame_index(mkfd: *const DP_MsgKeyFrameDelete) -> u16;
}
extern "C" {
    pub fn DP_msg_selection_put_op_variant_name(
        value: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgSelectionPut {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_selection_put_new(
        context_id: ::std::os::raw::c_uint,
        selection_id: u8,
        op: u8,
        x: i32,
        y: i32,
        w: u16,
        h: u16,
        set_mask: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: usize,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        mask_size: usize,
        mask_user: *mut ::std::os::raw::c_void,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_selection_put_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_selection_put_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_selection_put_cast(msg: *mut DP_Message) -> *mut DP_MsgSelectionPut;
}
extern "C" {
    pub fn DP_msg_selection_put_selection_id(msp: *const DP_MsgSelectionPut) -> u8;
}
extern "C" {
    pub fn DP_msg_selection_put_op(msp: *const DP_MsgSelectionPut) -> u8;
}
extern "C" {
    pub fn DP_msg_selection_put_x(msp: *const DP_MsgSelectionPut) -> i32;
}
extern "C" {
    pub fn DP_msg_selection_put_y(msp: *const DP_MsgSelectionPut) -> i32;
}
extern "C" {
    pub fn DP_msg_selection_put_w(msp: *const DP_MsgSelectionPut) -> u16;
}
extern "C" {
    pub fn DP_msg_selection_put_h(msp: *const DP_MsgSelectionPut) -> u16;
}
extern "C" {
    pub fn DP_msg_selection_put_mask(
        msp: *const DP_MsgSelectionPut,
        out_size: *mut usize,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn DP_msg_selection_put_mask_size(msp: *const DP_MsgSelectionPut) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgSelectionClear {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_selection_clear_new(
        context_id: ::std::os::raw::c_uint,
        selection_id: u8,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_selection_clear_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_selection_clear_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_selection_clear_cast(msg: *mut DP_Message) -> *mut DP_MsgSelectionClear;
}
extern "C" {
    pub fn DP_msg_selection_clear_selection_id(msc: *const DP_MsgSelectionClear) -> u8;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgLocalMatch {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_local_match_new(
        context_id: ::std::os::raw::c_uint,
        type_: u8,
        set_data: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: usize,
                arg2: *mut ::std::os::raw::c_uchar,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        data_size: usize,
        data_user: *mut ::std::os::raw::c_void,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_local_match_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_local_match_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_local_match_cast(msg: *mut DP_Message) -> *mut DP_MsgLocalMatch;
}
extern "C" {
    pub fn DP_msg_local_match_type(mlm: *const DP_MsgLocalMatch) -> u8;
}
extern "C" {
    pub fn DP_msg_local_match_data(
        mlm: *const DP_MsgLocalMatch,
        out_size: *mut usize,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn DP_msg_local_match_data_size(mlm: *const DP_MsgLocalMatch) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP_MsgUndo {
    _unused: [u8; 0],
}
extern "C" {
    pub fn DP_msg_undo_new(
        context_id: ::std::os::raw::c_uint,
        override_user: u8,
        redo: bool,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_undo_deserialize(
        context_id: ::std::os::raw::c_uint,
        buffer: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_undo_parse(
        context_id: ::std::os::raw::c_uint,
        reader: *mut DP_TextReader,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_undo_cast(msg: *mut DP_Message) -> *mut DP_MsgUndo;
}
extern "C" {
    pub fn DP_msg_undo_override_user(mu: *const DP_MsgUndo) -> u8;
}
extern "C" {
    pub fn DP_msg_undo_redo(mu: *const DP_MsgUndo) -> bool;
}
pub type DP_GetMessageBufferFn = ::std::option::Option<
    unsafe extern "C" fn(
        user: *mut ::std::os::raw::c_void,
        length: usize,
    ) -> *mut ::std::os::raw::c_uchar,
>;
extern "C" {
    pub fn DP_message_new(
        type_: DP_MessageType,
        context_id: ::std::os::raw::c_uint,
        methods: *const DP_MessageMethods,
        internal_size: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_message_new_opaque(
        type_: DP_MessageType,
        context_id: ::std::os::raw::c_uint,
        body: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_message_incref(msg: *mut DP_Message) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_message_incref_nullable(msg_or_null: *mut DP_Message) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_message_decref(msg: *mut DP_Message);
}
extern "C" {
    pub fn DP_message_decref_nullable(msg_or_null: *mut DP_Message);
}
extern "C" {
    pub fn DP_message_refcount(msg: *mut DP_Message) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_message_type(msg: *mut DP_Message) -> DP_MessageType;
}
extern "C" {
    pub fn DP_message_opaque(msg: *mut DP_Message) -> bool;
}
extern "C" {
    pub fn DP_message_name(msg: *mut DP_Message) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DP_message_context_id(msg: *mut DP_Message) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn DP_message_context_id_set(msg: *mut DP_Message, context_id: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn DP_message_internal(msg: *mut DP_Message) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn DP_message_from_internal(internal: *mut ::std::os::raw::c_void) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_message_cast(
        msg: *mut DP_Message,
        type_: DP_MessageType,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn DP_message_length(msg: *mut DP_Message) -> usize;
}
extern "C" {
    pub fn DP_message_ws_length(msg: *mut DP_Message) -> usize;
}
extern "C" {
    pub fn DP_message_serialize(
        msg: *mut DP_Message,
        write_body_length: bool,
        get_buffer: DP_GetMessageBufferFn,
        user: *mut ::std::os::raw::c_void,
    ) -> usize;
}
extern "C" {
    pub fn DP_message_write_text(msg: *mut DP_Message, writer: *mut DP_TextWriter) -> bool;
}
extern "C" {
    pub fn DP_message_equals(msg: *mut DP_Message, other: *mut DP_Message) -> bool;
}
extern "C" {
    pub fn DP_message_payload_equals(msg: *mut DP_Message, other: *mut DP_Message) -> bool;
}
extern "C" {
    pub fn DP_message_deserialize_length(
        buf: *const ::std::os::raw::c_uchar,
        bufsize: usize,
        body_length: usize,
        decode_opaque: bool,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_message_deserialize(
        buf: *const ::std::os::raw::c_uchar,
        bufsize: usize,
        decode_opaque: bool,
    ) -> *mut DP_Message;
}
extern "C" {
    pub fn DP_msg_draw_dabs_classic_paint_mode(
        mddc: *mut DP_MsgDrawDabsClassic,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_msg_draw_dabs_pixel_paint_mode(
        mddp: *mut DP_MsgDrawDabsPixel,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DP_msg_draw_dabs_mypaint_blend_paint_mode(
        mddmb: *mut DP_MsgDrawDabsMyPaintBlend,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct json_array_t {
    _unused: [u8; 0],
}
pub type JSON_Array = json_array_t;
pub type JSON_Value_Type = ::std::os::raw::c_int;
pub type JSON_Status = ::std::os::raw::c_int;
pub type JSON_Malloc_Function =
    ::std::option::Option<unsafe extern "C" fn(arg1: usize) -> *mut ::std::os::raw::c_void>;
pub type JSON_Free_Function =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn json_set_allocation_functions(
        malloc_fun: JSON_Malloc_Function,
        free_fun: JSON_Free_Function,
    );
}
extern "C" {
    pub fn json_set_escape_slashes(escape_slashes: ::std::os::raw::c_int);
}
extern "C" {
    pub fn json_set_float_serialization_format(format: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn json_parse_file(filename: *const ::std::os::raw::c_char) -> *mut JSON_Value;
}
extern "C" {
    pub fn json_parse_file_with_comments(
        filename: *const ::std::os::raw::c_char,
    ) -> *mut JSON_Value;
}
extern "C" {
    pub fn json_parse_string(string: *const ::std::os::raw::c_char) -> *mut JSON_Value;
}
extern "C" {
    pub fn json_parse_string_with_comments(
        string: *const ::std::os::raw::c_char,
    ) -> *mut JSON_Value;
}
extern "C" {
    pub fn json_serialization_size(value: *const JSON_Value) -> usize;
}
extern "C" {
    pub fn json_serialize_to_buffer(
        value: *const JSON_Value,
        buf: *mut ::std::os::raw::c_char,
        buf_size_in_bytes: usize,
    ) -> JSON_Status;
}
extern "C" {
    pub fn json_serialize_to_file(
        value: *const JSON_Value,
        filename: *const ::std::os::raw::c_char,
    ) -> JSON_Status;
}
extern "C" {
    pub fn json_serialize_to_string(value: *const JSON_Value) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn json_serialization_size_pretty(value: *const JSON_Value) -> usize;
}
extern "C" {
    pub fn json_serialize_to_buffer_pretty(
        value: *const JSON_Value,
        buf: *mut ::std::os::raw::c_char,
        buf_size_in_bytes: usize,
    ) -> JSON_Status;
}
extern "C" {
    pub fn json_serialize_to_file_pretty(
        value: *const JSON_Value,
        filename: *const ::std::os::raw::c_char,
    ) -> JSON_Status;
}
extern "C" {
    pub fn json_serialize_to_string_pretty(value: *const JSON_Value)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn json_free_serialized_string(string: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn json_value_equals(a: *const JSON_Value, b: *const JSON_Value) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_validate(schema: *const JSON_Value, value: *const JSON_Value) -> JSON_Status;
}
extern "C" {
    pub fn json_object_get_value(
        object: *const JSON_Object,
        name: *const ::std::os::raw::c_char,
    ) -> *mut JSON_Value;
}
extern "C" {
    pub fn json_object_get_string(
        object: *const JSON_Object,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn json_object_get_string_len(
        object: *const JSON_Object,
        name: *const ::std::os::raw::c_char,
    ) -> usize;
}
extern "C" {
    pub fn json_object_get_object(
        object: *const JSON_Object,
        name: *const ::std::os::raw::c_char,
    ) -> *mut JSON_Object;
}
extern "C" {
    pub fn json_object_get_array(
        object: *const JSON_Object,
        name: *const ::std::os::raw::c_char,
    ) -> *mut JSON_Array;
}
extern "C" {
    pub fn json_object_get_number(
        object: *const JSON_Object,
        name: *const ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn json_object_get_boolean(
        object: *const JSON_Object,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_object_dotget_value(
        object: *const JSON_Object,
        name: *const ::std::os::raw::c_char,
    ) -> *mut JSON_Value;
}
extern "C" {
    pub fn json_object_dotget_string(
        object: *const JSON_Object,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn json_object_dotget_string_len(
        object: *const JSON_Object,
        name: *const ::std::os::raw::c_char,
    ) -> usize;
}
extern "C" {
    pub fn json_object_dotget_object(
        object: *const JSON_Object,
        name: *const ::std::os::raw::c_char,
    ) -> *mut JSON_Object;
}
extern "C" {
    pub fn json_object_dotget_array(
        object: *const JSON_Object,
        name: *const ::std::os::raw::c_char,
    ) -> *mut JSON_Array;
}
extern "C" {
    pub fn json_object_dotget_number(
        object: *const JSON_Object,
        name: *const ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn json_object_dotget_boolean(
        object: *const JSON_Object,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_object_get_count(object: *const JSON_Object) -> usize;
}
extern "C" {
    pub fn json_object_get_name(
        object: *const JSON_Object,
        index: usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn json_object_get_value_at(object: *const JSON_Object, index: usize) -> *mut JSON_Value;
}
extern "C" {
    pub fn json_object_get_wrapping_value(object: *const JSON_Object) -> *mut JSON_Value;
}
extern "C" {
    pub fn json_object_has_value(
        object: *const JSON_Object,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_object_has_value_of_type(
        object: *const JSON_Object,
        name: *const ::std::os::raw::c_char,
        type_: JSON_Value_Type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_object_dothas_value(
        object: *const JSON_Object,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_object_dothas_value_of_type(
        object: *const JSON_Object,
        name: *const ::std::os::raw::c_char,
        type_: JSON_Value_Type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_object_set_value(
        object: *mut JSON_Object,
        name: *const ::std::os::raw::c_char,
        value: *mut JSON_Value,
    ) -> JSON_Status;
}
extern "C" {
    pub fn json_object_set_string(
        object: *mut JSON_Object,
        name: *const ::std::os::raw::c_char,
        string: *const ::std::os::raw::c_char,
    ) -> JSON_Status;
}
extern "C" {
    pub fn json_object_set_string_with_len(
        object: *mut JSON_Object,
        name: *const ::std::os::raw::c_char,
        string: *const ::std::os::raw::c_char,
        len: usize,
    ) -> JSON_Status;
}
extern "C" {
    pub fn json_object_set_number(
        object: *mut JSON_Object,
        name: *const ::std::os::raw::c_char,
        number: f64,
    ) -> JSON_Status;
}
extern "C" {
    pub fn json_object_set_boolean(
        object: *mut JSON_Object,
        name: *const ::std::os::raw::c_char,
        boolean: ::std::os::raw::c_int,
    ) -> JSON_Status;
}
extern "C" {
    pub fn json_object_set_null(
        object: *mut JSON_Object,
        name: *const ::std::os::raw::c_char,
    ) -> JSON_Status;
}
extern "C" {
    pub fn json_object_dotset_value(
        object: *mut JSON_Object,
        name: *const ::std::os::raw::c_char,
        value: *mut JSON_Value,
    ) -> JSON_Status;
}
extern "C" {
    pub fn json_object_dotset_string(
        object: *mut JSON_Object,
        name: *const ::std::os::raw::c_char,
        string: *const ::std::os::raw::c_char,
    ) -> JSON_Status;
}
extern "C" {
    pub fn json_object_dotset_string_with_len(
        object: *mut JSON_Object,
        name: *const ::std::os::raw::c_char,
        string: *const ::std::os::raw::c_char,
        len: usize,
    ) -> JSON_Status;
}
extern "C" {
    pub fn json_object_dotset_number(
        object: *mut JSON_Object,
        name: *const ::std::os::raw::c_char,
        number: f64,
    ) -> JSON_Status;
}
extern "C" {
    pub fn json_object_dotset_boolean(
        object: *mut JSON_Object,
        name: *const ::std::os::raw::c_char,
        boolean: ::std::os::raw::c_int,
    ) -> JSON_Status;
}
extern "C" {
    pub fn json_object_dotset_null(
        object: *mut JSON_Object,
        name: *const ::std::os::raw::c_char,
    ) -> JSON_Status;
}
extern "C" {
    pub fn json_object_remove(
        object: *mut JSON_Object,
        name: *const ::std::os::raw::c_char,
    ) -> JSON_Status;
}
extern "C" {
    pub fn json_object_dotremove(
        object: *mut JSON_Object,
        key: *const ::std::os::raw::c_char,
    ) -> JSON_Status;
}
extern "C" {
    pub fn json_object_clear(object: *mut JSON_Object) -> JSON_Status;
}
extern "C" {
    pub fn json_array_get_value(array: *const JSON_Array, index: usize) -> *mut JSON_Value;
}
extern "C" {
    pub fn json_array_get_string(
        array: *const JSON_Array,
        index: usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn json_array_get_string_len(array: *const JSON_Array, index: usize) -> usize;
}
extern "C" {
    pub fn json_array_get_object(array: *const JSON_Array, index: usize) -> *mut JSON_Object;
}
extern "C" {
    pub fn json_array_get_array(array: *const JSON_Array, index: usize) -> *mut JSON_Array;
}
extern "C" {
    pub fn json_array_get_number(array: *const JSON_Array, index: usize) -> f64;
}
extern "C" {
    pub fn json_array_get_boolean(array: *const JSON_Array, index: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_array_get_count(array: *const JSON_Array) -> usize;
}
extern "C" {
    pub fn json_array_get_wrapping_value(array: *const JSON_Array) -> *mut JSON_Value;
}
extern "C" {
    pub fn json_array_remove(array: *mut JSON_Array, i: usize) -> JSON_Status;
}
extern "C" {
    pub fn json_array_replace_value(
        array: *mut JSON_Array,
        i: usize,
        value: *mut JSON_Value,
    ) -> JSON_Status;
}
extern "C" {
    pub fn json_array_replace_string(
        array: *mut JSON_Array,
        i: usize,
        string: *const ::std::os::raw::c_char,
    ) -> JSON_Status;
}
extern "C" {
    pub fn json_array_replace_string_with_len(
        array: *mut JSON_Array,
        i: usize,
        string: *const ::std::os::raw::c_char,
        len: usize,
    ) -> JSON_Status;
}
extern "C" {
    pub fn json_array_replace_number(array: *mut JSON_Array, i: usize, number: f64) -> JSON_Status;
}
extern "C" {
    pub fn json_array_replace_boolean(
        array: *mut JSON_Array,
        i: usize,
        boolean: ::std::os::raw::c_int,
    ) -> JSON_Status;
}
extern "C" {
    pub fn json_array_replace_null(array: *mut JSON_Array, i: usize) -> JSON_Status;
}
extern "C" {
    pub fn json_array_clear(array: *mut JSON_Array) -> JSON_Status;
}
extern "C" {
    pub fn json_array_append_value(array: *mut JSON_Array, value: *mut JSON_Value) -> JSON_Status;
}
extern "C" {
    pub fn json_array_append_string(
        array: *mut JSON_Array,
        string: *const ::std::os::raw::c_char,
    ) -> JSON_Status;
}
extern "C" {
    pub fn json_array_append_string_with_len(
        array: *mut JSON_Array,
        string: *const ::std::os::raw::c_char,
        len: usize,
    ) -> JSON_Status;
}
extern "C" {
    pub fn json_array_append_number(array: *mut JSON_Array, number: f64) -> JSON_Status;
}
extern "C" {
    pub fn json_array_append_boolean(
        array: *mut JSON_Array,
        boolean: ::std::os::raw::c_int,
    ) -> JSON_Status;
}
extern "C" {
    pub fn json_array_append_null(array: *mut JSON_Array) -> JSON_Status;
}
extern "C" {
    pub fn json_value_init_object() -> *mut JSON_Value;
}
extern "C" {
    pub fn json_value_init_array() -> *mut JSON_Value;
}
extern "C" {
    pub fn json_value_init_string(string: *const ::std::os::raw::c_char) -> *mut JSON_Value;
}
extern "C" {
    pub fn json_value_init_string_with_len(
        string: *const ::std::os::raw::c_char,
        length: usize,
    ) -> *mut JSON_Value;
}
extern "C" {
    pub fn json_value_init_number(number: f64) -> *mut JSON_Value;
}
extern "C" {
    pub fn json_value_init_boolean(boolean: ::std::os::raw::c_int) -> *mut JSON_Value;
}
extern "C" {
    pub fn json_value_init_null() -> *mut JSON_Value;
}
extern "C" {
    pub fn json_value_deep_copy(value: *const JSON_Value) -> *mut JSON_Value;
}
extern "C" {
    pub fn json_value_free(value: *mut JSON_Value);
}
extern "C" {
    pub fn json_value_get_type(value: *const JSON_Value) -> JSON_Value_Type;
}
extern "C" {
    pub fn json_value_get_object(value: *const JSON_Value) -> *mut JSON_Object;
}
extern "C" {
    pub fn json_value_get_array(value: *const JSON_Value) -> *mut JSON_Array;
}
extern "C" {
    pub fn json_value_get_string(value: *const JSON_Value) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn json_value_get_string_len(value: *const JSON_Value) -> usize;
}
extern "C" {
    pub fn json_value_get_number(value: *const JSON_Value) -> f64;
}
extern "C" {
    pub fn json_value_get_boolean(value: *const JSON_Value) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn json_value_get_parent(value: *const JSON_Value) -> *mut JSON_Value;
}
extern "C" {
    pub fn json_type(value: *const JSON_Value) -> JSON_Value_Type;
}
extern "C" {
    pub fn json_object(value: *const JSON_Value) -> *mut JSON_Object;
}
extern "C" {
    pub fn json_array(value: *const JSON_Value) -> *mut JSON_Array;
}
extern "C" {
    pub fn json_string(value: *const JSON_Value) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn json_string_len(value: *const JSON_Value) -> usize;
}
extern "C" {
    pub fn json_number(value: *const JSON_Value) -> f64;
}
extern "C" {
    pub fn json_boolean(value: *const JSON_Value) -> ::std::os::raw::c_int;
}
