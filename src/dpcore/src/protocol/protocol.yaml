# Copyright 2020-2021 Calle Laakkonen
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

_protocol:
    version: dp:4.22.2
    undo_depth: 30

# Control messages (transparent)
ServerCommand:
    id: 0
    comment: |
             Server command message

             This is a general purpose message for sending commands to the server
             and receiving replies. This is used for (among other things):

             - the login handshake
             - setting session parameters (e.g. max user count and password)
             - sending administration commands (e.g. kick user)
    fields:
        - msg bytes

Ping:
    id: 2
    comment: |
             Ping message

             This is used for latency measurement as well as a keepalive. Normally, the client
             should be the one to send the ping messages.

             The server should return a Ping with the is_pong flag set
    fields:
        - is_pong bool

Disconnect:
    id: 1
    comment: |
             Disconnect notification

             This message is used when closing the connection gracefully. The message queue
             will automatically close the socket after sending this message.
    fields:
        - reason u8
        - message utf8

Internal:
    id: 31
    comment: Reserved for internal use
    reserved: true

# Meta messages (transparent)

Join:
    id: 32
    comment: |
             Inform the client of a new user

             This message is sent only be the server. It associates a username
             with a context ID.
    fields:
        - flags flags: [auth, mod, bot]
        - name utf8
        - avatar bytes

Leave:
    id: 33
    comment: |
             Inform the client of a user leaving

             This message is sent only by the server. Upon receiving this message,
             clients will typically remove the user from the user listing. The client
             is also allowed to release resources associated with this context ID.
    fields: []

SessionOwner:
    id: 34
    comment: |
             Session ownership change

             This message sets the users who have operator status. It can be
             sent by users who are already operators or by the server (user id=0).

             The list of operators implicitly contains the user who sends the
             message, thus users cannot deop themselves.

             The server sanitizes the ID list so, when distributed to other users,
             it does not contain any duplicates or non-existing users and can be trusted
             without checking the access control list.
    fields:
        - users vec_u8:
          max_len: 255

Chat:
    id: 35
    comment: |
             A chat message

             Chat message sent by the server with the user ID 0 are server messages.
             (Typically a Command message is used for server announcements, but the Chat message
             is used for those messages that must be stored in the session history.)
    fields:
        - tflags flags: [bypass]
        - oflags flags: [shout, action, pin, alert]
        - message utf8

TrustedUsers:
    id: 36
    name: trusted
    comment: |
             List of trusted users

             This message sets the list of user who have been tagged as trusted,
             but who are not operators. The meaning of "trusted" is a mostly
             clientside concept, but the session can be configured to allow trusted
             users access to some operator commands. (Deputies)

             This command can be sent by operators or by the server (ctx=0).

             The server sanitizes the ID list so, when distributed to other users,
             it does not contain any duplicates or non-existing users and can be trusted
             without checking the access control list.
    fields:
        - users vec_u8:
          max_len: 255

SoftReset:
    id: 37
    comment: |
             Soft reset point marker

             This message marks the point in the session history where a soft reset occurs.
             A thick-server performs an internal soft-reset when a user joins.

             All users should truncate their own session history when receiving this message,
             since undos cannot cross the reset boundary.
    fields: []

PrivateChat:
    id: 38
    comment: |
             A private chat message

             Note. This message type was added in protocol 4.21.2 (v. 2.1.0). For backward compatiblity,
             the server will not send any private messages from itself; it will only relay them from
             other users. In version 3.0, this should be merged with the normal Chat message.

             Private messages always bypass the session history.
    fields:
        - target u8
        - oflags u8
        - message utf8


# Meta messages (opaque)

Interval:
    id: 64
    comment: |
             Event interval record

             This is used to preserve timing information in session recordings.

             Note. The maximum interval (using a single message) is about 65 seconds.
             Typically the intervals we want to store are a few seconds at most, so this should be enough.
    fields:
        - msecs u16

LaserTrail:
    id: 65
    comment: |
             Start/end drawing pointer laser trail

             This signals the beginning or the end of a laser pointer trail. The trail coordinates
             are sent with MovePointer messages.

             A nonzero persistence indicates the start of the trail and zero the end.
    fields:
        - color argb32
        - persistence u8

MovePointer:
    id: 66
    comment: |
             Move user pointer

             This is message is used to update the position of the user pointer when no
             actual drawing is taking place. It is also used to draw the "laser pointer" trail.
             Note. This is a META message, since this is used for a temporary visual effect only,
             and thus doesn't affect the actual canvas content.

             The pointer position is given in integer coordinates.
    fields:
        - x i32
        - y i32

Marker:
    id: 67
    comment: |
             A bookmark

             This is used to bookmark points in the session for quick access when playing back a recording
    fields:
        - text utf8

UserACL:
    id: 68
    comment: |
             Set user specific locks

             This is an opaque meta command that contains a list of users to be locked.
             It can only be sent by session operators.
    fields:
        - users vec_u8:
          max_len: 255

LayerACL:
    id: 69
    comment: |
             Change layer access control list

             This is an opaque meta command. It is used to set the general layer lock
             as well as give exclusive access to selected users.

             When the OWNLAYERS mode is set, any user can use this to change the ACLs on layers they themselves
             have created (identified by the ID prefix.)

             Using layer ID 0 sets or clears a general canvaswide lock. The tier and exclusive user list is not
             used in this case.

             The eighth bit of the flags field (0x80) indicates whether the layer is locked in general.
             The first three bits (0x07) indicate the access tier level.
    fields:
        - id u16
        - flags u8
        - exclusive vec_u8:
          max_len: 255

FeatureAccessLevels:
    id: 70
    name: featureaccess
    comment: Change feature access tiers
    fields:
        - feature_tiers vec_u8:
          min_len: 11
          max_len: 11

DefaultLayer:
    id: 71
    comment: |
             Set the default layer

             The default layer is the one new users default to when logging in.
             If no default layer is set, the newest layer will be selected by default.
    fields:
        - id u16: hex

Filtered:
    id: 72
    comment: |
             A message that has been filtered away by the ACL filter

             This is only used in recordings for mainly debugging purposes.
             This message should never be sent over the network.
    fields:
        - message bytes

Extension:
    id: 73
    comment: Reserved for non-standard extension use
    reserved: true

# Command messages (opaque)
UndoPoint:
    id: 128
    comment: |
             Undo demarcation point

             The client sends an UndoPoint message to signal the start of an undoable sequence.
    fields: []

CanvasResize:
    id: 129
    name: resize
    comment: |
             Adjust canvas size

             This is the first command that must be sent to initialize the session.

             This affects the size of all existing and future layers.

             The new canvas size is relative to the old one. The four adjustement
             parameters extend or retract their respective borders.
             Initial canvas resize should be (0, w, h, 0).
    fields:
        - top i32
        - right i32
        - bottom i32
        - left i32

LayerCreate:
    id: 130
    name: newlayer
    comment: |
             Create a new layer

             A session starts with zero layers, so a layer creation command is typically
             the second command to be sent, right after setting the canvas size.

             The layer ID must be prefixed with the context ID of the user creating it.
             This allows the client to choose the layer ID without worrying about
             clashes. In multiuser mode the ACL filter validates the prefix for all new layers.

             If the `source` field is nonzero, a copy of the source layer is made.
             Otherwise, either a blank new bitmap or a group layer is created.
             When copying a group, the group's layers are assigned new IDs sequentally,
             starting from the group ID, using the group IDs user prefix.

             If the `target` field is nonzero, the newly created layer will be
             insert above that layer or group, or into that group. If zero,
             the layer will be added to the top of the root group.

             The following flags can be used with layer creation:
             - GROUP: a group layer is created (ignored if `source` is set)
             - INTO: the new layer will be added to the top to the `target` group.
                     The target must be nonzero.

             If layer controls are locked, this command requires session operator privileges.
    fields:
        - id u16: hex
        - source u16: hex
        - target u16: hex
        - fill argb32
        - flags flags: [group, into]
        - name utf8

LayerAttributes:
    id: 131
    name: layerattr
    comment: |
             Change layer attributes

             If the target layer is locked, this command requires session operator privileges.

             Specifying a sublayer requires session operator privileges. Currently, it is used
             only when sublayers are needed at canvas initialization.

             Note: the `fixed` flag is unused since version 2.2. It's functionality is replaced
             by the custom timeline feature.
    fields:
        - id u16: hex
        - sublayer u8
        - flags flags: [censor, fixed, isolated]
        - opacity u8
        - blend blendmode

LayerRetitle:
    id: 132
    name: retitlelayer
    comment: Change a layer's title
    fields:
        - id u16: hex
        - title utf8

LayerOrder:
    id: 133
    comment: |
             Reorder layers

             The layer tree of the given group (0 means whole tree) will be reordered
             according to the given order.
             The order should describe a tree using (child count, layer ID) pairs.

             For example (indented for clarity):

               2, 1,
                 0, 10,
                 0, 11,
               0, 2,
               2, 3,
                 1, 30,
                   0, 31
                 0, 32

              Each layer in the group must be listed exactly once in the new order,
              or the command will be rejected.

    fields:
      - root u16: hex
      - layers vec_u16: hex

LayerDelete:
    id: 134
    name: deletelayer
    comment: |
             Delete a layer

             If the merge attribute is nonzero, the contents of the layer is merged
             to the layer with the given ID.

             If the current layer or layer controls in general are locked, this command
             requires session operator privileges.
    fields:
        - id u16: hex
        - merge_to u16: hex

LayerVisibility:
    id: 135
    comment: Toggle layer local visibility (this is used internally only and never sent over the network)
    fields:
      - id u16
      - visible bool

PutImage:
    id: 136
    comment: |
             Draw a bitmap onto a layer

             This is used for pasting images, floodfill, merging annotations and
             other tasks where image processing is done clientisde.

             All layer blending modes are supported.

             The image data is DEFLATEd 32bit premultiplied ARGB data. The image
             is prefixed with a 32 bit unsigned integer (big endian) which contains
             the expected length of the uncompressed data.

             Note that since the message length is fairly limited, a
             large image may have to be divided into multiple PutImage
             commands.
    fields:
        - layer u16: hex
        - mode blendmode
        - x u32
        - y u32
        - w u32
        - h u32
        - image bytes

FillRect:
    id: 137
    comment: Fill a rectangle with solid color
    fields:
        - layer u16: hex
        - mode blendmode
        - x u32
        - y u32
        - w u32
        - h u32
        - color argb32

ToolChange:
    id: 138
    comment: Removed in version 2.1
    reserved: true

PenMove:
    id: 139
    comment: Removed in version 2.1
    reserved: true

PenUp:
    id: 140
    comment: |
             Pen up command

             The pen up command signals the end of a stroke. In indirect drawing mode, it causes
             indirect dabs (by this user) to be merged to their parent layers.
    fields: []

AnnotationCreate:
    id: 141
    name: newannotation
    comment: |
             Create a new annotation

             Annotations are floating text layers. They are drawn over the image layers and
             have no defined stacking order.

             The new annotation created with this command is initally empy with a transparent background
    fields:
        - id u16: hex
        - x i32
        - y i32
        - w u16
        - h u16

AnnotationReshape:
    id: 142
    name: reshapeannotation
    comment: Change the position and size of an annotation
    fields:
        - id u16: hex
        - x i32
        - y i32
        - w u16
        - h u16

AnnotationEdit:
    id: 143
    name: editannotation
    comment: |
             Change annotation content

             Accepted contents is the subset of HTML understood by QTextDocument

             If an annotation is flagged as protected, it cannot be modified by users
             other than the one who created it, or session operators.
    fields:
        - id u16: hex
        - bg argb32
        - flags flags: [protect, valign_center, valign_bottom]
        - border u8
        - text utf8

AnnotationDelete:
    id: 144
    name: deleteannotation
    comment: |
             Delete an annotation

             Note: Unlike in layer delete command, there is no "merge" option here.
             Merging an annotation is done by rendering the annotation item to
             an image and drawing the image with the PutImage command. This ensures
             identical rendering on all clients.
    fields:
        - id u16: hex

MoveRegion:
    id: 145
    comment: Difficult to reimplement. Replaced by MoveRect
    reserved: true

PutTile:
    id: 146
    comment: |
             Set the content of a tile

             Unlike PutImage, this replaces an entire tile directly without any blending.
             This command is typically used during canvas initialization to set the initial content.

             PutTile can target sublayers as well. This is used when generating a reset image
             with incomplete indirect strokes. Sending a PenUp command will merge the sublayer.
    fields:
        - layer u16: hex
        - sublayer u8
        - last_touch u8
        - col u16
        - row u16
        - repeat u16
        - image bytes

CanvasBackground:
    id: 147
    name: background
    comment: |
             Set the canvas background tile

             If the payload is exactly 4 bytes long, it should be interpreted as a solid background color.
             Otherwise, it is the DEFLATED tile bitmap
    fields:
        - image bytes

DrawDabsClassic:
    id: 148
    name: classicdabs
    comment: |
             Draw classic brush dabs

             A simple delta compression scheme is used.
             The coordinates of each dab are relative to the previous dab.
             The coordinate system has 1/4 pixel resolution. Divide by 4.0 before use.
             The size field is the brush diameter multiplied by 256.
    fields:
        - layer u16: hex
        - x i32: div4
        - y i32: div4
        - color argb32
        - mode blendmode
        - dabs struct:
          name: ClassicDab
          fields:
            - x i8: div4
            - y i8: div4
            - size u16: div256
            - hardness u8
            - opacity u8

DrawDabsPixel:
    id: 149
    name: pixeldabs
    comment: |
             Draw round pixel brush dabs

             The same kind of delta compression is used as in classicdabs,
             but the fields all have integer precision.
    fields:
        - layer u16: hex
        - x i32
        - y i32
        - color argb32
        - mode blendmode
        - dabs struct:
          name: PixelDab
          fields:
            - x i8
            - y i8
            - size u8
            - opacity u8

DrawDabsPixelSquare:
    id: 150
    name: squarepixeldabs
    comment: Draw square pixel brush dabs
    alias: DrawDabsPixel

DrawDabsMyPaint:
    id: 151
    name: mypaintdabs
    comment: Draw MyPaint brush dabs
    fields:
        - layer u16: hex
        - x i32: div4
        - y i32: div4
        - color argb32
        - lock_alpha u8
        - colorize u8
        - posterize u8
        - posterize_num u8
        - dabs struct:
          name: MyPaintDab
          fields:
            - x i8: div4
            - y i8: div4
            - size u16: div256
            - hardness u8
            - opacity u8
            - angle u8
            - aspect_ratio u8

MoveRect:
    id: 160
    comment: |
             Move a rectangular area on a layer.

             A mask image can be given to mask out part of the region
             to support non-rectangular selections.

             Source and target rects may be (partially) outside the canvas.

             Note: The MoveRegion command that can also transform the
             selection is currently not implemented. The same effect can be
             achieved by performing the transformation clientside then
             sending the results as PutImages, including one to erase the
             source.
    fields:
      - layer u16: hex
      # source rectangle
      - sx i32
      - sy i32
      - tx i32
      - ty i32
      - w i32
      - h i32
      - mask bytes

SetMetadataInt:
    id: 161
    comment: |
             Set a document metadata field (integer type)

             These typically don't have an immediate visual effect,
             but these fields are part of the document, like the pixel content
             or the annotations.
    fields:
        - field enum:
          name: MetadataInt
          variants:
              - Dpix
              - Dpiy
              - Framerate
              - UseTimeline
        - value i32

SetMetadataStr:
    id: 162
    comment: Set a document metadata field (string type)
    fields:
        - field u8
        - value utf8

SetTimelineFrame:
    id: 163
    comment: |
             Set the layers included in the given animation frame

             The frame number must be between zero and last frame number + 1.

             If the `insert` flag is true, the frame will be inserted at the given
             position rather than replacing the existing frame.
    fields:
        - frame u16
        - insert bool
        - layers vec_u16: hex
          max_len: 12

RemoveTimelineFrame:
  id: 164
  comment: Remove a frame from the timeline
  fields:
    - frame u16

Undo:
    id: 255
    comment: Undo or redo actions
    fields:
        - override_user u8
        - redo bool
